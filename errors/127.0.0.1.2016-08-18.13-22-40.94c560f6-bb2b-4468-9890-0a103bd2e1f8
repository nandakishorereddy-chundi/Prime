(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'str' object has no attribute 'name'"
p3
sS'layer'
p4
S'C:\\Users\\Maneesh\\PycharmProjects\\Prime\\web2py\\applications\\Prime\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nfrom ctypes import cast\nimport re\nimport sys\nimport collections\nimport os\nfrom types import *\n\n#region Default\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome")\n    org_table = db(db.organization.id >= 0).select()\n    POC_table = db(db.point_of_contact.id >= 0).select()\n    Installation_details_table = db(db.installation_details.id >=0 ).select()\n    return dict(message=T(\'Welcome to web2py!\'), org_table = org_table, POC_table = POC_table, Installation_details_table = Installation_details_table)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n#endregion\n\nfrom gluon.tools import Crud\ncrud = Crud(db)\ncrud.settings.controller = \'default\'\n\nfrom gluon.contrib.pyfpdf import FPDF,HTMLMixin\nfrom plugin_sqleditable.editable import SQLEDITABLE\nSQLEDITABLE.init()\n\n#region Admin Functions\n#############################################################################################################\n#------------------------------------------- ADMIN FUNCTIONS -----------------------------------------------#\n#############################################################################################################\n@auth.requires_login()\ndef admin_functions():\n    profit_table = db(db.profit_margin_table.id >= 0).select()\n    grid = SQLFORM.grid(db.profit_margin_table)\n    design_table = db(db.design.id >= 0).select()\n    return dict(profit_table = profit_table,design_table = design_table, grid = grid)\n\n#region Admin/User\n#-------------------------------------------- ADD/DELETE ADMIN/USER -----------------------------------------#\n@auth.requires_login()\ndef add_new_admin():\n    user_table = db((db.auth_user.id >= 0) & (db.auth_user.id != auth.user.id) & (db.auth_user.IS_ADMIN == False)).select()\n    return dict(user_table = user_table)\n@auth.requires_login()\ndef add_new_admin_helper():\n    if auth.user.IS_ADMIN:\n        new_admin = []\n        for var in request.vars:\n            try:\n                new_admin.append(int(var))\n            except:\n                pass\n        new_admin_list = db((db.auth_user. id >= 0) & (db.auth_user.id.belongs(new_admin))).select()\n        for user in new_admin_list:\n            user.IS_ADMIN = True\n            user.update_record()\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' made \' + user.first_name + \' \' + user.last_name + \' admin\', log_time = datetime.datetime.now())\n        redirect(\'admin_functions.html\')\n        response.flash = \'Success\'\n        return dict()\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef remove_admin():\n    user_table = db((db.auth_user.id >= 0) & (db.auth_user.id != auth.user.id) & (db.auth_user.IS_ADMIN == True)).select()\n    return dict(user_table = user_table)\n@auth.requires_login()\ndef remove_admin_helper():\n    if auth.user.IS_ADMIN:\n        admin = []\n        for var in request.vars:\n            try:\n                admin.append(int(var))\n            except:\n                pass\n        admin_list = db((db.auth_user. id >= 0) & (db.auth_user.id.belongs(admin))).select()\n        for user in admin_list:\n            user.IS_ADMIN = False\n            user.update_record()\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' removed admin status of \' + user.first_name + \' \' + user.last_name, log_time = datetime.datetime.now())\n        redirect(\'admin_functions.html\')\n        response.flash = \'Success\'\n        return dict()\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef remove_user():\n    if auth.user.IS_ADMIN:\n        user_table = db((db.auth_user.id >= 0) & (db.auth_user.id != auth.user.id)).select()\n        return dict(user_table = user_table)\n    else:\n        response.flash = \'Requires Admin Access\'\n@auth.requires_login()\ndef remove_user_helper():\n    if auth.user.IS_ADMIN:\n        user_list = []\n        for var in request.vars:\n            try:\n                user_list.append(int(var))\n            except:\n                pass\n        new_user_list = db((db.auth_user. id >= 0) & (db.auth_user.id.belongs(user_list))).select()\n        for user in new_user_list:\n            user.delete_record()\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' removed user \' + user.first_name + \' \' + user.last_name, log_time = datetime.datetime.now())\n        redirect(\'admin_functions.html\')\n        response.flash = \'Success\'\n        return dict()\n    else:\n        response.flash = \'Requires Admin Access\'\n#endregion\n\n#region Profit Margin Table\n#-------------------------------------------- ADD/DELETE/UPDATE/VIEW PROFIT MARGIN TABLE -----------------------------------------#\n@auth.requires_login()\ndef add_profit_margin_entry():\n    if auth.user.IS_ADMIN:\n        form = SQLFORM(db.profit_margin_table)\n        if form.process().accepted:\n            response.flash = \'form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted profit margin table entry \' + form.vars.name + \' ---- \' + form.vars.percentage, log_time = datetime.datetime.now())\n            redirect(URL(\'admin_functions.html\'))\n        elif form.errors:\n           response.flash = \'form has errors\'\n        else:\n           response.flash = \'please fill out the form\'\n        return dict(form=form)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef update_profit_margin_entry():\n    if auth.user.IS_ADMIN:\n        entry_id = request.vars.entry_id\n        l=db(db.profit_margin_table.id==entry_id).select()\n        form=[]\n        for i in l:\n            old_name = i.name\n            old_percentage = i.percentage\n            form = SQLFORM(db.profit_margin_table, i, deletable=False)\n            if form.process().accepted:\n                response.flash = \'form accepted\'\n                if not request.vars.delete_this_record:\n                    db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated profit margin table entry \' + old_name + \' ---- \' + str(old_percentage) + \' to \' + form.vars.name + \' ---- \' + str(form.vars.percentage), log_time = datetime.datetime.now())\n                else:\n                    db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' deleted profit margin table entry \' + old_name, log_time = datetime.datetime.now())\n                redirect(URL(\'admin_functions.html\'))\n            elif form.errors:\n               response.flash = \'form has errors\'\n            else:\n               response.flash = \'please update\'\n        return dict(form=form)\n    else:\n        response.flash = \'Requires Admin Access\'\n#endregion\n\n#region Design\n#------------------------------------------- ADD DESIGN -----------------------------------------#\n@auth.requires_login()\ndef add_design():\n    if auth.user.IS_ADMIN:\n        form = SQLFORM(db.design)\n        if form.process().accepted:\n            response.flash = \'form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' added design \' + form.vars.name, log_time = datetime.datetime.now())\n            redirect(URL(\'add_design_parameters.html\', args = form.vars.id))\n        elif form.errors:\n           response.flash = \'form has errors\'\n        else:\n           response.flash = \'please fill out the form\'\n        return dict(form=form)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef add_design_parameters():\n    if auth.user.IS_ADMIN:\n        design_id = request.args(0,cast = int)\n        return dict(design_id = design_id)\n    else:\n        response.flash = \'Requires Admin Access\'\n@auth.requires_login()\ndef add_design_parameters_helper():\n    #Update logs\n    if auth.user.IS_ADMIN:\n        design_name = db(db.design.id == request.vars.design_id).select()\n        params = request.vars.params.split(\',\')\n        for i in range(len(params)):\n            db.design_parameters.insert(design_id=request.vars.design_id,name=params[i],codename=\'P\' + str(i+1))\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' added \' + str(len(params)) + \' design parameters to design \' + design_name[0].name, log_time = datetime.datetime.now())\n        redirect(URL(\'add_profile_used_in_design.html\',args=request.vars.design_id))\n        return dict()\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef add_profile_used_in_design():\n    if auth.user.IS_ADMIN:\n        design_id = request.args(0,cast=int)\n        design_name = db(db.design.id == design_id).select()\n        profile_name = db(db.profile.id == form.vars.profile_id).select()\n        grid = SQLFORM.grid(db.design_parameters.design_id == design_id,args=request.args[:1],fields=[db.design_parameters.name,db.design_parameters.codename],searchable=False,sortable=False,deletable=False,editable=False,create=False,details=False,csv=False)\n        profile_table = db(db.profile_used_in_design.design_id == design_id).select()\n        form = SQLFORM(db.profile_used_in_design,buttons=[TAG.button("Add these details",_type="submit"),TAG.button("Done",_type="button",_onClick="confirm_button()")])\n        names = db(db.profile_used_in_design.design_id == design_id).select(join = db.profile_used_in_design.on(db.profile.id == db.profile_used_in_design.profile_id))\n        db.profile_used_in_design.design_id.default = design_id\n        if form.process().accepted:\n            response.flash=\'Form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted profile details name: \' + profile_name[0].name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            redirect(URL(\'add_profile_used_in_design\', args=design_id))\n        elif form.errors:\n            response.flash=\'Form has errors\'\n        else:\n            response.flash=\'Please fill the form\'\n        return dict(grid = grid,design_id = design_id,form = form,profile_table = profile_table,names = names)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef add_reinforcement_used_in_design():\n    if auth.user.IS_ADMIN:\n        design_id = request.args(0,cast=int)\n        design_name = db(db.design.id == design_id).select()\n        reinforcement_name = db(db.reinforcement.id == form.vars.reinforcement_id).select()\n        grid = SQLFORM.grid(db.design_parameters.design_id == design_id,args=request.args[:1],fields=[db.design_parameters.name,db.design_parameters.codename],searchable=False,sortable=False,deletable=False,editable=False,create=False,details=False,csv=False)\n        reinforcement_table = db(db.reinforcement_used_in_design.design_id == design_id).select()\n        names = db(db.reinforcement_used_in_design.design_id == design_id).select(join = db.reinforcement_used_in_design.on(db.reinforcement.id == db.reinforcement_used_in_design.reinforcement_id))\n        db.reinforcement_used_in_design.design_id.default = design_id\n        form = SQLFORM(db.reinforcement_used_in_design,buttons=[TAG.button("Add these details",_type="submit"),TAG.button("Done",_type="button",_onClick="confirm_button()")])\n        if form.process().accepted:\n            response.flash=\'Form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted reinforcement details name: \' + reinforcement_name[0].name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            redirect(URL(\'add_reinforcement_used_in_design\', args=design_id))\n        elif form.errors:\n            response.flash=\'Form has errors\'\n        else:\n            response.flash=\'Please fill the form\'\n        return dict(grid = grid,design_id = design_id,form = form,reinforcement_table = reinforcement_table,names = names)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef add_HAA_used_in_design():\n    if auth.user.IS_ADMIN:\n        design_id = request.args(0,cast=int)\n        design_name = db(db.design.id == design_id).select()\n        HAA_name = db(db.hardware_and_accessories.id == form.vars.hardware_and_accessories_id).select()\n        grid = SQLFORM.grid(db.design_parameters.design_id == design_id,args=request.args[:1],fields=[db.design_parameters.name,db.design_parameters.codename],searchable=False,sortable=False,deletable=False,editable=False,create=False,details=False,csv=False)\n        HAA_table = db(db.hardware_and_accessories_used_in_design.design_id == design_id).select()\n        names = db(db.hardware_and_accessories_used_in_design.design_id == design_id).select(join = db.hardware_and_accessories_used_in_design.on(db.hardware_and_accessories.id == db.hardware_and_accessories_used_in_design.hardware_and_accessories_id))\n        db.hardware_and_accessories_used_in_design.design_id.default = design_id\n        form = SQLFORM(db.hardware_and_accessories_used_in_design,buttons=[TAG.button("Add these details",_type="submit"),TAG.button("Done",_type="button",_onClick="confirm_button()")])\n        if form.process().accepted:\n            response.flash=\'Form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted hardware details name: \' + HAA_name[0].name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            redirect(URL(\'add_HAA_used_in_design\', args=design_id))\n        elif form.errors:\n            response.flash=\'Form has errors\'\n        else:\n            response.flash=\'Please fill the form\'\n        return dict(grid = grid,design_id = design_id,form = form,HAA_table = HAA_table,names = names)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef add_glass_used_in_design():\n    if auth.user.IS_ADMIN:\n        design_id = request.args(0,cast=int)\n        design_name = db(db.design.id == design_id).select()\n        glass_name = db(db.glass.id == form.vars.glass_id).select()\n        grid = SQLFORM.grid(db.design_parameters.design_id == design_id,args=request.args[:1],fields=[db.design_parameters.name,db.design_parameters.codename],searchable=False,sortable=False,deletable=False,editable=False,create=False,details=False,csv=False)\n        glass_table = db(db.glass_used_in_design.design_id == design_id).select()\n        names = db(db.glass_used_in_design.design_id == design_id).select(join = db.glass_used_in_design.on(db.glass.id == db.glass_used_in_design.glass_id))\n        db.glass_used_in_design.design_id.default = design_id\n        form = SQLFORM(db.glass_used_in_design,buttons=[TAG.button("Add these details",_type="submit"),TAG.button("Done",_type="button",_onClick="confirm_button()")])\n        if form.process().accepted:\n            response.flash=\'Form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted glass details name: \' + glass_name[0].name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            redirect(URL(\'add_glass_used_in_design\', args=design_id))\n        elif form.errors:\n            response.flash=\'Form has errors\'\n        else:\n            response.flash=\'Please fill the form\'\n        return dict(grid = grid,design_id = design_id,form = form,glass_table = glass_table,names = names)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef add_material_used_in_design():\n    if auth.user.IS_ADMIN:\n        design_id = request.args(0,cast=int)\n        design_name = db(db.design.id == design_id).select()\n        material_name = db(db.installation_material.id == form.vars.installation_material_id).select()\n        grid = SQLFORM.grid(db.design_parameters.design_id == design_id,args=request.args[:1],fields=[db.design_parameters.name,db.design_parameters.codename],searchable=False,sortable=False,deletable=False,editable=False,create=False,details=False,csv=False)\n        material_table = db(db.installation_material_used_in_design.design_id == design_id).select()\n        names = db(db.installation_material_used_in_design.design_id == design_id).select(join = db.installation_material_used_in_design.on(db.installation_material.id == db.installation_material_used_in_design.installation_material_id))\n        db.installation_material_used_in_design.design_id.default = design_id\n        form = SQLFORM(db.installation_material_used_in_design,buttons=[TAG.button("Add these details",_type="submit"),TAG.button("Done",_type="button",_onClick="confirm_button()")])\n        if form.process().accepted:\n            response.flash=\'Form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted installation material details name: \' + material_name[0].name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            redirect(URL(\'add_material_used_in_design\', args=design_id))\n        elif form.errors:\n            response.flash=\'Form has errors\'\n        else:\n            response.flash=\'Please fill the form\'\n        return dict(grid = grid,design_id = design_id,form = form,material_table = material_table,names = names)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef add_extra_information_in_design():\n    if auth.user.IS_ADMIN:\n        design_id = request.args(0,cast=int)\n        design_name = db(db.design.id == design_id).select()\n        grid = SQLFORM.grid(db.design_parameters.design_id == design_id,args=request.args[:1],fields=[db.design_parameters.name,db.design_parameters.codename],searchable=False,sortable=False,deletable=False,editable=False,create=False,details=False,csv=False)\n        extra_information_table = db(db.extra_information_in_design.design_id == design_id).select()\n        db.extra_information_in_design.design_id.default = design_id\n        form = SQLFORM(db.extra_information_in_design,buttons=[TAG.button("Add these details",_type="submit"),TAG.button("Done",_type="button",_onClick="confirm_button()")])\n        if form.process().accepted:\n            response.flash=\'Form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted extra_information name: \' + form.vars.name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            redirect(URL(\'add_extra_information_in_design\', args=design_id))\n        elif form.errors:\n            response.flash=\'Form has errors\'\n        else:\n            response.flash=\'Please fill the form\'\n        return dict(grid = grid,design_id = design_id,form = form,extra_information_table = extra_information_table)#,names = names)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n#------------------------------------------- REMOVE DESIGN -----------------------------------------#\n@auth.requires_login()\ndef remove_design():\n    if auth.user.IS_ADMIN:\n        design_table = db(db.design.id > 0).select()\n        return dict(design_table = design_table)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef remove_design_helper():\n    if auth.user.IS_ADMIN:\n        design_list = []\n        for var in request.vars:\n            try:\n                design_list.append(int(var))\n            except:\n                pass\n        new_design_list = db((db.design.id >= 0) & (db.design.id.belongs(design_list))).select()\n        for design in new_design_list:\n\n            #Deleting associated values\n            design_parameters_list = db(db.design_parameters.design_id == design.id).select()\n            for parameter in design_parameters_list:\n                parameter.delete_record()\n\n            profile_list = db(db.profile_used_in_design.design_id == design.id).select()\n            for profile in profile_list:\n                profile.delete_record()\n\n            reinforcement_list = db(db.reinforcement_used_in_design.design_id == design.id).select()\n            for reinforcement in reinforcement_list:\n                reinforcement.delete_record()\n\n            hardware_list = db(db.hardware_and_accessories_used_in_design.design_id == design.id).select()\n            for hardware in hardware_list:\n                profile.delete_record()\n\n            glass_list = db(db.glass_used_in_design.design_id == design.id).select()\n            for glass in glass_list:\n                glass.delete_record()\n\n            material_list = db(db.installation_material_used_in_design.design_id == design.id).select()\n            for material in material_list:\n                material.delete_record()\n\n            extra_information_list = db(db.extra_information_in_design.design_id == design.id).select()\n            for info in extra_information_list:\n                info.delete_record()\n\n            #Deleting Quotation related entries for design\n            quotation_product_list = db(db.product_in_quotation.design_id == design.id).select()\n            for product in quotation_product_list:\n\n                product_quotation_parameter_values_list = db(db.product_quotation_parameter_values.product_in_quotation_id == product.id).select()\n                for parameter in product_quotation_parameter_values_list:\n                    parameter.delete_record()\n\n                product_quotation_glass_values_list = db(db.product_quotation_glass_values.product_in_quotation_id == product.id).select()\n                for glass in product_quotation_glass_values_list:\n                    glass.delete_record()\n\n                product_quotation_hardware_values_list = db(db.product_quotation_hardware_values.product_in_quotation_id == product.id).select()\n                for hardware in product_quotation_hardware_values_list:\n                    hardware.delete_record()\n\n                product_quotation_extra_information_values_list = db(db.product_quotation_extra_information_values.product_in_quotation_id == product.id).select()\n                for info in product_quotation_extra_information_values_list:\n                    info.delete_record()\n                product.delete_record()\n\n                parameter_table = db(db.choose_design_parameters.product_in_quotation_id == product.id).select()\n                for i in parameter_table:\n                    i.delete_record()\n                profile_table = db(db.choose_profile.product_in_quotation_id == product.id).select()\n                for i in profile_table:\n                    i.delete_record()\n                reinforcement_table = db(db.choose_reinforcement.product_in_quotation_id == product.id).select()\n                for i in reinforcement_table:\n                    i.delete_record()\n                HAA_table = db(db.choose_hardware.product_in_quotation_id == product.id).select()\n                for i in HAA_table:\n                    i.delete_record()\n                glass_table = db(db.choose_glass.product_in_quotation_id == product.id).select()\n                for i in glass_table:\n                    i.delete_record()\n                material_table = db(db.choose_material.product_in_quotation_id == product.id).select()\n                for i in material_table:\n                    i.delete_record()\n                extra_info_table = db(db.choose_extra.product_in_quotation_id == product.id).select()\n                for i in extra_info_table:\n                    i.delete_record()\n\n            #Deleting Products and associated entries\n            product_list = db(db.product.design_id == design.id).select()\n            for entry in product_list:\n\n                design_parameters_values_list = db(db.design_parameters_values.product_id == entry.id).select()\n                for parameter in design_parameters_values_list:\n                    parameter.delete_record()\n\n                profile_values_list = db(db.profile_values.product_id == entry.id).select()\n                for profile in profile_values_list:\n                    profile.delete_record()\n\n                reinforcement_values_list = db(db.reinforcement_values.product_id == entry.id).select()\n                for reinforcement in reinforcement_values_list:\n                    reinforcement.delete_record()\n\n                hardware_and_accessories_values_list = db(db.hardware_and_accessories_values.product_id == entry.id).select()\n                for hardware in hardware_and_accessories_values_list:\n                    hardware.delete_record()\n\n                glass_values_list = db(db.glass_values.product_id == entry.id).select()\n                for glass in glass_values_list:\n                    glass.delete_record()\n\n                installation_material_values_list = db(db.installation_material_values.product_id == entry.id).select()\n                for material in installation_material_values_list:\n                    material.delete_record()\n\n                extra_information_values_list = db(db.extra_information_values.product_id == entry.id).select()\n                for info in extra_information_values_list:\n                    info.delete_record()\n\n                product_cost_list = db(db.product_cost.product_id == entry.id).select()\n                for cost in product_cost_list:\n                    cost.delete_record()\n                entry.delete_record()\n            design.delete_record()\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' removed design \' + design.name, log_time = datetime.datetime.now())\n        redirect(\'admin_functions.html\')\n        response.flash = \'Success\'\n        return dict()\n    else:\n        response.flash = \'Requires Admin Access\'\n\n#------------------------------------------- VIEW/UPDATE DESIGN -----------------------------------------#\n@auth.requires_login()\ndef view_design():\n    if auth.user.IS_ADMIN:\n        design_id = None\n        if request.vars.entry_id:\n            design_id = request.vars.entry_id\n        else:\n            design_id = request.args(0, cast=int)\n        design_table = db(db.design.id == design_id).select()\n        design_parameters_table = db(db.design_parameters.design_id == design_id).select()\n        profile_table = db(db.profile_used_in_design.design_id == design_id).select()\n        profile_names = db(db.profile_used_in_design.design_id == design_id).select(join = db.profile_used_in_design.on(db.profile.id == db.profile_used_in_design.profile_id))\n        reinforcement_table = db(db.reinforcement_used_in_design.design_id == design_id).select()\n        reinforcement_names = db(db.reinforcement_used_in_design.design_id == design_id).select(join = db.reinforcement_used_in_design.on(db.reinforcement.id == db.reinforcement_used_in_design.reinforcement_id))\n        HAA_table = db(db.hardware_and_accessories_used_in_design.design_id == design_id).select()\n        HAA_names = db(db.hardware_and_accessories_used_in_design.design_id == design_id).select(join = db.hardware_and_accessories_used_in_design.on(db.hardware_and_accessories.id == db.hardware_and_accessories_used_in_design.hardware_and_accessories_id))\n        glass_table = db(db.glass_used_in_design.design_id == design_id).select()\n        glass_names = db(db.glass_used_in_design.design_id == design_id).select(join = db.glass_used_in_design.on(db.glass.id == db.glass_used_in_design.glass_id))\n        material_table = db(db.installation_material_used_in_design.design_id == design_id).select()\n        material_names = db(db.installation_material_used_in_design.design_id == design_id).select(join = db.installation_material_used_in_design.on(db.installation_material.id == db.installation_material_used_in_design.installation_material_id))\n        extra_information_table = db(db.extra_information_in_design.design_id == design_id).select()\n        return dict(design_id = design_id, design_table = design_table, design_parameters_table = design_parameters_table, profile_table = profile_table, profile_names = profile_names, reinforcement_table = reinforcement_table, reinforcement_names = reinforcement_names, HAA_table = HAA_table, HAA_names = HAA_names, glass_table = glass_table, glass_names = glass_names, material_table = material_table, material_names = material_names, extra_information_table = extra_information_table)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef update_design():\n    if auth.user.IS_ADMIN:\n        design_id = request.vars.design_id\n        design = db(db.design.id == design_id).select()\n        form = []\n        for i in design:\n            form = SQLFORM(db.design, i, showid=False)\n        if form.process().accepted:\n            response.flash=\'Form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated design details\' + i.name, log_time = datetime.datetime.now())\n            redirect(URL(\'view_design\', args=design_id))\n        elif form.errors:\n            response.flash=\'Form has errors\'\n        else:\n            response.flash=\'Please update\'\n        return dict(design_id = design_id,form = form)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef update_design_parameters():\n    if auth.user.IS_ADMIN:\n        parameter_id = request.args(0,cast=int)\n        design_parameter = db(db.design_parameters.id == parameter_id).select()\n        form = []\n        design_id = None\n        old_name = \'\'\n        design_name = []\n        for i in design_parameter:\n            form = SQLFORM(db.design_parameters, i, showid=False)\n            design_id = i.design_id\n            old_name = i.name\n            design_name = db(db.design.id == i.design_id).select()\n        if form.process().accepted:\n            """if request.vars.delete_this_record:\n                codename = \'\'\n                for i in design_parameter:\n                    codename = i.codename\n                    codename = int(codename.split(\'P\')[1])\n                    parameters = db(db.design_parameters.design_id == i.design_id).select()\n                    for parameter in parameters:\n                        if int(parameter.codename.split(\'P\')[1]) > codename:\n                            parameter.codename = \'P\' + str(int(parameter.codename.split(\'P\')[1]) - 1)\n                            parameter.update_record()\n                    db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' deleted design parameter \' + i.name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            else:"""\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated design parameter \' + old_name + \' to \' + form.vars.name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            response.flash=\'Form accepted\'\n            redirect(URL(\'view_design\', args=design_id))\n        elif form.errors:\n            response.flash=\'Form has errors\'\n        else:\n            response.flash=\'Please update\'\n        return dict(form = form)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef add_update_design_parameters():\n    if auth.user.IS_ADMIN:\n        design_id = request.args(0,cast=int)\n        db.design_parameters.design_id.default = design_id\n        design_parameter = db(db.design_parameters.design_id == design_id).select()\n        max = 0\n        for parameter in design_parameter:\n            if max < int(parameter.codename.split(\'P\')[1]):\n                max = int(parameter.codename.split(\'P\')[1])\n        db.design_parameters.codename.default = \'P\' + str(max+1)\n        design_name = db(db.design.id == design_id).select()\n        form = SQLFORM(db.design_parameters)\n        if form.process().accepted:\n            response.flash = \'form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted design parameter \' + form.vars.name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            redirect(URL(\'view_design.html\',args=design_id))\n        elif form.errors:\n           response.flash = \'form has errors\'\n        else:\n           response.flash = \'please fill out the form\'\n        return dict(form=form)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef update_profile_detail():\n    if auth.user.IS_ADMIN:\n        profile_detail_id = request.args(0,cast=int)\n        profile_detail = db(db.profile_used_in_design.id == profile_detail_id).select()\n        form = []\n        design_id = None\n        design_name = []\n        profile_name_old = []\n        for i in profile_detail:\n            form = SQLFORM(db.profile_used_in_design, i, showid=False, deletable=True)\n            design_id = i.design_id\n            profile_name_old = db(db.profile.id == i.profile_id).select()\n            design_name = db(db.design.id == i.design_id).select()\n        if form.process().accepted:\n            values = db(db.profile_values.profile_used_in_design_id == profile_detail_id).select()\n            profile_name = db(db.profile.id == form.vars.profile_id).select()\n            if request.vars.delete_this_record:\n                for value in values:\n                    value.delete_record()\n\n                #Reducing Cost\n                product_quotation_table = db(db.product_in_quotation.design_id == design_id).select()\n                for product in product_quotation_table:\n                    parameter_values_table = db(db.product_quotation_parameter_values.product_in_quotation_id == product.id).select(orderby=db.product_quotation_parameter_values.design_parameter_id)\n                    parameter_value = []\n                    for i in parameter_values_table:\n                        parameter_value.append(str(i.parameter_value))\n                    product.profile_cost -= float(Infix(convert(form.vars.cost_calculation,parameter_value)))\n                    profit_margin_table = db(db.profit_margin_table.id == product.profit_margin_id).select()[0]\n                    product.total_value = product.profile_cost + product.reinforcement_cost + product.hardware_and_accessories_cost + product.glass_cost + product.installation_material_cost + product.fabrication_cost + product.installation_cost\n                    product.total_value = product.total_value*product.quantity\n                    product.final_value = product.total_value + product.total_value*(profit_margin_table.percentage/100)\n                    product.total_value_per_piece = product.final_value/product.quantity\n                    product.update_record()\n                db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' deleted profile details name: \' + profile_name[0].name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            else:\n                for value in values:\n                    try:\n                        parameter_values_table = db(db.design_parameters_values.product_id == value.product_id).select(orderby=db.design_parameters_values.design_parameter_id)\n                        parameter_value = []\n                        for i in parameter_values_table:\n                            parameter_value.append(str(i.parameter_value))\n\n                        value.profile_position = form.vars.profile_position\n                        value.cut = form.vars.cut\n                        value.quantity = form.vars.quantity\n                        value.length_value = Infix(convert(form.vars.length_calculation,parameter_value))\n                        value.profile_cost = Infix(convert(form.vars.cost_calculation,parameter_value))\n                        value.update_record()\n                    except:\n                        pass\n                try:\n                    #Updating Cost\n                    product_quotation_table = db(db.product_in_quotation.design_id == design_id).select()\n                    for product in product_quotation_table:\n                        parameter_values_table = db(db.product_quotation_parameter_values.product_in_quotation_id == product.id).select(orderby=db.product_quotation_parameter_values.design_parameter_id)\n                        parameter_value = []\n                        for i in parameter_values_table:\n                            parameter_value.append(str(i.parameter_value))\n                        product.profile_cost -= float(Infix(convert(profile_detail[0].cost_calculation,parameter_value)))\n                        product.profile_cost += float(Infix(convert(form.vars.cost_calculation,parameter_value)))\n                        profit_margin_table = db(db.profit_margin_table.id == product.profit_margin_id).select()[0]\n                        product.total_value = product.profile_cost + product.reinforcement_cost + product.hardware_and_accessories_cost + product.glass_cost + product.installation_material_cost + product.fabrication_cost + product.installation_cost\n                        product.total_value = product.total_value*product.quantity\n                        product.final_value = product.total_value + product.total_value*(profit_margin_table.percentage/100)\n                        product.total_value_per_piece = product.final_value/product.quantity\n                        product.update_record()\n                except:\n                    pass\n                db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated profile details name: \' + profile_name_old[0].name\n                               + \' position: \' + profile_detail[0].profile_position + \' cut: \' + profile_detail[0].cut + \' quantity: \' + str(profile_detail[0].quantity)\n                                + \' length_calculation: \' + profile_detail[0].length_calculation + \' cost_calculation: \' + profile_detail[0].cost_calculation + \' to \' + \'name: \' + profile_name[0].name\n                                + \' position: \' + form.vars.profile_position + \' cut: \' + form.vars.cut + \' quantity: \' + str(form.vars.quantity)\n                                + \' length_calculation: \' + form.vars.length_calculation + \' cost_calculation: \' + form.vars.cost_calculation + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            response.flash=\'Form accepted\'\n            redirect(URL(\'view_design\', args=design_id))\n        elif form.errors:\n            response.flash=\'Form has errors\'\n        else:\n            response.flash=\'Please update\'\n        return dict(form = form)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef add_update_profile_detail():\n    if auth.user.IS_ADMIN:\n        design_id = request.args(0,cast=int)\n        db.profile_used_in_design.design_id.default = design_id\n        design_name = db(db.design.id == design_id).select()\n        form = SQLFORM(db.profile_used_in_design)\n        if form.process().accepted:\n            profile_name = db(db.profile.id == form.vars.profile_id).select()\n            product_table = db(db.product.design_id == design_id).select()\n            product_quotation_table = db(db.product_in_quotation.design_id == design_id).select()\n            for product in product_table:\n                try:\n                    parameter_values_table = db(db.design_parameters_values.product_id == product.id).select(orderby=db.design_parameters_values.design_parameter_id)\n                    parameter_value = []\n                    for i in parameter_values_table:\n                        parameter_value.append(str(i.parameter_value))\n                    profile_position = form.vars.profile_position\n                    cut = form.vars.cut\n                    quantity = form.vars.quantity\n                    length_value = Infix(convert(form.vars.length_calculation,parameter_value))\n                    profile_cost = Infix(convert(form.vars.cost_calculation,parameter_value))\n                    db.profile_values.insert(product_id = product.id, profile_used_in_design_id = form.vars.id, profile_position = profile_position, cut = cut, length_value = length_value, quantity = quantity, profile_cost = profile_cost)\n                except:\n                    pass\n            for product in product_quotation_table:\n                try:\n                    parameter_values_table = db(db.product_quotation_parameter_values.product_in_quotation_id == product.id).select(orderby=db.product_quotation_parameter_values.design_parameter_id)\n                    parameter_value = []\n                    for i in parameter_values_table:\n                        parameter_value.append(str(i.parameter_value))\n\n                    #Increasing Cost\n                    profile_cost = Infix(convert(form.vars.cost_calculation,parameter_value))\n                    product.profile_cost += float(profile_cost)\n                    profit_margin_table = db(db.profit_margin_table.id == product.profit_margin_id).select()[0]\n                    product.total_value = product.profile_cost + product.reinforcement_cost + product.hardware_and_accessories_cost + product.glass_cost + product.installation_material_cost + product.fabrication_cost + product.installation_cost\n                    product.total_value = product.total_value*product.quantity\n                    product.final_value = product.total_value + product.total_value*(profit_margin_table.percentage/100)\n                    product.total_value_per_piece = product.final_value/product.quantity\n                    product.update_record()\n                except:\n                    pass\n            response.flash = \'form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted profile details name: \' + profile_name[0].name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            redirect(URL(\'view_design.html\',args=design_id))\n        elif form.errors:\n           response.flash = \'form has errors\'\n        else:\n           response.flash = \'please fill out the form\'\n        return dict(form=form)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef update_reinforcement_detail():\n    if auth.user.IS_ADMIN:\n        reinforcement_detail_id = request.args(0,cast=int)\n        reinforcement_detail = db(db.reinforcement_used_in_design.id == reinforcement_detail_id).select()\n        form = []\n        design_id = None\n        design_name = []\n        reinforcement_name_old = []\n        for i in reinforcement_detail:\n            form = SQLFORM(db.reinforcement_used_in_design, i, showid=False, deletable=True)\n            design_id = i.design_id\n            reinforcement_name_old = db(db.reinforcement.id == i.reinforcement_id).select()\n            design_name = db(db.design.id == i.design_id).select()\n        if form.process().accepted:\n            values = db(db.reinforcement_values.reinforcement_used_in_design_id == reinforcement_detail_id).select()\n            reinforcement_name = db(db.reinforcement.id == form.vars.reinforcement_id).select()\n            if request.vars.delete_this_record:\n                for value in values:\n                    value.delete_record()\n\n                #Reducing Cost\n                product_quotation_table = db(db.product_in_quotation.design_id == design_id).select()\n                for product in product_quotation_table:\n                    parameter_values_table = db(db.product_quotation_parameter_values.product_in_quotation_id == product.id).select(orderby=db.product_quotation_parameter_values.design_parameter_id)\n                    parameter_value = []\n                    for i in parameter_values_table:\n                        parameter_value.append(str(i.parameter_value))\n                    product.reinforcement_cost -= float(Infix(convert(form.vars.cost_calculation,parameter_value)))\n                    profit_margin_table = db(db.profit_margin_table.id == product.profit_margin_id).select()[0]\n                    product.total_value = product.profile_cost + product.reinforcement_cost + product.hardware_and_accessories_cost + product.glass_cost + product.installation_material_cost + product.fabrication_cost + product.installation_cost\n                    product.total_value = product.total_value*product.quantity\n                    product.final_value = product.total_value + product.total_value*(profit_margin_table.percentage/100)\n                    product.total_value_per_piece = product.final_value/product.quantity\n                    product.update_record()\n                db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' deleted reinforcement details name: \' + reinforcement_name[0].name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            else:\n                for value in values:\n                    try:\n                        parameter_values_table = db(db.design_parameters_values.product_id == value.product_id).select(orderby=db.design_parameters_values.design_parameter_id)\n                        parameter_value = []\n                        for i in parameter_values_table:\n                            parameter_value.append(str(i.parameter_value))\n\n                        value.quantity = form.vars.quantity\n                        value.length_value = Infix(convert(form.vars.length_calculation,parameter_value))\n                        value.reinforcement_cost = Infix(convert(form.vars.cost_calculation,parameter_value))\n                        value.update_record()\n                    except:\n                        pass\n                try:\n                    #Updating Cost\n                    product_quotation_table = db(db.product_in_quotation.design_id == design_id).select()\n                    for product in product_quotation_table:\n                        parameter_values_table = db(db.product_quotation_parameter_values.product_in_quotation_id == product.id).select(orderby=db.product_quotation_parameter_values.design_parameter_id)\n                        parameter_value = []\n                        for i in parameter_values_table:\n                            parameter_value.append(str(i.parameter_value))\n                        product.reinforcement_cost -= float(Infix(convert(reinforcement_detail[0].cost_calculation,parameter_value)))\n                        product.reinforcement_cost += float(Infix(convert(form.vars.cost_calculation,parameter_value)))\n                        profit_margin_table = db(db.profit_margin_table.id == product.profit_margin_id).select()[0]\n                        product.total_value = product.profile_cost + product.reinforcement_cost + product.hardware_and_accessories_cost + product.glass_cost + product.installation_material_cost + product.fabrication_cost + product.installation_cost\n                        product.total_value = product.total_value*product.quantity\n                        product.final_value = product.total_value + product.total_value*(profit_margin_table.percentage/100)\n                        product.total_value_per_piece = product.final_value/product.quantity\n                        product.update_record()\n                except:\n                    pass\n                db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated reinforcement details name: \' + reinforcement_name_old[0].name\n                               + \' quantity: \' + str(reinforcement_detail[0].quantity)\n                                + \' length_calculation: \' + reinforcement_detail[0].length_calculation + \' cost_calculation: \' + reinforcement_detail[0].cost_calculation + \' to \' + \'name: \' + reinforcement_name[0].name\n                                + \' quantity: \' + str(form.vars.quantity)\n                                + \' length_calculation: \' + form.vars.length_calculation + \' cost_calculation: \' + form.vars.cost_calculation + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            response.flash=\'Form accepted\'\n            redirect(URL(\'view_design\', args=design_id))\n        elif form.errors:\n            response.flash=\'Form has errors\'\n        else:\n            response.flash=\'Please update\'\n        return dict(form = form)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef add_update_reinforcement_detail():\n    if auth.user.IS_ADMIN:\n        design_id = request.args(0,cast=int)\n        db.reinforcement_used_in_design.design_id.default = design_id\n        design_name = db(db.design.id == design_id).select()\n        form = SQLFORM(db.reinforcement_used_in_design)\n        if form.process().accepted:\n            reinforcement_name = db(db.reinforcement.id == form.vars.reinforcement_id).select()\n            product_table = db(db.product.design_id == design_id).select()\n            product_quotation_table = db(db.product_in_quotation.design_id == design_id).select()\n            for product in product_table:\n                try:\n                    parameter_values_table = db(db.design_parameters_values.product_id == product.id).select(orderby=db.design_parameters_values.design_parameter_id)\n                    parameter_value = []\n                    for i in parameter_values_table:\n                        parameter_value.append(str(i.parameter_value))\n                    quantity = form.vars.quantity\n                    length_value = Infix(convert(form.vars.length_calculation,parameter_value))\n                    reinforcement_cost = Infix(convert(form.vars.cost_calculation,parameter_value))\n                    db.reinforcement_values.insert(product_id = product.id, reinforcement_used_in_design_id = form.vars.id, length_value = length_value, quantity = quantity, reinforcement_cost = reinforcement_cost)\n                except:\n                    pass\n            for product in product_quotation_table:\n                try:\n                    parameter_values_table = db(db.product_quotation_parameter_values.product_in_quotation_id == product.id).select(orderby=db.product_quotation_parameter_values.design_parameter_id)\n                    parameter_value = []\n                    for i in parameter_values_table:\n                        parameter_value.append(str(i.parameter_value))\n\n                    #Increasing Cost\n                    reinforcement_cost = Infix(convert(form.vars.cost_calculation,parameter_value))\n                    product.reinforcement_cost += float(reinforcement_cost)\n                    profit_margin_table = db(db.profit_margin_table.id == product.profit_margin_id).select()[0]\n                    product.total_value = product.profile_cost + product.reinforcement_cost + product.hardware_and_accessories_cost + product.glass_cost + product.installation_material_cost + product.fabrication_cost + product.installation_cost\n                    product.total_value = product.total_value*product.quantity\n                    product.final_value = product.total_value + product.total_value*(profit_margin_table.percentage/100)\n                    product.total_value_per_piece = product.final_value/product.quantity\n                    product.update_record()\n                except:\n                    pass\n            response.flash = \'form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted reinforcement details name: \' + reinforcement_name[0].name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            redirect(URL(\'view_design.html\',args=design_id))\n        elif form.errors:\n           response.flash = \'form has errors\'\n        else:\n           response.flash = \'please fill out the form\'\n        return dict(form=form)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef update_HAA_detail():\n    if auth.user.IS_ADMIN:\n        HAA_detail_id = request.args(0,cast=int)\n        HAA_detail = db(db.hardware_and_accessories_used_in_design.id == HAA_detail_id).select()\n        form = []\n        design_id = None\n        design_name = []\n        HAA_name_old = []\n        for i in HAA_detail:\n            form = SQLFORM(db.hardware_and_accessories_used_in_design, i, showid=False, deletable=True)\n            design_id = i.design_id\n            HAA_name_old = db(db.hardware_and_accessories.id == i.hardware_and_accessories_id).select()\n            design_name = db(db.design.id == i.design_id).select()\n\n        values2_old = db(db.product_quotation_hardware_values.hardware_and_accessories_used_in_design_id == HAA_detail_id).select()\n        if form.process().accepted:\n            values = db(db.hardware_and_accessories_values.hardware_and_accessories_used_in_design_id == HAA_detail_id).select()\n            values2 = db(db.product_quotation_hardware_values.hardware_and_accessories_used_in_design_id == HAA_detail_id).select()\n            HAA_name = db(db.hardware_and_accessories.id == form.vars.hardware_and_accessories_id).select()\n            if request.vars.delete_this_record:\n                for value in values:\n                    value.delete_record()\n                for value in values2:\n                    value.delete_record()\n                for value in values2_old:\n                    #Reducing Cost\n                    product = db(db.product_in_quotation.id == value.product_in_quotation_id).select()[0]\n                    product.hardware_and_accessories_cost -= float(value.hardware_and_accessories_cost)\n                    profit_margin_table = db(db.profit_margin_table.id == product.profit_margin_id).select()[0]\n                    product.total_value = product.profile_cost + product.reinforcement_cost + product.hardware_and_accessories_cost + product.glass_cost + product.installation_material_cost + product.fabrication_cost + product.installation_cost\n                    product.total_value = product.total_value*product.quantity\n                    product.final_value = product.total_value + product.total_value*(profit_margin_table.percentage/100)\n                    product.total_value_per_piece = product.final_value/product.quantity\n                    product.update_record()\n                db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' deleted hardware details name: \' + HAA_name[0].name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            else:\n                for value in values:\n                    try:\n                        parameter_values_table = db(db.design_parameters_values.product_id == value.product_id).select(orderby=db.design_parameters_values.design_parameter_id)\n                        parameter_value = []\n                        for i in parameter_values_table:\n                            parameter_value.append(str(i.parameter_value))\n\n                        value.quantity = form.vars.quantity\n                        value.hardware_and_accessories_cost = Infix(convert(form.vars.cost_calculation,parameter_value))\n                        value.update_record()\n                    except:\n                        pass\n                for value in values2:\n                    try:\n                        parameter_values_table = db(db.product_quotation_parameter_values.product_in_quotation_id == value.product_in_quotation_id).select(orderby=db.product_quotation_parameter_values.design_parameter_id)\n                        parameter_value = []\n                        for i in parameter_values_table:\n                            parameter_value.append(str(i.parameter_value))\n\n                        value.quantity = form.vars.quantity\n                        old_value = value.hardware_and_accessories_cost\n                        value.hardware_and_accessories_cost = Infix(convert(form.vars.cost_calculation,parameter_value))\n                        value.update_record()\n\n                        #Updating Cost\n                        product = db(db.product_in_quotation.id == value.product_in_quotation_id).select()[0]\n                        product.hardware_and_accessories_cost -= float(old_value)\n                        product.hardware_and_accessories_cost += float(value.hardware_and_accessories_cost)\n                        profit_margin_table = db(db.profit_margin_table.id == product.profit_margin_id).select()[0]\n                        product.total_value = product.profile_cost + product.reinforcement_cost + product.hardware_and_accessories_cost + product.glass_cost + product.installation_material_cost + product.fabrication_cost + product.installation_cost\n                        product.total_value = product.total_value*product.quantity\n                        product.final_value = product.total_value + product.total_value*(profit_margin_table.percentage/100)\n                        product.total_value_per_piece = product.final_value/product.quantity\n                        product.update_record()\n                    except:\n                        pass\n                db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated hardware details name: \' + HAA_name_old[0].name\n                               + \' quantity: \' + str(HAA_detail[0].quantity)\n                                + \' cost_calculation: \' + HAA_detail[0].cost_calculation + \' to \' + \'name: \' + HAA_name[0].name\n                                + \' quantity: \' + str(form.vars.quantity)\n                                + \' cost_calculation: \' + form.vars.cost_calculation + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            response.flash=\'Form accepted\'\n            redirect(URL(\'view_design\', args=design_id))\n        elif form.errors:\n            response.flash=\'Form has errors\'\n        else:\n            response.flash=\'Please update\'\n        return dict(form = form)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef add_update_HAA_detail():\n    if auth.user.IS_ADMIN:\n        design_id = request.args(0,cast=int)\n        db.hardware_and_accessories_used_in_design.design_id.default = design_id\n        design_name = db(db.design.id == design_id).select()\n        form = SQLFORM(db.hardware_and_accessories_used_in_design)\n        if form.process().accepted:\n            HAA_name = db(db.hardware_and_accessories.id == form.vars.hardware_and_accessories_id).select()\n            product_table = db(db.product.design_id == design_id).select()\n            product_quotation_table = db(db.product_in_quotation.design_id == design_id).select()\n            for product in product_table:\n                try:\n                    parameter_values_table = db(db.design_parameters_values.product_id == product.id).select(orderby=db.design_parameters_values.design_parameter_id)\n                    parameter_value = []\n                    for i in parameter_values_table:\n                        parameter_value.append(str(i.parameter_value))\n                    quantity = form.vars.quantity\n                    hardware_and_accessories_cost = Infix(convert(form.vars.cost_calculation,parameter_value))\n                    db.hardware_and_accessories_values.insert(product_id = product.id, hardware_and_accessories_used_in_design_id = form.vars.id, quantity = quantity, hardware_and_accessories_cost = hardware_and_accessories_cost)\n                except:\n                    pass\n            for product in product_quotation_table:\n                try:\n                    parameter_values_table = db(db.product_quotation_parameter_values.product_in_quotation_id == product.id).select(orderby=db.product_quotation_parameter_values.design_parameter_id)\n                    parameter_value = []\n                    for i in parameter_values_table:\n                        parameter_value.append(str(i.parameter_value))\n\n                    quantity = form.vars.quantity\n                    hardware_and_accessories_cost = Infix(convert(form.vars.cost_calculation,parameter_value))\n                    db.product_quotation_hardware_values.insert(product_in_quotation_id = product.id, hardware_and_accessories_used_in_design_id = form.vars.id, quantity = quantity, hardware_and_accessories_cost = hardware_and_accessories_cost)\n\n                    #Increasing Cost\n                    product.hardware_and_accessories_cost += float(hardware_and_accessories_cost)\n                    profit_margin_table = db(db.profit_margin_table.id == product.profit_margin_id).select()[0]\n                    product.total_value = product.profile_cost + product.reinforcement_cost + product.hardware_and_accessories_cost + product.glass_cost + product.installation_material_cost + product.fabrication_cost + product.installation_cost\n                    product.total_value = product.total_value*product.quantity\n                    product.final_value = product.total_value + product.total_value*(profit_margin_table.percentage/100)\n                    product.total_value_per_piece = product.final_value/product.quantity\n                    product.update_record()\n                except:\n                    pass\n            response.flash = \'form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted hardware details name: \' + HAA_name[0].name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            redirect(URL(\'view_design.html\',args=design_id))\n        elif form.errors:\n           response.flash = \'form has errors\'\n        else:\n           response.flash = \'please fill out the form\'\n        return dict(form=form)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef update_glass_detail():\n    if auth.user.IS_ADMIN:\n        glass_detail_id = request.args(0,cast=int)\n        glass_detail = db(db.glass_used_in_design.id == glass_detail_id).select()\n        form = []\n        design_id = None\n        design_name = []\n        glass_name_old = []\n        for i in glass_detail:\n            form = SQLFORM(db.glass_used_in_design, i, showid=False, deletable=True)\n            design_id = i.design_id\n            glass_name_old = db(db.glass.id == i.glass_id).select()\n            design_name = db(db.design.id == i.design_id).select()\n        values2_old = db(db.product_quotation_glass_values.glass_used_in_design_id == glass_detail_id).select()\n        if form.process().accepted:\n            values = db(db.glass_values.glass_used_in_design_id == glass_detail_id).select()\n            values2 = db(db.product_quotation_glass_values.glass_used_in_design_id == glass_detail_id).select()\n            glass_name = db(db.glass.id == form.vars.glass_id).select()\n            if request.vars.delete_this_record:\n                for value in values:\n                    value.delete_record()\n                for value in values2:\n                    value.delete_record()\n                for value in values2_old:\n                    #Reducing Cost\n                    product = db(db.product_in_quotation.id == value.product_in_quotation_id).select()[0]\n                    product.glass_cost -= float(value.glass_cost)\n                    profit_margin_table = db(db.profit_margin_table.id == product.profit_margin_id).select()[0]\n                    product.total_value = product.profile_cost + product.reinforcement_cost + product.hardware_and_accessories_cost + product.glass_cost + product.installation_material_cost + product.fabrication_cost + product.installation_cost\n                    product.total_value = product.total_value*product.quantity\n                    product.final_value = product.total_value + product.total_value*(profit_margin_table.percentage/100)\n                    product.total_value_per_piece = product.final_value/product.quantity\n                    product.update_record()\n                    value.delete_record()\n                db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' deleted glass details name: \' + glass_name[0].name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            else:\n                for value in values:\n                    try:\n                        parameter_values_table = db(db.design_parameters_values.product_id == value.product_id).select(orderby=db.design_parameters_values.design_parameter_id)\n                        parameter_value = []\n                        for i in parameter_values_table:\n                            parameter_value.append(str(i.parameter_value))\n\n                        value.width = Infix(convert(form.vars.width_calculation,parameter_value))\n                        value.height = Infix(convert(form.vars.height_calculation,parameter_value))\n                        value.quantity = form.vars.quantity\n                        value.glass_cost = Infix(convert(form.vars.cost_calculation,parameter_value))\n                        value.update_record()\n                    except:\n                        pass\n                for value in values2:\n                    try:\n                        parameter_values_table = db(db.product_quotation_parameter_values.product_in_quotation_id == value.product_in_quotation_id).select(orderby=db.product_quotation_parameter_values.design_parameter_id)\n                        parameter_value = []\n                        for i in parameter_values_table:\n                            parameter_value.append(str(i.parameter_value))\n\n                        value.width = Infix(convert(form.vars.width_calculation,parameter_value))\n                        value.height = Infix(convert(form.vars.height_calculation,parameter_value))\n                        value.quantity = form.vars.quantity\n                        old_value = value.glass_cost\n                        value.glass_cost = Infix(convert(form.vars.cost_calculation,parameter_value))\n                        value.update_record()\n\n                        #Updating Cost\n                        product = db(db.product_in_quotation.id == value.product_in_quotation_id).select()[0]\n                        product.glass_cost -= old_value\n                        product.glass_cost += float(value.glass_cost)\n                        profit_margin_table = db(db.profit_margin_table.id == product.profit_margin_id).select()[0]\n                        product.total_value = product.profile_cost + product.reinforcement_cost + product.hardware_and_accessories_cost + product.glass_cost + product.installation_material_cost + product.fabrication_cost + product.installation_cost\n                        product.total_value = product.total_value*product.quantity\n                        product.final_value = product.total_value + product.total_value*(profit_margin_table.percentage/100)\n                        product.total_value_per_piece = product.final_value/product.quantity\n                        product.update_record()\n                    except:\n                        pass\n                db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated glass details name: \' + glass_name_old[0].name\n                               + \' width_calculation: \' + str(glass_detail[0].width_calculation) + \' height_calculation: \' + str(glass_detail[0].height_calculation) + \' quantity: \' + str(glass_detail[0].quantity)\n                                + \' cost_calculation: \' + glass_detail[0].cost_calculation + \' to \' + \'name: \' + glass_name[0].name\n                                + \' width_calculation: \' + str(form.vars.width_calculation) + \' height_calculation: \' + str(form.vars.height_calculation) + \' quantity: \' + str(form.vars.quantity)\n                                + \' cost_calculation: \' + form.vars.cost_calculation + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            response.flash=\'Form accepted\'\n            redirect(URL(\'view_design\', args=design_id))\n        elif form.errors:\n            response.flash=\'Form has errors\'\n        else:\n            response.flash=\'Please update\'\n        return dict(form = form)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef add_update_glass_detail():\n    if auth.user.IS_ADMIN:\n        design_id = request.args(0,cast=int)\n        db.glass_used_in_design.design_id.default = design_id\n        design_name = db(db.design.id == design_id).select()\n        form = SQLFORM(db.glass_used_in_design)\n        if form.process().accepted:\n            glass_name = db(db.glass.id == form.vars.glass_id).select()\n            product_table = db(db.product.design_id == design_id).select()\n            product_quotation_table = db(db.product_in_quotation.design_id == design_id).select()\n            for product in product_table:\n                try:\n                    parameter_values_table = db(db.design_parameters_values.product_id == product.id).select(orderby=db.design_parameters_values.design_parameter_id)\n                    parameter_value = []\n                    for i in parameter_values_table:\n                        parameter_value.append(str(i.parameter_value))\n\n                    width = Infix(convert(form.vars.width_calculation,parameter_value))\n                    height = Infix(convert(form.vars.height_calculation,parameter_value))\n                    quantity = form.vars.quantity\n                    glass_cost = Infix(convert(form.vars.cost_calculation,parameter_value))\n                    db.glass_values.insert(product_id = product.id, glass_used_in_design_id = form.vars.id, width = width, height = height, quantity = quantity, glass_cost = glass_cost)\n                except:\n                    pass\n            for product in product_quotation_table:\n                try:\n                    parameter_values_table = db(db.product_quotation_parameter_values.product_in_quotation_id == product.id).select(orderby=db.product_quotation_parameter_values.design_parameter_id)\n                    parameter_value = []\n                    for i in parameter_values_table:\n                        parameter_value.append(str(i.parameter_value))\n\n                    width = Infix(convert(form.vars.width_calculation,parameter_value))\n                    height = Infix(convert(form.vars.height_calculation,parameter_value))\n                    quantity = form.vars.quantity\n                    glass_cost = Infix(convert(form.vars.cost_calculation,parameter_value))\n                    db.product_quotation_glass_values.insert(product_in_quotation_id = product.id, glass_used_in_design_id = form.vars.id, width = width, height = height, quantity = quantity, glass_cost = glass_cost)\n\n                    #Increasing Cost\n                    product.glass_cost += float(glass_cost)\n                    profit_margin_table = db(db.profit_margin_table.id == product.profit_margin_id).select()[0]\n                    product.total_value = product.profile_cost + product.reinforcement_cost + product.hardware_and_accessories_cost + product.glass_cost + product.installation_material_cost + product.fabrication_cost + product.installation_cost\n                    product.total_value = product.total_value*product.quantity\n                    product.final_value = product.total_value + product.total_value*(profit_margin_table.percentage/100)\n                    product.total_value_per_piece = product.final_value/product.quantity\n                    product.update_record()\n                except:\n                    pass\n            response.flash = \'form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted glass details name: \' + glass_name[0].name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            redirect(URL(\'view_design.html\',args=design_id))\n        elif form.errors:\n           response.flash = \'form has errors\'\n        else:\n           response.flash = \'please fill out the form\'\n        return dict(form=form)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef update_material_detail():\n    if auth.user.IS_ADMIN:\n        material_detail_id = request.args(0,cast=int)\n        material_detail = db(db.installation_material_used_in_design.id == material_detail_id).select()\n        form = []\n        design_id = None\n        design_name = []\n        material_name_old = []\n        for i in material_detail:\n            form = SQLFORM(db.installation_material_used_in_design, i, showid=False, deletable=True)\n            design_id = i.design_id\n            material_name_old = db(db.installation_material.id == i.installation_material_id).select()\n            design_name = db(db.design.id == i.design_id).select()\n        if form.process().accepted:\n            values = db(db.installation_material_values.installation_material_used_in_design_id == material_detail_id).select()\n            material_name = db(db.installation_material.id == form.vars.installation_material_id).select()\n            if request.vars.delete_this_record:\n                for value in values:\n                    value.delete_record()\n\n                #Reducing Cost\n                product_quotation_table = db(db.product_in_quotation.design_id == design_id).select()\n                for product in product_quotation_table:\n                    parameter_values_table = db(db.product_quotation_parameter_values.product_in_quotation_id == product.id).select(orderby=db.product_quotation_parameter_values.design_parameter_id)\n                    parameter_value = []\n                    for i in parameter_values_table:\n                        parameter_value.append(str(i.parameter_value))\n                    product.installation_material_used_in_design_id -= float(Infix(convert(form.vars.cost_calculation,parameter_value)))\n                    profit_margin_table = db(db.profit_margin_table.id == product.profit_margin_id).select()[0]\n                    product.total_value = product.profile_cost + product.reinforcement_cost + product.hardware_and_accessories_cost + product.glass_cost + product.installation_material_cost + product.fabrication_cost + product.installation_cost\n                    product.total_value = product.total_value*product.quantity\n                    product.final_value = product.total_value + product.total_value*(profit_margin_table.percentage/100)\n                    product.total_value_per_piece = product.final_value/product.quantity\n                    product.update_record()\n                db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' deleted installation material details name: \' + material_name[0].name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            else:\n                for value in values:\n                    try:\n                        parameter_values_table = db(db.design_parameters_values.product_id == value.product_id).select(orderby=db.design_parameters_values.design_parameter_id)\n                        parameter_value = []\n                        for i in parameter_values_table:\n                            parameter_value.append(str(i.parameter_value))\n\n                        value.quantity = form.vars.quantity\n                        value.installation_material_cost = Infix(convert(form.vars.cost_calculation,parameter_value))\n                        value.update_record()\n                    except:\n                        pass\n                try:\n                    #Updating Cost\n                    product_quotation_table = db(db.product_in_quotation.design_id == design_id).select()\n                    for product in product_quotation_table:\n                        parameter_values_table = db(db.product_quotation_parameter_values.product_in_quotation_id == product.id).select(orderby=db.product_quotation_parameter_values.design_parameter_id)\n                        parameter_value = []\n                        for i in parameter_values_table:\n                            parameter_value.append(str(i.parameter_value))\n                        product.installation_material_cost -= float(Infix(convert(material_detail[0].cost_calculation,parameter_value)))\n                        product.installation_material_cost += float(Infix(convert(form.vars.cost_calculation,parameter_value)))\n                        profit_margin_table = db(db.profit_margin_table.id == product.profit_margin_id).select()[0]\n                        product.total_value = product.profile_cost + product.reinforcement_cost + product.hardware_and_accessories_cost + product.glass_cost + product.installation_material_cost + product.fabrication_cost + product.installation_cost\n                        product.total_value = product.total_value*product.quantity\n                        product.final_value = product.total_value + product.total_value*(profit_margin_table.percentage/100)\n                        product.total_value_per_piece = product.final_value/product.quantity\n                        product.update_record()\n                except:\n                    pass\n                db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated installation material details name: \' + material_name_old[0].name\n                               + \' quantity: \' + str(material_detail[0].quantity)\n                                + \' cost_calculation: \' + material_detail[0].cost_calculation + \' to \' + \'name: \' + material_name[0].name\n                                + \' quantity: \' + str(form.vars.quantity)\n                                + \' cost_calculation: \' + form.vars.cost_calculation + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            response.flash=\'Form accepted\'\n            redirect(URL(\'view_design\', args=design_id))\n        elif form.errors:\n            response.flash=\'Form has errors\'\n        else:\n            response.flash=\'Please update\'\n        return dict(form = form)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef add_update_material_detail():\n    if auth.user.IS_ADMIN:\n        design_id = request.args(0,cast=int)\n        db.installation_material_used_in_design.design_id.default = design_id\n        design_name = db(db.design.id == design_id).select()\n        form = SQLFORM(db.installation_material_used_in_design)\n        if form.process().accepted:\n            material_name = db(db.installation_material.id == form.vars.installation_material_id).select()\n            product_table = db(db.product.design_id == design_id).select()\n            product_quotation_table = db(db.product_in_quotation.design_id == design_id).select()\n            for product in product_table:\n                try:\n                    parameter_values_table = db(db.design_parameters_values.product_id == product.id).select(orderby=db.design_parameters_values.design_parameter_id)\n                    parameter_value = []\n                    for i in parameter_values_table:\n                        parameter_value.append(str(i.parameter_value))\n                    quantity = form.vars.quantity\n                    installation_material_cost = Infix(convert(form.vars.cost_calculation,parameter_value))\n                    db.installation_material_values.insert(product_id = product.id, installation_material_used_in_design_id = form.vars.id, quantity = quantity, installation_material_cost = installation_material_cost)\n                except:\n                    pass\n            for product in product_quotation_table:\n                try:\n                    parameter_values_table = db(db.product_quotation_parameter_values.product_in_quotation_id == product.id).select(orderby=db.product_quotation_parameter_values.design_parameter_id)\n                    parameter_value = []\n                    for i in parameter_values_table:\n                        parameter_value.append(str(i.parameter_value))\n\n                    #Increasing Cost\n                    installation_material_cost = Infix(convert(form.vars.cost_calculation,parameter_value))\n                    product.installation_material_cost += float(installation_material_cost)\n                    profit_margin_table = db(db.profit_margin_table.id == product.profit_margin_id).select()[0]\n                    product.total_value = product.profile_cost + product.reinforcement_cost + product.hardware_and_accessories_cost + product.glass_cost + product.installation_material_cost + product.fabrication_cost + product.installation_cost\n                    product.total_value = product.total_value*product.quantity\n                    product.final_value = product.total_value + product.total_value*(profit_margin_table.percentage/100)\n                    product.total_value_per_piece = product.final_value/product.quantity\n                    product.update_record()\n                except:\n                    pass\n            response.flash = \'form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted installation material details name: \' + material_name[0].name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            redirect(URL(\'view_design.html\',args=design_id))\n        elif form.errors:\n           response.flash = \'form has errors\'\n        else:\n           response.flash = \'please fill out the form\'\n        return dict(form=form)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef update_extra_information():\n    if auth.user.IS_ADMIN:\n        extra_information_detail_id = request.args(0,cast=int)\n        extra_information_detail = db(db.extra_information_in_design.id == extra_information_detail_id).select()\n        form = []\n        design_id = None\n        design_name = []\n        for i in extra_information_detail:\n            form = SQLFORM(db.extra_information_in_design, i, showid=False, deletable=True)\n            design_id = i.design_id\n            design_name = db(db.design.id == i.design_id).select()\n        if form.process().accepted:\n            values = db(db.extra_information_values.extra_information_in_design_id == extra_information_detail_id).select()\n            values2 = db(db.product_quotation_extra_information_values.extra_information_in_design_id == extra_information_detail_id).select()\n            if request.vars.delete_this_record:\n                for value in values:\n                    value.delete_record()\n                for value in values2:\n                    value.delete_record()\n                    db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' deleted extra information name: \' + extra_information_detail[0].name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            else:\n                for value in values:\n                    try:\n                        parameter_values_table = db(db.product_quotation_parameter_values.product_in_quotation_id == value.product_in_quotation_id).select(orderby=db.product_quotation_parameter_values.design_parameter_id)\n                        parameter_value = []\n                        for i in parameter_values_table:\n                            parameter_value.append(str(i.parameter_value))\n\n                        if form.vars.default_value:\n                            value.default_value = form.vars.default_value\n                        elif form.vars.calculation:\n                            value.extra_information_value = Infix(convert(form.vars.calculation,parameter_value))\n                        value.update_record()\n                    except:\n                        pass\n                for value in values2:\n                    try:\n                        parameter_values_table = db(db.product_quotation_parameter_values.product_in_quotation_id == value.product_in_quotation_id).select(orderby=db.product_quotation_parameter_values.design_parameter_id)\n                        parameter_value = []\n                        for i in parameter_values_table:\n                            parameter_value.append(str(i.parameter_value))\n\n                        if form.vars.default_value:\n                            value.default_value = form.vars.default_value\n                        elif form.vars.calculation:\n                            value.extra_information_value = Infix(convert(form.vars.calculation,parameter_value))\n                        value.update_record()\n                    except:\n                        pass\n                db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated extra_information name: \' + extra_information_detail[0].name\n                               + \' default value: \' + str(extra_information_detail[0].default_value)\n                                + \' calculation: \' + extra_information_detail[0].calculation + \' to \' + \'name: \' + form.vars.name\n                                + \' default_value: \' + str(form.vars.default_value)\n                                + \' calculation: \' + form.vars.calculation + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            response.flash=\'Form accepted\'\n            redirect(URL(\'view_design\', args=design_id))\n        elif form.errors:\n            response.flash=\'Form has errors\'\n        else:\n            response.flash=\'Please update\'\n        return dict(form = form)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef add_update_extra_information():\n    if auth.user.IS_ADMIN:\n        design_id = request.args(0,cast=int)\n        db.extra_information_in_design.design_id.default = design_id\n        design_name = db(db.design.id == design_id).select()\n        form = SQLFORM(db.extra_information_in_design)\n        if form.process().accepted:\n            response.flash = \'form accepted\'\n            product_table = db(db.product.design_id == design_id).select()\n            product_quotation_table = db(db.product_in_quotation.design_id == design_id).select()\n            for product in product_table:\n                try:\n                    parameter_values_table = db(db.design_parameters_values.product_id == product.id).select(orderby=db.design_parameters_values.design_parameter_id)\n                    parameter_value = []\n                    for i in parameter_values_table:\n                        parameter_value.append(str(i.parameter_value))\n\n                    default_value = None\n                    extra_information_value = None\n                    if form.vars.default_value != None and form.vars.default_value != \'\':\n                        default_value = form.vars.default_value\n                    elif form.vars.calculation != None and form.vars.calculation != \'\':\n                        extra_information_value = Infix(convert(form.vars.calculation,parameter_value))\n                    db.extra_information_values.insert(product_id = product.id, extra_information_in_design_id = form.vars.id, default_value = default_value, extra_information_value = extra_information_value)\n                except:\n                    pass\n            for product in product_quotation_table:\n                try:\n                    parameter_values_table = db(db.product_quotation_parameter_values.product_in_quotation_id == product.id).select(orderby=db.product_quotation_parameter_values.design_parameter_id)\n                    parameter_value = []\n                    for i in parameter_values_table:\n                        parameter_value.append(str(i.parameter_value))\n\n                    default_value = None\n                    extra_information_value = None\n                    if form.vars.default_value != None and form.vars.default_value != \'\':\n                        default_value = form.vars.default_value\n                    elif form.vars.calculation != None and form.vars.calculation != \'\':\n                        extra_information_value = Infix(convert(form.vars.calculation,parameter_value))\n                    db.product_quotation_extra_information_values.insert(product_in_quotation_id = product.id, extra_information_in_design_id = form.vars.id, default_value = default_value, extra_information_value = extra_information_value)\n                except:\n                    pass\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted extra_information name: \' + form.vars.name + \' in design \' + design_name[0].name, log_time = datetime.datetime.now())\n            redirect(URL(\'view_design.html\',args=design_id))\n        elif form.errors:\n           response.flash = \'form has errors\'\n        else:\n           response.flash = \'please fill out the form\'\n        return dict(form=form)\n    else:\n        response.flash = \'Requires Admin Access\'\n\n#------------------------------------------- COPY DESIGN -----------------------------------------#\n@auth.requires_login()\ndef copy_design_details():\n    design_id = request.vars.design_id\n    design = db(db.design.id == design_id).select()[0]\n    return dict(design_id = design_id, design = design)\n\n@auth.requires_login()\ndef copy_design():\n    design_id = request.vars.design_id\n    name = request.vars.new_design_name\n    design = db(db.design.id == design_id).select()[0]\n\n    parameter = db(db.design_parameters.design_id == design_id).select()\n    profile = db(db.profile_used_in_design.design_id == design_id).select()\n    reinforcement = db(db.reinforcement_used_in_design.design_id == design_id).select()\n    HAA = db(db.hardware_and_accessories_used_in_design.design_id == design_id).select()\n    glass = db(db.glass_used_in_design.design_id == design_id).select()\n    material = db(db.installation_material_used_in_design.design_id == design_id).select()\n    extra_info = db(db.extra_information_in_design.design_id == design_id).select()\n\n    #Copying Values\n    new_id = db.design.insert(name = name, description = design.description, design_image = design.design_image)\n\n    for entry in parameter:\n        db.design_parameters.insert(design_id = new_id, name = entry.name, codename = entry.codename)\n    for entry in profile:\n        db.profile_used_in_design.insert(design_id = new_id, profile_id = entry.profile_id, profile_position = entry.profile_position,\n                                 cut = entry.cut, length_calculation = entry.length_calculation, quantity = entry.quantity, cost_calculation = entry.cost_calculation)\n    for entry in reinforcement:\n        db.reinforcement_used_in_design.insert(design_id = new_id, reinforcement_id = entry.reinforcement_id, length_calculation = entry.length_calculation, quantity = entry.quantity, cost_calculation = entry.cost_calculation)\n    for entry in HAA:\n        db.hardware_and_accessories_used_in_design.insert(design_id = new_id, hardware_and_accessories_id = entry.hardware_and_accessories_id, quantity = entry.quantity, cost_calculation = entry.cost_calculation)\n    for entry in glass:\n        db.glass_used_in_design.insert(design_id = new_id, glass_id = entry.glass_id, width_calculation = entry.width_calculation, height_calculation = entry.height_calculation, quantity = entry.quantity, cost_calculation = entry.cost_calculation)\n    for entry in material:\n        db.installation_material_used_in_design.insert(design_id = new_id, installation_material_id = entry.installation_material_id, quantity = entry.quantity, cost_calculation = entry.cost_calculation)\n    for entry in extra_info:\n        db.extra_information_in_design.insert(design_id = new_id, name = entry.name, default_value = entry.default_value, calculation = entry.calculation)\n\n    redirect(URL(\'admin_functions.html\'))\n    return dict()\n\n#endregion\n\n#region Others\n#-------------------------------------------- GIVE APPROVAL/VIEW LOGS -----------------------------------------#\n@auth.requires_login()\ndef give_approval():\n    if auth.user.IS_ADMIN:\n        user_table = db((db.auth_user.id >= 0) & (db.auth_user.registration_key != \'\')).select()\n        return dict(user_table = user_table)\n    else:\n        response.flash = \'Requires Admin Access\'\n@auth.requires_login()\ndef give_approval_helper():\n    if auth.user.IS_ADMIN:\n        approved = []\n        for var in request.vars:\n            try:\n                approved.append(int(var))\n            except:\n                pass\n        approving_users = db((db.auth_user. id >= 0) & (db.auth_user.id.belongs(approved))).select()\n        for user in approving_users:\n            user.registration_key = \'\'\n            user.update_record()\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' gave approval to \' + user.first_name + \' \' + user.last_name, log_time = datetime.datetime.now())\n        response.flash = \'Success\'\n        redirect(\'admin_functions.html\')\n        return dict()\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef get_logtime():\n    if auth.user.IS_ADMIN:\n        return dict()\n    else:\n        response.flash = \'Requires Admin Access\'\n\n@auth.requires_login()\ndef view_logs():\n    if auth.user.IS_ADMIN:\n        time = request.vars.time\n        from_time = request.vars.from_time\n        to_time = request.vars.to_time\n        month = 365/12\n        log_table = db(db.logs.id >= 0).select(orderby=~db.logs.log_time)\n        if time == \'1\':\n            log_table = db((db.logs.id >= 0) & (db.logs.log_time >= datetime.date.today() - datetime.timedelta(days=1))).select(orderby=~db.logs.log_time)\n        elif time == \'3\':\n            log_table = db((db.logs.id >= 0) & (db.logs.log_time >= datetime.date.today() - datetime.timedelta(days=3))).select(orderby=~db.logs.log_time)\n        elif time == \'7\':\n            log_table = db((db.logs.id >= 0) & (db.logs.log_time >= datetime.date.today() - datetime.timedelta(days=7))).select(orderby=~db.logs.log_time)\n        elif time == \'14\':\n            log_table = db((db.logs.id >= 0) & (db.logs.log_time >= datetime.date.today() - datetime.timedelta(days=14))).select(orderby=~db.logs.log_time)\n        elif time == \'30\':\n            log_table = db((db.logs.id >= 0) & (db.logs.log_time >= datetime.date.today().replace(month = datetime.date.today().month - 1))).select(orderby=~db.logs.log_time)\n        elif time == \'90\':\n            log_table = db((db.logs.id >= 0) & (db.logs.log_time >= datetime.date.today().replace(month = datetime.date.today().month - 3))).select(orderby=~db.logs.log_time)\n        elif time == \'180\':\n            log_table = db((db.logs.id >= 0) & (db.logs.log_time >= datetime.date.today().replace(month = datetime.date.today().month - 6))).select(orderby=~db.logs.log_time)\n        elif time == \'365\':\n            log_table = db((db.logs.id >= 0) & (db.logs.log_time >= datetime.date.today().replace(year = datetime.date.today().year - 1))).select(orderby=~db.logs.log_time)\n        elif time == \'picked\':\n            from_time = datetime.datetime.strptime(from_time,\'%Y-%m-%d\').date()\n            to_time = datetime.datetime.strptime(to_time,\'%Y-%m-%d\').date()\n            to_time = to_time.replace(day = to_time.day + 1)\n            log_table = db((db.logs.id >= 0) & (db.logs.log_time >= from_time) & (db.logs.log_time <= to_time)).select(orderby=~db.logs.log_time)\n        return dict(log_table = log_table)\n    else:\n        response.flash = \'Requires Admin Access\'\n#endregion\n\n#endregion\n\n#region Inventory Management\n#############################################################################################################\n#---------------------------------------- INVENTORY MANAGEMENT ---------------------------------------------#\n#############################################################################################################\n@auth.requires_login()\ndef inventory_management():\n    profile_table = db(db.profile.id >= 0).select()\n    reinforcement_table = db(db.reinforcement.id >= 0).select()\n    HAA_table = db(db.hardware_and_accessories.id >= 0).select()\n    glass_table = db(db.glass.id >= 0).select()\n    material_table = db(db.installation_material.id >= 0).select()\n    return dict(profile_table = profile_table,reinforcement_table = reinforcement_table,\n                HAA_table = HAA_table, glass_table = glass_table, material_table = material_table)\n\n#region Profile\n#---------------------------------------- ADD/DELETE/UPDATE PROFILE ---------------------------------------------#\n@auth.requires_login()\ndef add_profile_entry():\n    form = SQLFORM(db.profile)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted profile entry \' + form.vars.name + \' ---- \' + form.vars.quantity, log_time = datetime.datetime.now())\n        redirect(URL(\'inventory_management.html\'))\n    elif form.errors:\n       response.flash = \'form has errors\'\n    else:\n       response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef update_profile_entry():\n    entry_id = request.vars.entry_id\n    l = db(db.profile.id == entry_id).select()\n    form = []\n    for i in l:\n        old_name = i.name\n        old_code = i.profile_code\n        old_weight = i.weight\n        old_length = i.profile_length\n        old_number = i.number_of_pieces\n        old_price = i.price\n        old_quantity = i.quantity\n        form = SQLFORM(db.profile, i, deletable=True)\n        if form.process().accepted:\n            response.flash = \'form accepted\'\n            db.logs.insert(\n                log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated profile entry name: \' + old_name + \' code: \' +\n                            str(old_code) + \' weight: \' + str(old_weight) + \' length: \' + str(old_length) + \' number of pieces: \' + str(old_number) +\n                            \' price: \' + str(old_price) + \' quantity: \' + str(old_quantity) +\n                            \' to \' + form.vars.name + \' \' + str(form.vars.profile_code) + \' \' + str(form.vars.weight) + \' \' + str(form.vars.profile_length)\n                + \' \' + str(form.vars.number_of_pieces) + \' \' + str(form.vars.price) + \' \' + str(form.vars.quantity),log_time=datetime.datetime.now())\n            redirect(URL(\'inventory_management.html\'))\n        elif form.errors:\n            response.flash = \'form has errors\'\n        else:\n            response.flash = \'please update\'\n    return dict(form=form)\n@auth.requires_login()\ndef update_profile_helper():\n    entry_id = request.vars.entry_id\n    quantity = request.vars.quantity\n    row=db.profile(db.profile.id==entry_id)\n    old_quantity=row.quantity\n    if request.vars.Add:\n        row.quantity=int(row.quantity)+int(quantity)\n    elif request.vars.Delete:\n        row.quantity=int(row.quantity)-int(quantity)\n    row.update_record()\n    db.logs.insert(\n                log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated quantity entry of \' + str(row.name) + \' from \' + str(old_quantity)\n                            + \' to \' + str(row.quantity),\n                log_time=datetime.datetime.now())\n    redirect(URL(\'inventory_management.html\'))\n    return dict()\n\n"""@auth.requires_login()\ndef remove_profile():\n    profile_table = db(db.profile.id >= 0).select()\n    return dict(profile_table = profile_table)\n@auth.requires_login()\ndef remove_profile_helper():\n    if auth.user.IS_ADMIN:\n        profile_list = []\n        for var in request.vars:\n            try:\n                profile_list.append(int(var))\n            except:\n                pass\n        new_profile_list = db((db.profile.id >= 0) & (db.profile.id.belongs(profile_list))).select()\n        for profile in new_profile_list:\n            profile.delete_record()\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' removed profile entry \' + profile.name , log_time = datetime.datetime.now())\n        redirect(\'inventory_management.html\')\n        response.flash = \'Success\'\n        return dict()\n    else:\n        response.flash = \'Requires Admin Access\'\n"""\n#endregion\n\n#region Reinforcement\n#---------------------------------------- ADD/DELETE/UPDATE REINFORCEMENT ---------------------------------------------#\n@auth.requires_login()\ndef add_reinforcement_entry():\n    form = SQLFORM(db.reinforcement)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted entry \' + form.vars.name + \' ---- \' + form.vars.quantity, log_time = datetime.datetime.now())\n        redirect(URL(\'inventory_management.html\'))\n    elif form.errors:\n       response.flash = \'form has errors\'\n    else:\n       response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef update_reinforcement_entry():\n    entry_id = request.vars.entry_id\n    l = db(db.reinforcement.id == entry_id).select()\n    form = []\n    for i in l:\n        old_name = i.name\n        old_quantity = i.quantity\n        form = SQLFORM(db.reinforcement, i, deletable=True)\n        if form.process().accepted:\n            response.flash = \'form accepted\'\n            db.logs.insert(\n                log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated entry \' + old_name + \' ---- \' + str(\n                    old_quantity) + \' to \' + form.vars.name + \' ---- \' + str(form.vars.quantity),\n                log_time=datetime.datetime.now())\n            redirect(URL(\'inventory_management.html\'))\n        elif form.errors:\n            response.flash = \'form has errors\'\n        else:\n            response.flash = \'please update\'\n    return dict(form=form)\n@auth.requires_login()\ndef update_reinforcement_helper():\n    entry_id = request.vars.entry_id\n    quantity = request.vars.quantity\n    row=db.reinforcement(db.reinforcement.id==entry_id)\n    old_quantity=row.quantity\n\n    if request.vars.Add:\n        row.quantity=int(row.quantity)+int(quantity)\n    elif request.vars.Delete:\n        row.quantity=int(row.quantity)-int(quantity)\n    row.update_record()\n    db.logs.insert(\n                log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated quantity entry \' + str(old_quantity)\n                            + \' to \' + str(row.quantity),\n                log_time=datetime.datetime.now())\n    redirect(URL(\'inventory_management.html\'))\n    return dict()\n\n"""@auth.requires_login()\ndef remove_reinforcement():\n    reinforcement_table = db(db.reinforcement.id >= 0).select()\n    return dict(reinforcement_table = reinforcement_table)\n@auth.requires_login()\ndef remove_reinforcement_helper():\n    if auth.user.IS_ADMIN:\n        reinforcement_list = []\n        for var in request.vars:\n            try:\n                reinforcement_list.append(int(var))\n            except:\n                pass\n        new_reinforcement_list = db((db.reinforcement.id >= 0) & (db.reinforcement.id.belongs(reinforcement_list))).select()\n        for reinforcement in new_reinforcement_list:\n            reinforcement.delete_record()\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' removed reinforcement \' + reinforcement.name , log_time = datetime.datetime.now())\n        redirect(\'inventory_management.html\')\n        response.flash = \'Success\'\n        return dict()\n    else:\n        response.flash = \'Requires Admin Access\'\n"""\n#endregion\n\n#region Hardware\n#---------------------------------------- ADD/DELETE/UPDATE HARDWARE ---------------------------------------------#\n@auth.requires_login()\ndef add_HAA_entry():\n    form = SQLFORM(db.hardware_and_accessories)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted entry \' + form.vars.name + \' ---- \' + form.vars.quantity, log_time = datetime.datetime.now())\n        redirect(URL(\'inventory_management.html\'))\n    elif form.errors:\n       response.flash = \'form has errors\'\n    else:\n       response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef update_HAA_entry():\n    entry_id = request.vars.entry_id\n    l = db(db.hardware_and_accessories.id == entry_id).select()\n    form = []\n    for i in l:\n        old_name = i.name\n        old_quantity = i.quantity\n        form = SQLFORM(db.hardware_and_accessories, i, deletable=True)\n        if form.process().accepted:\n            response.flash = \'form accepted\'\n            db.logs.insert(\n                log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated entry \' + old_name + \' ---- \' + str(\n                    old_quantity) + \' to \' + form.vars.name + \' ---- \' + str(form.vars.quantity),\n                log_time=datetime.datetime.now())\n            redirect(URL(\'inventory_management.html\'))\n        elif form.errors:\n            response.flash = \'form has errors\'\n        else:\n            response.flash = \'please update\'\n    return dict(form=form)\n@auth.requires_login()\ndef update_HAA_helper():\n    entry_id = request.vars.entry_id\n    quantity = request.vars.quantity\n    row=db.hardware_and_accessories(db.hardware_and_accessories.id==entry_id)\n    old_quantity=row.quantity\n\n    if request.vars.Add:\n        row.quantity=int(row.quantity)+int(quantity)\n    elif request.vars.Delete:\n        row.quantity=int(row.quantity)-int(quantity)\n    row.update_record()\n    db.logs.insert(\n                log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated quantity entry \' + str(old_quantity)\n                            + \' to \' + str(row.quantity),\n                log_time=datetime.datetime.now())\n    redirect(URL(\'inventory_management.html\'))\n    return dict()\n\n"""@auth.requires_login()\ndef remove_HAA():\n    HAA_table = db(db.hardware_and_accessories.id >= 0).select()\n    return dict(HAA_table = HAA_table)\n@auth.requires_login()\ndef remove_HAA_helper():\n    if auth.user.IS_ADMIN:\n        HAA_list = []\n        for var in request.vars:\n            try:\n                HAA_list.append(int(var))\n            except:\n                pass\n        new_HAA_list = db((db.hardware_and_accessories.id >= 0) & (db.hardware_and_accessories.id.belongs(HAA_list))).select()\n        for HAA in new_HAA_list:\n            HAA.delete_record()\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' removed hardware_and_accessories \' + hardware_and_accessories.name , log_time = datetime.datetime.now())\n        redirect(\'inventory_management.html\')\n        response.flash = \'Success\'\n        return dict()\n    else:\n        response.flash = \'Requires Admin Access\'\n"""\n#endregion\n\n#region Glass\n#---------------------------------------- ADD/DELETE/UPDATE GLASS ---------------------------------------------#\n@auth.requires_login()\ndef add_glass_entry():\n    form = SQLFORM(db.glass)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted entry \' + form.vars.name + \' ---- \' + form.vars.quantity, log_time = datetime.datetime.now())\n        redirect(URL(\'inventory_management.html\'))\n    elif form.errors:\n       response.flash = \'form has errors\'\n    else:\n       response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef update_glass_entry():\n    entry_id = request.vars.entry_id\n    l = db(db.glass.id == entry_id).select()\n    form = []\n    for i in l:\n        old_name = i.name\n        old_quantity = i.quantity\n        form = SQLFORM(db.glass, i, deletable=True)\n        if form.process().accepted:\n            response.flash = \'form accepted\'\n            db.logs.insert(\n                log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated entry \' + old_name + \' ---- \' + str(\n                    old_quantity) + \' to \' + form.vars.name + \' ---- \' + str(form.vars.quantity),\n                log_time=datetime.datetime.now())\n            redirect(URL(\'inventory_management.html\'))\n        elif form.errors:\n            response.flash = \'form has errors\'\n        else:\n            response.flash = \'please update\'\n    return dict(form=form)\n@auth.requires_login()\ndef update_glass_helper():\n    entry_id = request.vars.entry_id\n    quantity = request.vars.quantity\n    row=db.glass(db.glass.id==entry_id)\n    old_quantity=row.quantity\n\n    if request.vars.Add:\n        row.quantity=int(row.quantity)+int(quantity)\n    elif request.vars.Delete:\n        row.quantity=int(row.quantity)-int(quantity)\n    row.update_record()\n    db.logs.insert(\n                log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated quantity entry \' + str(old_quantity)\n                            + \' to \' + str(row.quantity),\n                log_time=datetime.datetime.now())\n    redirect(URL(\'inventory_management.html\'))\n    return dict()\n\n"""@auth.requires_login()\ndef remove_glass():\n    glass_table = db(db.glass.id >= 0).select()\n    return dict(glass_table = glass_table)\n@auth.requires_login()\ndef remove_glass_helper():\n    if auth.user.IS_ADMIN:\n        glass_list = []\n        for var in request.vars:\n            try:\n                glass_list.append(int(var))\n            except:\n                pass\n        new_glass_list = db((db.glass.id >= 0) & (db.glass.id.belongs(glass_list))).select()\n        for glass in new_glass_list:\n            glass.delete_record()\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' removed glass \' + glass.name , log_time = datetime.datetime.now())\n        redirect(\'inventory_management.html\')\n        response.flash = \'Success\'\n        return dict()\n    else:\n        response.flash = \'Requires Admin Access\'\n"""\n#endregion\n\n#region Installation Material\n#---------------------------------------- ADD/DELETE/UPDATE INSTALLATION MATERIAL ---------------------------------------------#\n@auth.requires_login()\ndef add_material_entry():\n    form = SQLFORM(db.installation_material)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted entry \' + form.vars.name + \' ---- \' + form.vars.quantity, log_time = datetime.datetime.now())\n        redirect(URL(\'inventory_management.html\'))\n    elif form.errors:\n       response.flash = \'form has errors\'\n    else:\n       response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef update_material_entry():\n    entry_id = request.vars.entry_id\n    l = db(db.installation_material.id == entry_id).select()\n    form = []\n    for i in l:\n        old_name = i.name\n        old_quantity = i.quantity\n        form = SQLFORM(db.installation_material, i, deletable=True)\n        if form.process().accepted:\n            response.flash = \'form accepted\'\n            db.logs.insert(\n                log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated entry \' + old_name + \' ---- \' + str(\n                    old_quantity) + \' to \' + form.vars.name + \' ---- \' + str(form.vars.quantity),\n                log_time=datetime.datetime.now())\n            redirect(URL(\'inventory_management.html\'))\n        elif form.errors:\n            response.flash = \'form has errors\'\n        else:\n            response.flash = \'please update\'\n    return dict(form=form)\n@auth.requires_login()\ndef update_material_helper():\n    entry_id = request.vars.entry_id\n    quantity = request.vars.quantity\n    row=db.installation_material(db.installation_material.id==entry_id)\n    old_quantity=row.quantity\n\n    if request.vars.Add:\n        row.quantity=int(row.quantity)+int(quantity)\n    elif request.vars.Delete:\n        row.quantity=int(row.quantity)-int(quantity)\n    row.update_record()\n    db.logs.insert(\n                log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated quantity entry \' + str(old_quantity)\n                            + \' to \' + str(row.quantity),\n                log_time=datetime.datetime.now())\n    redirect(URL(\'inventory_management.html\'))\n    return dict()\n\n"""@auth.requires_login()\ndef remove_material():\n    material_table = db(db.installation_material.id >= 0).select()\n    return dict(material_table = material_table)\n@auth.requires_login()\ndef remove_material_helper():\n    if auth.user.IS_ADMIN:\n        material_list = []\n        for var in request.vars:\n            try:\n                material_list.append(int(var))\n            except:\n                pass\n        new_material_list = db((db.installation_material.id >= 0) & (db.installation_material.id.belongs(material_list))).select()\n        for material in new_material_list:\n            material.delete_record()\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' removed installation_material \' + installation_material.name , log_time = datetime.datetime.now())\n        redirect(\'inventory_management.html\')\n        response.flash = \'Success\'\n        return dict()\n    else:\n        response.flash = \'Requires Admin Access\'\n"""\n#endregion\n\n#endregion\n\n#region Project Management\n################################################################################################################\n#------------------------------------------- PROJECT MANAGEMENT -----------------------------------------------#\n################################################################################################################\n\n#region Project\n#---------------------------------------- ADD/UPDATE/VIEW/DELETE PROJECT DETAILS ---------------------------------------------#\n@auth.requires_login()\ndef add_new_project():\n    org_list = db(db.organization.id >= 0).select()\n    form = SQLFORM(db.organization)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted organization entry \' + form.vars.name, log_time = datetime.datetime.now())\n        redirect(URL(\'add_project_details.html\', vars=dict(org_id=form.vars.id)))\n    elif form.errors:\n       response.flash = \'form has errors\'\n    else:\n       response.flash = \'please fill out the form\'\n    return dict(org_list = org_list, form=form)\n\n@auth.requires_login()\ndef add_project_details():\n    org_id = request.vars.org_id\n    db.project.organization_id.default = org_id\n    db.project.registered_date.default = datetime.date.today()\n    form = SQLFORM(db.project,submit_button="Confirm and go to POC details")\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        project_list = db(db.project.id == form.vars.id).select()\n        for project in project_list:\n            project.name = \'Project_\' + str(project.id)\n            project.update_record()\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted project entry \' + project.name + " address: " + project.address + " description: " + project.description, log_time = datetime.datetime.now())\n        redirect(URL(\'add_POC_details.html\', args = form.vars.id, vars=dict(org_id=org_id)))\n    elif form.errors:\n       response.flash = \'form has errors\'\n    else:\n       response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef add_POC_details():\n    project_id = request.args(0, cast=int)\n    org_id = request.vars.org_id\n    project_to_POC_list = db(db.project_to_poc.project_id == project_id).select()\n    project_POC_list = []\n    for entry in project_to_POC_list:\n        temp_list = db(db.point_of_contact.id == entry.poc_id).select()\n        for temp in temp_list:\n            project_POC_list.append(temp)\n    POC_list = db((db.point_of_contact.organization_id == org_id) & ~(db.point_of_contact.id.belongs(project_POC_list))).select()\n    db.point_of_contact.organization_id.default = org_id\n    form = SQLFORM(db.point_of_contact)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted point of contact entry \' + form.vars.name + " phone number: " + form.vars.phone_number, log_time = datetime.datetime.now())\n        redirect(URL(\'add_POC_helper\', args = [project_id, form.vars.id], vars=dict(org_id=org_id,project_id=project_id,POC_id=form.vars.id)))\n    elif form.errors:\n       response.flash = \'form has errors\'\n    else:\n       response.flash = \'please fill out the form\'\n    return dict(POC_list = POC_list, project_POC_list = project_POC_list, form = form, project_id = project_id, org_id = org_id)\n@auth.requires_login()\ndef add_POC_helper():\n    project_id = request.vars.project_id\n    POC_id = request.vars.POC_id\n    poc_list = db(db.point_of_contact.id == POC_id).select()\n    project_list = db(db.project.id == project_id).select()\n    org_id = request.vars.org_id\n    db.project_to_poc.insert(project_id = project_id, poc_id = POC_id)\n    db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' added point of contact \' + poc_list[0].name + " phone number: " + poc_list[0].phone_number + " to project " + project_list[0].name, log_time = datetime.datetime.now())\n    redirect(URL(\'add_POC_details\',args=project_id, vars=dict(org_id=org_id)))\n    return dict()\n\n@auth.requires_login()\ndef view_project():\n    project_id = request.vars.project_id\n    project = db(db.project.id == project_id).select()\n    org = []\n    phase_dict = {\'Started\':\'Production\',\'Production\':\'Delivery\',\'Delivery\':\'Installation\',\'Installation\':\'Completed\'}\n    design_parameters_vals = {}\n    for pro in project:\n        org = db(db.organization.id == pro.organization_id).select()\n    org_id = org[0].id\n\n    product_list = db(db.product.project_id == project_id).select()\n    project_poc_list = db(db.project_to_poc.project_id == project_id).select()\n    POC_list = []\n    for entry in project_poc_list:\n        temp_list = db(db.point_of_contact.id == entry.poc_id).select()\n        for temp in temp_list:\n            POC_list.append(temp)\n\n    for product in product_list:\n        temp = db(db.design_parameters_values.product_id == product.id).select()\n        design_parameters_vals[product.id] = []\n        for val in temp:\n            design_parameters_vals[product.id].append(str(val.parameter_value))\n    return dict(project = project, product_list = product_list, POC_list = POC_list, project_id = project_id, org = org, org_id = org_id,phase_dict = phase_dict, design_parameters_vals = design_parameters_vals)\n\n@auth.requires_login()\ndef update_project():\n    project_id = request.vars.project_id\n    l = db(db.project.id == project_id).select()\n    for i in l:\n        form = SQLFORM(db.project, i, deletable=False, showid=False)\n        if form.process().accepted:\n            response.flash = \'form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated details of project Name: \' + i.name + \' Description: \' + i.description + \' Address: \' + i.address + \' Phase: \' + i.phase + \' to Description: \' + form.vars.description + \' Address: \' + form.vars.address + \' Phase: \' + form.vars.phase, log_time = datetime.datetime.now())\n            redirect(URL(\'view_project.html\',vars = dict(project_id = project_id)))\n        elif form.errors:\n           response.flash = \'form has errors\'\n        else:\n           response.flash = \'please update\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef update_POC_details():\n    entry_id = request.vars.entry_id\n    project_id = request.vars.project_id\n    l=db(db.point_of_contact.id==entry_id).select()\n    form=[]\n    for i in l:\n        form = SQLFORM(db.point_of_contact, i, deletable=False, showid=False)\n        if form.process().accepted:\n            response.flash = \'form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated point of contact Name: \' + old_name + \' Phone Number: \' + old_number + \' Email: \' + old_email + \' Designation: \' + old_designation +\n                                       \' to Name: \' + form.vars.name + + \' Phone Number: \' + form.vars.phone_number + \' Email: \' + form.vars.email + \' Designation: \' + form.vars.designation, log_time = datetime.datetime.now())\n            redirect(URL(\'view_project.html\', vars=dict(project_id = project_id)))\n        elif form.errors:\n           response.flash = \'form has errors\'\n        else:\n           response.flash = \'please update\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef link_POC():\n    redirect(URL(\'add_POC_details\', args = request.vars.project_id, vars = dict(org_id = request.vars.org_id)))\n    return dict()\n\n@auth.requires_login()\ndef unlink_POC():\n    project_id = request.vars.project_id\n    project_poc_list = db(db.project_to_poc.project_id == project_id).select()\n    POC_list = []\n    for entry in project_poc_list:\n        temp_list = db(db.point_of_contact.id == entry.poc_id).select()\n        for temp in temp_list:\n            POC_list.append(temp)\n    return dict(POC_list = POC_list, project_id = project_id)\n@auth.requires_login()\ndef unlink_POC_helper():\n    project_id = request.vars.project_id\n    project = db(db.project.id == project_id).select()\n    POC_list = []\n    for var in request.vars:\n        try:\n            POC_list.append(int(var))\n        except:\n            pass\n    unlink_list = db((db.project_to_poc.project_id == project_id) & (db.project_to_poc.poc_id.belongs(POC_list))).select()\n    for user in unlink_list:\n        username = db(db.point_of_contact.id == user.poc_id).select()[0].name\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' unlinked point of contact \' + username + \' from project \' + project[0].name, log_time = datetime.datetime.now())\n        user.delete_record()\n    redirect(URL(\'view_project.html\', vars=dict(project_id = project_id)))\n    response.flash = \'Success\'\n    return dict()\n\n@auth.requires_login()\ndef upload_completion_letter():\n    project_id = request.vars.project_id\n    db.documents.project_id.default = project_id\n    db.documents.upload_time.default = datetime.datetime.now()\n    db.documents.document_type.default = \'Completion Letter\'\n    letters = db((db.documents.project_id == project_id) & (db.documents.document_type == \'Completion Letter\')).select()\n    db.documents.name.default = \'Completion Letter_\' + str(len(letters)+1)\n    db.documents.document_type.writable = False\n    form = SQLFORM(db.documents)\n    project = db(db.project.id == project_id).select()\n    project_name = project[0].name\n    project[0].update_record(phase = \'Completed\')\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' uploaded Completion Letter \' + \' with Name: \' + form.vars.name + \' of project \' + project_name, log_time = datetime.datetime.now())\n        redirect(URL(\'view_project.html\',vars=dict(project_id = project_id)))\n    elif form.errors:\n       response.flash = \'form has errors\'\n    else:\n       response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef upload_other_documents():\n    project_id = request.vars.project_id\n    db.documents.project_id.default = project_id\n    db.documents.upload_time.default = datetime.datetime.now()\n    db.documents.document_type.default = \'Other\'\n    letters = db((db.documents.project_id == project_id) & (db.documents.document_type == \'Other\')).select()\n    db.documents.name.default = \'Other_\' + str(len(letters)+1)\n    db.documents.document_type.writable = False\n    form = SQLFORM(db.documents)\n    project = db(db.project.id == project_id).select()\n    project_name = project[0].name\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' uploaded Other \' + \' document \' + \' with Name: \' + form.vars.name + \' of project \' + project_name, log_time = datetime.datetime.now())\n        redirect(URL(\'view_project.html\',vars=dict(project_id = project_id)))\n    elif form.errors:\n       response.flash = \'form has errors\'\n    else:\n       response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef view_docs():\n    project_id = request.vars.project_id\n    documents = db(db.documents.project_id == project_id).select()\n    for entry in documents:\n        if entry.document_file == None:\n            entry.delete_record()\n    documents = db(db.documents.project_id == project_id).select()\n    return dict(documents = documents, project_id = project_id)\n\n@auth.requires_login()\ndef delete_project():\n    project_list = db(db.project.id >= 0).select()\n    return dict(project_list = project_list)\n\n@auth.requires_login()\ndef delete_project_helper():\n    project_list = []\n    for var in request.vars:\n        try:\n            project_list.append(int(var))\n        except:\n            pass\n    delete_list = db((db.project.id >= 0) & (db.project.id.belongs(project_list))).select()\n    for project in delete_list:\n\n        #Deleting Project to POC Links\n        project_to_user_list = db(db.project_to_poc.project_id == project.id).select()\n        for entry in project_to_user_list:\n            entry.delete_record()\n\n        #Deleting Documents and associated entries\n        document_list = db(db.documents.project_id == project.id).select()\n        for entry in document_list:\n\n            quotation_product_list = db(db.product_in_quotation.document_id == entry.id).select()\n            for product in quotation_product_list:\n\n                product_quotation_parameter_values_list = db(db.product_quotation_parameter_values.product_in_quotation_id == product.id).select()\n                for parameter in product_quotation_parameter_values_list:\n                    parameter.delete_record()\n\n                product_quotation_glass_values_list = db(db.product_quotation_glass_values.product_in_quotation_id == product.id).select()\n                for glass in product_quotation_glass_values_list:\n                    glass.delete_record()\n\n                product_quotation_hardware_values_list = db(db.product_quotation_hardware_values.product_in_quotation_id == product.id).select()\n                for hardware in product_quotation_hardware_values_list:\n                    hardware.delete_record()\n\n                product_quotation_extra_information_values_list = db(db.product_quotation_extra_information_values.product_in_quotation_id == product.id).select()\n                for info in product_quotation_extra_information_values_list:\n                    info.delete_record()\n\n                parameter_table = db(db.choose_design_parameters.product_in_quotation_id == product.id).select()\n                for i in parameter_table:\n                    i.delete_record()\n                profile_table = db(db.choose_profile.product_in_quotation_id == product.id).select()\n                for i in profile_table:\n                    i.delete_record()\n                reinforcement_table = db(db.choose_reinforcement.product_in_quotation_id == product.id).select()\n                for i in reinforcement_table:\n                    i.delete_record()\n                HAA_table = db(db.choose_hardware.product_in_quotation_id == product.id).select()\n                for i in HAA_table:\n                    i.delete_record()\n                glass_table = db(db.choose_glass.product_in_quotation_id == product.id).select()\n                for i in glass_table:\n                    i.delete_record()\n                material_table = db(db.choose_material.product_in_quotation_id == product.id).select()\n                for i in material_table:\n                    i.delete_record()\n                extra_info_table = db(db.choose_extra.product_in_quotation_id == product.id).select()\n                for i in extra_info_table:\n                    i.delete_record()\n\n                product.delete_record()\n            entry.delete_record()\n\n        #Deleting Products and associated entries\n        product_list = db(db.product.project_id == project.id).select()\n        for entry in product_list:\n\n            design_parameters_values_list = db(db.design_parameters_values.product_id == entry.id).select()\n            for parameter in design_parameters_values_list:\n                parameter.delete_record()\n\n            profile_values_list = db(db.profile_values.product_id == entry.id).select()\n            for profile in profile_values_list:\n                profile.delete_record()\n\n            reinforcement_values_list = db(db.reinforcement_values.product_id == entry.id).select()\n            for reinforcement in reinforcement_values_list:\n                reinforcement.delete_record()\n\n            hardware_and_accessories_values_list = db(db.hardware_and_accessories_values.product_id == entry.id).select()\n            for hardware in hardware_and_accessories_values_list:\n                hardware.delete_record()\n\n            glass_values_list = db(db.glass_values.product_id == entry.id).select()\n            for glass in glass_values_list:\n                glass.delete_record()\n\n            installation_material_values_list = db(db.installation_material_values.product_id == entry.id).select()\n            for material in installation_material_values_list:\n                material.delete_record()\n\n            extra_information_values_list = db(db.extra_information_values.product_id == entry.id).select()\n            for info in extra_information_values_list:\n                info.delete_record()\n\n            product_cost_list = db(db.product_cost.product_id == entry.id).select()\n            for cost in product_cost_list:\n                cost.delete_record()\n            entry.delete_record()\n        project.delete_record()\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' removed project entry Name: \' + project.name + \' Address: \' + project.address + \' Description: \' + project.description + \' Phase: \' + project.phase + \'Registered Date: \' + project.registered_date.strftime(\'%d-%m-%Y\'), log_time = datetime.datetime.now())\n    redirect(\'index.html\')\n    response.flash = \'Success\'\n    return dict()\n\n#endregion\n\n#region Organization and Point of Contact\n#---------------------------------------- ADD/UPDATE/DELETE ORGANIZATION AND POC DETAILS ---------------------------------------------#\n@auth.requires_login()\ndef add_new_organization():\n    form = SQLFORM(db.organization)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted organization entry \' + form.vars.name, log_time = datetime.datetime.now())\n        redirect(URL(\'index.html\'))\n    elif form.errors:\n       response.flash = \'form has errors\'\n    else:\n       response.flash = \'please fill out the form\'\n    return dict(form = form)\n\n@auth.requires_login()\ndef update_organization():\n    org_id = request.vars.entry_id\n    l = db(db.organization.id == org_id).select()\n    form = []\n    for i in l:\n        old_name = i.name\n        old_address = i.address\n        form = SQLFORM(db.organization, i, showid=False, deletable=False)\n        if form.process().accepted:\n            response.flash = \'form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated organization entry Name: \' + old_name + \' Address: \' + old_address + \' to Name: \' + form.vars.name + \' Address: \' + form.vars.address, log_time = datetime.datetime.now())\n            redirect(URL(\'index.html\'))\n        elif form.errors:\n           response.flash = \'form has errors\'\n        else:\n           response.flash = \'please update\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef add_new_POC():\n    form = SQLFORM(db.point_of_contact)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted point of contact \' + form.vars.name, log_time = datetime.datetime.now())\n        redirect(URL(\'index.html\'))\n    elif form.errors:\n       response.flash = \'form has errors\'\n    else:\n       response.flash = \'please fill out the form\'\n    return dict(form = form)\n\n@auth.requires_login()\ndef update_POC():\n    POC_id = request.vars.entry_id\n    l = db(db.point_of_contact.id == POC_id).select()\n    form = []\n    for i in l:\n        old_name = i.name\n        old_number = i.phone_number\n        old_email = i.email\n        old_designation = i.designation\n        form = SQLFORM(db.point_of_contact, i, showid=False, deletable=False)\n        if form.process().accepted:\n            response.flash = \'form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated point of contact Name: \' + old_name + \' Phone Number: \' + old_number + \' Email: \' + old_email + \' Designation: \' + old_designation +\n                                       \' to Name: \' + form.vars.name + + \' Phone Number: \' + form.vars.phone_number + \' Email: \' + form.vars.email + \' Designation: \' + form.vars.designation, log_time = datetime.datetime.now())\n            redirect(URL(\'index.html\'))\n        elif form.errors:\n           response.flash = \'form has errors\'\n        else:\n           response.flash = \'please update\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef delete_POC():\n    POC_list = db(db.point_of_contact.id >= 0).select()\n    return dict(POC_list = POC_list)\n@auth.requires_login()\ndef delete_POC_helper():\n    POC_list = []\n    for var in request.vars:\n        try:\n            POC_list.append(int(var))\n        except:\n            pass\n    delete_list = db((db.point_of_contact.id >= 0) & (db.point_of_contact.id.belongs(POC_list))).select()\n    for user in delete_list:\n        project_to_user_list = db(db.project_to_poc.poc_id == user.id).select()\n        for entry in project_to_user_list:\n            entry.delete_record()\n        user.delete_record()\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' removed point of contact \' + user.name + \' \' + user.phone_number, log_time = datetime.datetime.now())\n    redirect(\'index.html\')\n    response.flash = \'Success\'\n    return dict()\n\n#endregion\n\n#endregion\n\n#region Document Generation\n#################################################################################################################\n#------------------------------------------- DOCUMENT GENERATION -----------------------------------------------#\n#################################################################################################################\n\n@auth.requires_login()\ndef generate_document():\n    doc = request.vars.document_type\n    project_id = request.vars.project_id\n    if doc == \'profile_cutting_list\':\n        redirect(URL(\'generate_profile_cutting_list\',vars=dict(project_id = project_id)))\n    elif doc == \'glass_cutting_list\':\n        redirect(URL(\'generate_glass_cutting_list\',vars=dict(project_id = project_id)))\n    elif doc == \'accessories_list\':\n        redirect(URL(\'generate_accessories_list\',vars=dict(project_id = project_id)))\n    elif doc == \'installation_material_list\':\n        redirect(URL(\'generate_installation_material_list\',vars=dict(project_id = project_id)))\n    elif doc == \'QC\':\n        redirect(URL(\'generate_QC\',vars=dict(project_id = project_id)))\n    return dict()\n\n@auth.requires_login()\ndef generate_profile_cutting_list():\n    LEFT_MARGIN = 2\n    RIGHT_MARGIN = 2\n    TOP_MARGIN = 5\n    FONT_SIZE = 10\n    MAIN_BORDER_SIZE = 0.5\n    PADDING = MAIN_BORDER_SIZE\n    IMAGE_WIDTH = 60\n    IMAGE_HEIGHT = 20\n    QC_TEXTBOX_WIDTH = 20\n    TEXTBOX_BORDER_SIZE = 0.1\n    NUM_STICKERS_PER_PAGE = 16\n    MIDDLE_BORDER_X = 2\n    MIDDLE_BORDER_Y = 10\n\n    CELL_WIDTH = IMAGE_WIDTH + 2*QC_TEXTBOX_WIDTH + MAIN_BORDER_SIZE + PADDING\n    CELL_HEIGHT = IMAGE_HEIGHT + MAIN_BORDER_SIZE + PADDING\n    TEXTBOX_WIDTH = (CELL_WIDTH - MAIN_BORDER_SIZE)/4\n    TEXTBOX_HEIGHT = (CELL_HEIGHT - MAIN_BORDER_SIZE)/3\n    TEXTBOX_PROJECT_X = LEFT_MARGIN + MAIN_BORDER_SIZE\n    TEXTBOX_PROJECT_Y = TOP_MARGIN + MAIN_BORDER_SIZE\n    TEXTBOX_PROFILE_CODE_X = TEXTBOX_PROJECT_X + TEXTBOX_WIDTH\n    TEXTBOX_PROFILE_CODE_Y = TEXTBOX_PROJECT_Y + TEXTBOX_HEIGHT\n    TEXTBOX_POSITION_X = TEXTBOX_PROFILE_CODE_X + TEXTBOX_WIDTH\n    TEXTBOX_POSITION_Y = TEXTBOX_PROFILE_CODE_Y + TEXTBOX_HEIGHT\n    TEXTBOX_LOCATION_VALUE_X = TEXTBOX_POSITION_X + TEXTBOX_WIDTH\n\n    project_id = request.vars.project_id\n    class PDF(FPDF):\n        def footer(self):\n            self.set_y(-10)\n            self.set_font(\'Times\', \'\', FONT_SIZE)\n            self.cell(0, 10, \'Page %s\' % self.page_no() + \' of  \' + \'{nb}\', 0, 0, \'C\')\n\n    pdf = PDF()\n    pdf.alias_nb_pages()\n\n    products = db(db.product.project_id == project_id).select()\n    project = db(db.project.id == project_id).select()[0]\n    i = 0\n    for k in range(len(products)):\n        design = db(db.design.id == products[k].design_id).select()[0]\n        profile = db(db.profile_used_in_design.design_id == design.id).select(join = db.profile_used_in_design.on(db.profile.id == db.profile_used_in_design.profile_id))\n        block_number = products[k].block_number\n        flat_number = products[k].flat_number\n        window_number = products[k].window_number\n\n        for j in range(len(profile)):\n\n            profile_values = db((db.profile_values.product_id == products[k].id) & (db.profile_values.profile_used_in_design_id == profile[j].profile_used_in_design.id)).select()\n            if len(profile_values) > 0:\n                if i%NUM_STICKERS_PER_PAGE == 0:\n                        pdf.add_page()\n                        pdf.set_margins(LEFT_MARGIN, TOP_MARGIN, RIGHT_MARGIN)\n                        pdf.set_font(\'Times\', \'\', FONT_SIZE)\n\n                #Position\n                POS_X = ((i%NUM_STICKERS_PER_PAGE)%2)*(CELL_WIDTH + MIDDLE_BORDER_X)\n                POS_Y = ((i%NUM_STICKERS_PER_PAGE)/2)*(CELL_HEIGHT + MIDDLE_BORDER_Y)\n\n                #Project, Profile, Cut Angle\n                pdf.set_xy(LEFT_MARGIN + POS_X,TOP_MARGIN + POS_Y)\n                pdf.set_line_width(MAIN_BORDER_SIZE)\n                pdf.cell(CELL_WIDTH, CELL_HEIGHT, border=1)\n                pdf.set_xy(TEXTBOX_PROJECT_X + POS_X, TEXTBOX_PROJECT_Y + POS_Y)\n                pdf.set_line_width(TEXTBOX_BORDER_SIZE)\n                pdf.set_font(\'Times\', \'\', FONT_SIZE)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, \'Project\', border=\'BR\', align=\'C\')\n                pdf.set_xy(TEXTBOX_PROJECT_X + POS_X, TEXTBOX_PROFILE_CODE_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, \'Profile\', border=\'BR\', align=\'C\')\n                pdf.set_xy(TEXTBOX_PROJECT_X + POS_X, TEXTBOX_POSITION_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, \'Cut Angle\', border=\'R\', align=\'C\')\n\n                #Project Code, Profile Code, Angle\n                pdf.set_font(\'Times\', \'B\', FONT_SIZE)\n                pdf.set_xy(TEXTBOX_PROFILE_CODE_X + POS_X, TEXTBOX_PROJECT_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, project.name, border=\'BR\', align=\'C\')\n                pdf.set_xy(TEXTBOX_PROFILE_CODE_X + POS_X, TEXTBOX_PROFILE_CODE_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, profile[j].profile.profile_code, border=\'BR\', align=\'C\')\n                pdf.set_xy(TEXTBOX_PROFILE_CODE_X + POS_X, TEXTBOX_POSITION_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, profile_values[0].cut, border=\'R\', align=\'C\')\n\n                #Location, Size, Position\n                pdf.set_font(\'Times\', \'\', FONT_SIZE)\n                pdf.set_xy(TEXTBOX_POSITION_X + POS_X, TEXTBOX_PROJECT_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, \'Location\', border=\'BR\', align=\'C\')\n                pdf.set_xy(TEXTBOX_POSITION_X + POS_X, TEXTBOX_PROFILE_CODE_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, \'Size\', border=\'BR\', align=\'C\')\n                pdf.set_xy(TEXTBOX_POSITION_X + POS_X, TEXTBOX_POSITION_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, \'Position\', border=\'R\', align=\'C\')\n\n                #Location Value, Size Value, Position Value\n                pdf.set_font(\'Times\', \'B\', FONT_SIZE)\n                pdf.set_xy(TEXTBOX_LOCATION_VALUE_X + POS_X, TEXTBOX_PROJECT_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, str(block_number)+\'/\'+str(flat_number)+\'/\'+str(window_number), border=\'B\', align=\'C\')\n                pdf.set_xy(TEXTBOX_LOCATION_VALUE_X + POS_X, TEXTBOX_PROFILE_CODE_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, str(profile_values[0].length_value), border=\'B\', align=\'C\')\n                pdf.set_xy(TEXTBOX_LOCATION_VALUE_X + POS_X, TEXTBOX_POSITION_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, profile_values[0].profile_position, align=\'C\')\n\n                i += 1\n\n    response.headers[\'Content-Type\'] = \'application/pdf\'\n    return pdf.output(dest=\'S\')\n\n@auth.requires_login()\ndef generate_glass_cutting_list():\n    LEFT_MARGIN = 2\n    RIGHT_MARGIN = 2\n    TOP_MARGIN = 5\n    FONT_SIZE = 10\n    MAIN_BORDER_SIZE = 0.5\n    PADDING = MAIN_BORDER_SIZE\n    IMAGE_WIDTH = 60\n    IMAGE_HEIGHT = 20\n    QC_TEXTBOX_WIDTH = 20\n    TEXTBOX_BORDER_SIZE = 0.1\n    NUM_STICKERS_PER_PAGE = 16\n    MIDDLE_BORDER_X = 2\n    MIDDLE_BORDER_Y = 10\n\n    CELL_WIDTH = IMAGE_WIDTH + 2*QC_TEXTBOX_WIDTH + MAIN_BORDER_SIZE + PADDING\n    CELL_HEIGHT = IMAGE_HEIGHT + MAIN_BORDER_SIZE + PADDING\n    TEXTBOX_WIDTH = (CELL_WIDTH - MAIN_BORDER_SIZE)/4\n    TEXTBOX_HEIGHT = (CELL_HEIGHT - MAIN_BORDER_SIZE)/3\n    TEXTBOX_PROJECT_X = LEFT_MARGIN + MAIN_BORDER_SIZE\n    TEXTBOX_PROJECT_Y = TOP_MARGIN + MAIN_BORDER_SIZE\n    TEXTBOX_PROFILE_CODE_X = TEXTBOX_PROJECT_X + TEXTBOX_WIDTH\n    TEXTBOX_PROFILE_CODE_Y = TEXTBOX_PROJECT_Y + TEXTBOX_HEIGHT\n    TEXTBOX_POSITION_X = TEXTBOX_PROFILE_CODE_X + TEXTBOX_WIDTH\n    TEXTBOX_POSITION_Y = TEXTBOX_PROFILE_CODE_Y + TEXTBOX_HEIGHT\n    TEXTBOX_LOCATION_VALUE_X = TEXTBOX_POSITION_X + TEXTBOX_WIDTH\n\n    project_id = request.vars.project_id\n    class PDF(FPDF):\n        def footer(self):\n            self.set_y(-10)\n            self.set_font(\'Times\', \'\', FONT_SIZE)\n            self.cell(0, 10, \'Page %s\' % self.page_no() + \' of  \' + \'{nb}\', 0, 0, \'C\')\n\n    pdf = PDF()\n    pdf.alias_nb_pages()\n\n    products = db(db.product.project_id == project_id).select()\n    project = db(db.project.id == project_id).select()[0]\n    i = 0\n    for k in range(len(products)):\n        design = db(db.design.id == products[k].design_id).select()[0]\n        glass = db(db.glass_used_in_design.design_id == design.id).select(join = db.glass_used_in_design.on(db.glass.id == db.glass_used_in_design.glass_id))\n        block_number = products[k].block_number\n        flat_number = products[k].flat_number\n        window_number = products[k].window_number\n\n        for j in range(len(glass)):\n            glass_values = db((db.glass_values.product_id == products[k].id) & (db.glass_values.glass_used_in_design_id == glass[j].glass_used_in_design.id)).select()\n            if len(glass_values) > 0:\n                if i%NUM_STICKERS_PER_PAGE == 0:\n                        pdf.add_page()\n                        pdf.set_margins(LEFT_MARGIN, TOP_MARGIN, RIGHT_MARGIN)\n                        pdf.set_font(\'Times\', \'\', FONT_SIZE)\n\n                #Position\n                POS_X = ((i%NUM_STICKERS_PER_PAGE)%2)*(CELL_WIDTH + MIDDLE_BORDER_X)\n                POS_Y = ((i%NUM_STICKERS_PER_PAGE)/2)*(CELL_HEIGHT + MIDDLE_BORDER_Y)\n\n                #Project, Profile, Cut Angle\n                pdf.set_xy(LEFT_MARGIN + POS_X,TOP_MARGIN + POS_Y)\n                pdf.set_line_width(MAIN_BORDER_SIZE)\n                pdf.cell(CELL_WIDTH, CELL_HEIGHT, border=1)\n                pdf.set_xy(TEXTBOX_PROJECT_X + POS_X, TEXTBOX_PROJECT_Y + POS_Y)\n                pdf.set_line_width(TEXTBOX_BORDER_SIZE)\n                pdf.set_font(\'Times\', \'\', FONT_SIZE)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, \'Project\', border=\'BR\', align=\'C\')\n                pdf.set_xy(TEXTBOX_PROJECT_X + POS_X, TEXTBOX_PROFILE_CODE_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, \'Glass Type\', border=\'BR\', align=\'C\')\n                pdf.set_xy(TEXTBOX_PROJECT_X + POS_X, TEXTBOX_POSITION_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, border=\'R\', align=\'C\')\n\n                #Project Code, Profile Code, Angle\n                pdf.set_font(\'Times\', \'B\', FONT_SIZE)\n                pdf.set_xy(TEXTBOX_PROFILE_CODE_X + POS_X, TEXTBOX_PROJECT_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, project.name, border=\'BR\', align=\'C\')\n                pdf.set_xy(TEXTBOX_PROFILE_CODE_X + POS_X, TEXTBOX_PROFILE_CODE_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, glass[j].glass.name, border=\'BR\', align=\'C\')\n                pdf.set_xy(TEXTBOX_PROFILE_CODE_X + POS_X, TEXTBOX_POSITION_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, border=\'R\', align=\'C\')\n\n                #Location, Size, Position\n                pdf.set_font(\'Times\', \'\', FONT_SIZE)\n                pdf.set_xy(TEXTBOX_POSITION_X + POS_X, TEXTBOX_PROJECT_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, \'Location\', border=\'BR\', align=\'C\')\n                pdf.set_xy(TEXTBOX_POSITION_X + POS_X, TEXTBOX_PROFILE_CODE_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, \'Width\', border=\'BR\', align=\'C\')\n                pdf.set_xy(TEXTBOX_POSITION_X + POS_X, TEXTBOX_POSITION_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, \'Height\', border=\'R\', align=\'C\')\n\n                #Location Value, Size Value, Position Value\n                pdf.set_font(\'Times\', \'B\', FONT_SIZE)\n                pdf.set_xy(TEXTBOX_LOCATION_VALUE_X + POS_X, TEXTBOX_PROJECT_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, str(block_number)+\'/\'+str(flat_number)+\'/\'+str(window_number), border=\'B\', align=\'C\')\n                pdf.set_xy(TEXTBOX_LOCATION_VALUE_X + POS_X, TEXTBOX_PROFILE_CODE_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, str(glass_values[0].width), border=\'B\', align=\'C\')\n                pdf.set_xy(TEXTBOX_LOCATION_VALUE_X + POS_X, TEXTBOX_POSITION_Y + POS_Y)\n                pdf.cell(TEXTBOX_WIDTH, TEXTBOX_HEIGHT, str(glass_values[0].height), align=\'C\')\n\n                i += 1\n\n    response.headers[\'Content-Type\'] = \'application/pdf\'\n    return pdf.output(dest=\'S\')\n\n@auth.requires_login()\ndef generate_accessories_list():\n    LEFT_MARGIN = 2\n    RIGHT_MARGIN = 2\n    TOP_MARGIN = 5\n    FONT_SIZE = 12\n    TITLE_FONT_SIZE = 15\n    CELL_WIDTH = 190\n    CELL_HEIGHT = 12\n    TABLE_START_X = 25\n    TABLE_START_Y = 50\n    SNO_WIDTH = 10\n    SNO_HEIGHT = 5\n    ITEM_CODE_WIDTH = 30\n    ITEM_DESC_WIDTH = 100\n    QUANTITY_WIDTH =  20\n    ITEM_CODE_X = TABLE_START_X + SNO_WIDTH\n    ITEM_DESC_X = ITEM_CODE_X + ITEM_CODE_WIDTH\n    QUANTITY_X = ITEM_DESC_X + ITEM_DESC_WIDTH\n    NUM_ENTRIES_PER_PAGE = 40\n\n    project_id = request.vars.project_id\n    class PDF(FPDF):\n        def header(self):\n            self.set_font(\'Times\', \'B\', TITLE_FONT_SIZE)\n            self.cell(w = 0, txt = \'PRIME uPVC DOORS AND WINDOWS\', align = \'C\')\n            self.ln(7)\n            self.set_font(\'Times\', \'\', FONT_SIZE)\n            self.cell(w = 0, txt = \'Production Document\', ln = 0, align = \'L\')\n            self.cell(w = 0, txt = str(datetime.date.today().strftime(\'Date : %d-%m-%Y\')), align = \'R\')\n            self.ln(5)\n\n        def footer(self):\n            self.set_y(-10)\n            self.set_font(\'Times\', \'\', FONT_SIZE)\n            self.cell(0, 10, \'Page %s\' % self.page_no() + \' of  \' + \'{nb}\', 0, 0, \'C\')\n\n    pdf = PDF()\n    pdf.alias_nb_pages()\n\n    products = db(db.product.project_id == project_id).select()\n    project = db(db.project.id == project_id).select()[0]\n    i = 0\n    for k in range(len(products)):\n        design = db(db.design.id == products[k].design_id).select()[0]\n        hardware = db(db.hardware_and_accessories_used_in_design.design_id == design.id).select(join = db.hardware_and_accessories_used_in_design.on(db.hardware_and_accessories.id == db.hardware_and_accessories_used_in_design.hardware_and_accessories_id))\n\n        for j in range(len(hardware)):\n            HAA_values = db((db.hardware_and_accessories_values.product_id == products[k].id) & (db.hardware_and_accessories_values.hardware_and_accessories_used_in_design_id == hardware[j].hardware_and_accessories_used_in_design.id)).select()\n            if len(HAA_values) > 0:\n                if i%NUM_ENTRIES_PER_PAGE == 0:\n                    pdf.add_page()\n                    pdf.set_font(\'Times\', \'\', FONT_SIZE)\n\n                    #Heading box\n                    pdf.cell(CELL_WIDTH, CELL_HEIGHT, txt=\'\', border=1)\n                    #pdf.set_xy(10, 25)\n                    #pdf.cell(w=0, txt=\'Production Doc No :    24\', ln=0, align=\'L\')\n                    pdf.set_xy(120, 25)\n                    pdf.cell(w=0, txt=\'Project Name :    \' + project.name, ln=1, align=\'L\')\n                    pdf.set_xy(120, 30)\n                    pdf.cell(w=0, txt=\'Document Type:    Accessories\', ln=1, align=\'L\')\n                    pdf.ln(10)\n\n                    #Table Header\n                    pdf.set_xy(TABLE_START_X, TABLE_START_Y)\n                    pdf.cell(w=SNO_WIDTH, h=SNO_HEIGHT, txt=\'S.No\', border=1, align=\'C\')\n                    pdf.set_xy(ITEM_CODE_X, TABLE_START_Y)\n                    pdf.cell(w=ITEM_CODE_WIDTH, h=SNO_HEIGHT, txt=\'Item Code\', border=\'RTB\', align=\'C\')\n                    pdf.set_xy(ITEM_DESC_X, TABLE_START_Y)\n                    pdf.cell(w=ITEM_DESC_WIDTH, h=SNO_HEIGHT, txt=\'Item Description\', border=\'RTB\', align=\'C\')\n                    pdf.set_xy(QUANTITY_X, TABLE_START_Y)\n                    pdf.cell(w=QUANTITY_WIDTH, h=SNO_HEIGHT, txt=\'Quantity\', border=\'RTB\', align=\'C\')\n\n                #Table\n                POS_Y = ((i%NUM_ENTRIES_PER_PAGE)+1)*SNO_HEIGHT\n\n                pdf.set_xy(TABLE_START_X, TABLE_START_Y + POS_Y)\n                pdf.cell(w=SNO_WIDTH, h=SNO_HEIGHT, txt=str(i+1), border=1, align=\'C\')\n                pdf.set_xy(ITEM_CODE_X, TABLE_START_Y + POS_Y)\n                pdf.cell(w=ITEM_CODE_WIDTH, h=SNO_HEIGHT, txt=hardware[j].hardware_and_accessories.name, border=\'RTB\', align=\'C\')\n                pdf.set_xy(ITEM_DESC_X, TABLE_START_Y + POS_Y)\n                pdf.cell(w=ITEM_DESC_WIDTH, h=SNO_HEIGHT, txt=hardware[j].hardware_and_accessories.description, border=\'RTB\', align=\'C\')\n                pdf.set_xy(QUANTITY_X, TABLE_START_Y + POS_Y)\n                pdf.cell(w=QUANTITY_WIDTH, h=SNO_HEIGHT, txt=str(HAA_values[0].quantity), border=\'RTB\', align=\'C\')\n\n                i += 1\n\n    response.headers[\'Content-Type\'] = \'application/pdf\'\n    return pdf.output(dest=\'S\')\n\n@auth.requires_login()\ndef generate_installation_material_list():\n    LEFT_MARGIN = 2\n    RIGHT_MARGIN = 2\n    TOP_MARGIN = 5\n    FONT_SIZE = 12\n    TITLE_FONT_SIZE = 15\n    CELL_WIDTH = 190\n    CELL_HEIGHT = 12\n    TABLE_START_X = 25\n    TABLE_START_Y = 50\n    SNO_WIDTH = 10\n    SNO_HEIGHT = 5\n    ITEM_CODE_WIDTH = 30\n    ITEM_DESC_WIDTH = 100\n    QUANTITY_WIDTH =  20\n    ITEM_CODE_X = TABLE_START_X + SNO_WIDTH\n    ITEM_DESC_X = ITEM_CODE_X + ITEM_CODE_WIDTH\n    QUANTITY_X = ITEM_DESC_X + ITEM_DESC_WIDTH\n    NUM_ENTRIES_PER_PAGE = 40\n\n    project_id = request.vars.project_id\n    class PDF(FPDF):\n        def header(self):\n            self.set_font(\'Times\', \'B\', TITLE_FONT_SIZE)\n            self.cell(w = 0, txt = \'PRIME uPVC DOORS AND WINDOWS\', align = \'C\')\n            self.ln(7)\n            self.set_font(\'Times\', \'\', FONT_SIZE)\n            self.cell(w = 0, txt = \'Production Document\', ln = 0, align = \'L\')\n            self.cell(w = 0, txt = str(datetime.date.today().strftime(\'Date : %d-%m-%Y\')), align = \'R\')\n            self.ln(5)\n\n        def footer(self):\n            self.set_y(-10)\n            self.set_font(\'Times\', \'\', FONT_SIZE)\n            self.cell(0, 10, \'Page %s\' % self.page_no() + \' of  \' + \'{nb}\', 0, 0, \'C\')\n\n    pdf = PDF()\n    pdf.alias_nb_pages()\n\n    products = db(db.product.project_id == project_id).select()\n    project = db(db.project.id == project_id).select()[0]\n    i = 0\n    for k in range(len(products)):\n        design = db(db.design.id == products[k].design_id).select()[0]\n        material = db(db.installation_material_used_in_design.design_id == design.id).select(join = db.installation_material_used_in_design.on(db.installation_material.id == db.installation_material_used_in_design.installation_material_id))\n\n        for j in range(len(material)):\n            material_values = db((db.installation_material_values.product_id == products[k].id) & (db.installation_material_values.installation_material_used_in_design_id == material[j].installation_material_used_in_design.id)).select()\n            if len(material_values) > 0:\n                if i%NUM_ENTRIES_PER_PAGE == 0:\n                    pdf.add_page()\n                    pdf.set_font(\'Times\', \'\', FONT_SIZE)\n\n                    #Heading box\n                    pdf.cell(CELL_WIDTH, CELL_HEIGHT, txt=\'\', border=1)\n                    #pdf.set_xy(10, 25)\n                    #pdf.cell(w=0, txt=\'Production Doc No :    24\', ln=0, align=\'L\')\n                    pdf.set_xy(120, 25)\n                    pdf.cell(w=0, txt=\'Project Name :    \' + project.name, ln=1, align=\'L\')\n                    pdf.set_xy(120, 30)\n                    pdf.cell(w=0, txt=\'Document Type:    Installation Material\', ln=1, align=\'L\')\n                    pdf.ln(10)\n\n                    #Table Header\n                    pdf.set_xy(TABLE_START_X, TABLE_START_Y)\n                    pdf.cell(w=SNO_WIDTH, h=SNO_HEIGHT, txt=\'S.No\', border=1, align=\'C\')\n                    pdf.set_xy(ITEM_CODE_X, TABLE_START_Y)\n                    pdf.cell(w=ITEM_CODE_WIDTH, h=SNO_HEIGHT, txt=\'Item Code\', border=\'RTB\', align=\'C\')\n                    pdf.set_xy(ITEM_DESC_X, TABLE_START_Y)\n                    pdf.cell(w=ITEM_DESC_WIDTH, h=SNO_HEIGHT, txt=\'Item Description\', border=\'RTB\', align=\'C\')\n                    pdf.set_xy(QUANTITY_X, TABLE_START_Y)\n                    pdf.cell(w=QUANTITY_WIDTH, h=SNO_HEIGHT, txt=\'Quantity\', border=\'RTB\', align=\'C\')\n\n\n                #Table\n                POS_Y = ((i%NUM_ENTRIES_PER_PAGE)+1)*SNO_HEIGHT\n\n                pdf.set_xy(TABLE_START_X, TABLE_START_Y + POS_Y)\n                pdf.cell(w=SNO_WIDTH, h=SNO_HEIGHT, txt=str(i+1), border=1, align=\'C\')\n                pdf.set_xy(ITEM_CODE_X, TABLE_START_Y + POS_Y)\n                pdf.cell(w=ITEM_CODE_WIDTH, h=SNO_HEIGHT, txt=material[j].installation_material.name, border=\'RTB\', align=\'C\')\n                pdf.set_xy(ITEM_DESC_X, TABLE_START_Y + POS_Y)\n                pdf.cell(w=ITEM_DESC_WIDTH, h=SNO_HEIGHT, txt=material[j].installation_material.description, border=\'RTB\', align=\'C\')\n                pdf.set_xy(QUANTITY_X, TABLE_START_Y + POS_Y)\n                pdf.cell(w=QUANTITY_WIDTH, h=SNO_HEIGHT, txt=str(material_values[0].quantity), border=\'RTB\', align=\'C\')\n\n                i += 1\n\n    response.headers[\'Content-Type\'] = \'application/pdf\'\n    return pdf.output(dest=\'S\')\n\n@auth.requires_login()\ndef generate_QC():\n    LEFT_MARGIN = 2\n    RIGHT_MARGIN = 2\n    TOP_MARGIN = 5\n    FONT_SIZE = 12\n    QC_FONT_SIZE = 24\n    MAIN_BORDER_SIZE = 0.5\n    PADDING = MAIN_BORDER_SIZE\n    IMAGE_WIDTH = 60\n    IMAGE_HEIGHT = 20\n    TEXTBOX_WIDTH = 20\n    UPPER_TEXTBOX_HEIGHT = 5\n    LOWER_TEXTBOX_HEIGHT = IMAGE_HEIGHT - UPPER_TEXTBOX_HEIGHT\n    TEXTBOX_BORDER_SIZE = 0.1\n    NUM_STICKERS_PER_PAGE = 16\n    MIDDLE_BORDER_X = 2\n    MIDDLE_BORDER_Y = 10\n\n    CELL_WIDTH = IMAGE_WIDTH + 2*TEXTBOX_WIDTH + MAIN_BORDER_SIZE + PADDING\n    CELL_HEIGHT = IMAGE_HEIGHT + MAIN_BORDER_SIZE + PADDING\n    IMAGE_X = LEFT_MARGIN + MAIN_BORDER_SIZE\n    IMAGE_Y = TOP_MARGIN + MAIN_BORDER_SIZE\n    TEXTBOX_LOCATION_X = IMAGE_X + IMAGE_WIDTH\n    TEXTBOX_LOCATION_Y = IMAGE_Y\n    TEXTBOX_OK_X = TEXTBOX_LOCATION_X + TEXTBOX_WIDTH\n    TEXTBOX_OK_Y = IMAGE_Y + UPPER_TEXTBOX_HEIGHT\n\n    project_id = request.vars.project_id\n    class PDF(FPDF):\n        def footer(self):\n            self.set_y(-10)\n            self.set_font(\'Times\', \'\', FONT_SIZE)\n            self.cell(0, 10, \'Page %s\' % self.page_no() + \' of  \' + \'{nb}\', 0, 0, \'C\')\n\n    pdf = PDF()\n    pdf.alias_nb_pages()\n\n    products = db(db.product.project_id == project_id).select()\n    for i in range(len(products)):\n        if i%NUM_STICKERS_PER_PAGE == 0:\n            pdf.add_page()\n            pdf.set_margins(LEFT_MARGIN, TOP_MARGIN, RIGHT_MARGIN)\n            pdf.set_font(\'Times\', \'\', FONT_SIZE)\n\n        block_number = products[i].block_number\n        flat_number = products[i].flat_number\n        window_number = products[i].window_number\n\n        #Position\n        POS_X = ((i%NUM_STICKERS_PER_PAGE)%2)*(CELL_WIDTH + MIDDLE_BORDER_X)\n        POS_Y = ((i%NUM_STICKERS_PER_PAGE)/2)*(CELL_HEIGHT + MIDDLE_BORDER_Y)\n\n        #Logo\n        pdf.set_xy(LEFT_MARGIN + POS_X,TOP_MARGIN + POS_Y)\n        pdf.set_line_width(MAIN_BORDER_SIZE)\n        pdf.cell(CELL_WIDTH, CELL_HEIGHT, border=1)\n        pdf.set_xy(IMAGE_X + POS_X, IMAGE_Y + POS_Y)\n        pdf.image(\'./applications/Prime/static/images/prime.jpeg\', w = IMAGE_WIDTH, h = IMAGE_HEIGHT)\n\n        #Location,QC\n        pdf.set_line_width(TEXTBOX_BORDER_SIZE)\n        pdf.set_xy(TEXTBOX_LOCATION_X + POS_X, TEXTBOX_LOCATION_Y + POS_Y)\n        pdf.set_font(\'Times\', \'\', FONT_SIZE)\n        pdf.cell(TEXTBOX_WIDTH, UPPER_TEXTBOX_HEIGHT, \'Location\', border=\'LR\', align=\'C\')\n        pdf.set_xy(TEXTBOX_LOCATION_X + POS_X, TEXTBOX_OK_Y + POS_Y)\n        pdf.set_font(\'Times\', \'B\', QC_FONT_SIZE)\n        pdf.cell(TEXTBOX_WIDTH, LOWER_TEXTBOX_HEIGHT, \'QC\', border=\'LRT\', align=\'C\')\n\n        #Location Value,OK\n        pdf.set_xy(TEXTBOX_OK_X + POS_X, TEXTBOX_LOCATION_Y + POS_Y)\n        pdf.set_font(\'Times\', \'\', FONT_SIZE)\n        pdf.cell(TEXTBOX_WIDTH, UPPER_TEXTBOX_HEIGHT, str(block_number)+\'/\'+str(flat_number)+\'/\'+str(window_number), align=\'C\')\n        pdf.set_xy(TEXTBOX_OK_X + POS_X, TEXTBOX_OK_Y + POS_Y)\n        pdf.set_font(\'Times\', \'B\', QC_FONT_SIZE)\n        pdf.cell(TEXTBOX_WIDTH, LOWER_TEXTBOX_HEIGHT, \'OK\', border=\'T\', align=\'C\')\n\n    response.headers[\'Content-Type\'] = \'application/pdf\'\n    return pdf.output(dest=\'S\')\n\n#region Generate Quotation\n#---------------------------------------- GENERATE QUOTATION ---------------------------------------------#\n@auth.requires_login()\ndef quotation_options():\n    project_id = request.vars.project_id\n    quotations = db((db.documents.project_id == project_id) & (db.documents.document_type == \'Quotation\')).select()\n    name = \'Quotation_\' + str(len(quotations)+1)\n    db.documents.insert(project_id = project_id, name = name, document_type = \'Quotation\')\n    document_id = db(db.documents.name == name).select()[0].id\n    return dict(document_id = document_id, quotations = quotations)\n\n@auth.requires_login()\ndef copy_quotation():\n    entry_id = request.vars.entry_id\n    document_id = request.vars.document_id\n    quotation_product_list = db(db.product_in_quotation.document_id == entry_id).select()\n    for product in quotation_product_list:\n\n        new_id = db.product_in_quotation.insert(name = product.name, design_id = product.design_id, document_id = document_id, quantity = product.quantity, profile_cost = product.profile_cost,\n                          reinforcement_cost = product.reinforcement_cost, hardware_and_accessories_cost = product.hardware_and_accessories_cost, glass_cost = product.glass_cost, installation_material_cost = product.installation_material_cost,\n                          fabrication_cost = product.fabrication_cost, installation_cost = product.installation_cost, total_value = product.total_value, profit_margin_id = product.profit_margin_id,\n                          final_value = product.final_value, total_value_per_piece = product.total_value_per_piece)\n\n        #Copying Values\n        product_quotation_parameter_values_list = db(db.product_quotation_parameter_values.product_in_quotation_id == product.id).select()\n        for entry in product_quotation_parameter_values_list:\n            db.product_quotation_parameter_values.insert(product_in_quotation_id = new_id, design_parameter_id = entry.design_parameter_id, parameter_value = entry.parameter_value)\n\n        product_quotation_glass_values_list = db(db.product_quotation_glass_values.product_in_quotation_id == product.id).select()\n        for entry in product_quotation_glass_values_list:\n            db.product_quotation_glass_values.insert(product_in_quotation_id = new_id, glass_used_in_design_id = entry.glass_used_in_design_id, width = entry.width, height = entry.height, quantity = entry.quantity, glass_cost = entry.glass_cost)\n\n        product_quotation_hardware_values_list = db(db.product_quotation_hardware_values.product_in_quotation_id == product.id).select()\n        for entry in product_quotation_hardware_values_list:\n            db.product_quotation_hardware_values.insert(product_in_quotation_id = new_id, hardware_and_accessories_used_in_design_id = entry.hardware_and_accessories_used_in_design_id, quantity = entry.quantity, hardware_and_accessories_cost = entry.hardware_and_accessories_cost)\n\n        product_quotation_extra_information_values_list = db(db.product_quotation_extra_information_values.product_in_quotation_id == product.id).select()\n        for entry in product_quotation_extra_information_values_list:\n            db.product_quotation_extra_information_values.insert(product_in_quotation_id = new_id, extra_information_in_design_id = entry.extra_information_in_design_id, default_value = entry.default_value, extra_information_value = entry.extra_information_value)\n\n        choose_params = db(db.choose_design_parameters.product_in_quotation_id == product.id).select()\n        for entry in choose_params:\n            db.choose_design_parameters.insert(product_in_quotation_id = new_id, param_id = entry.param_id)\n        choose_profile = db(db.choose_profile.product_in_quotation_id == product.id).select()\n        for entry in choose_profile:\n            db.choose_profile.insert(product_in_quotation_id = new_id, pro_id = entry.pro_id)\n        choose_reinforcement = db(db.choose_reinforcement.product_in_quotation_id == product.id).select()\n        for entry in choose_reinforcement:\n            db.choose_reinforcement.insert(product_in_quotation_id = new_id, rein_id = entry.rein_id)\n        choose_hardware = db(db.choose_hardware.product_in_quotation_id == product.id).select()\n        for entry in choose_hardware:\n            db.choose_hardware.insert(product_in_quotation_id = new_id, hardware_id = entry.hardware_id)\n        choose_glass = db(db.choose_glass.product_in_quotation_id == product.id).select()\n        for entry in choose_glass:\n            db.choose_glass.insert(product_in_quotation_id = new_id, glas_id = entry.glas_id)\n        choose_material = db(db.choose_material.product_in_quotation_id == product.id).select()\n        for entry in choose_material:\n            db.choose_material.insert(product_in_quotation_id = new_id, material_id = entry.material_id)\n        choose_extra = db(db.choose_extra.product_in_quotation_id == product.id).select()\n        for entry in choose_extra:\n            db.choose_extra.insert(product_in_quotation_id = new_id, extra_info_id = entry.extra_info_id)\n\n    redirect(URL(\'generate_quotation_details.html\',vars = dict(document_id = document_id)))\n\n@auth.requires_login()\ndef generate_quotation_details():\n    document_id = request.vars.document_id\n    document = db(db.documents.id == document_id).select()[0]\n    project = db(db.project.id == document.project_id).select()\n    project_id = project[0].id\n    product_list = db(db.product_in_quotation.document_id == document_id).select()\n    org = None\n    for i in project:\n        org = db(db.organization.id == i.organization_id).select()\n    return dict(project = project, org = org, project_id = project_id, document_id = document_id, product_list = product_list)\n\n@auth.requires_login()\ndef add_new_product_quotation():\n    document_id=request.vars.document_id\n    rows=db(db.product_in_quotation.document_id == document_id).select(db.product_in_quotation.name)\n    max=0\n    for i in rows:\n        try:\n            number=int(re.search(r\'\\d+\', i.name).group())\n            if(number>max):\n                max=number\n        except:\n            pass\n    db.product_in_quotation.document_id.default = document_id\n    db.product_in_quotation.name.default = \'product_\' + str(max+1)\n    form=SQLFORM(db.product_in_quotation,fields=[\'design_id\', \'quantity\', \'fabrication_cost\', \'installation_cost\', \'profit_margin_id\'])\n    if form.process().accepted:\n        session.flash = \'accepted\'\n        id=form.vars.id\n        redirect(URL(\'product_in_quotation_design_parameters.html\', vars=dict(product_id=id)))\n    elif form.errors:\n           response.flash = \'form has errors\'\n    else:\n       response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef product_in_quotation_design_parameters():\n    product_id = request.vars.product_id\n    product = db(db.product_in_quotation.id == product_id).select()\n    sel = []\n    for i in product:\n        sel=db(db.design_parameters.design_id == i.design_id).select()\n    parameters={}\n    parameters=collections.OrderedDict(sorted(parameters.items()))\n    for row in sel:\n        parameters[row.id]=row.name+\'(\'+row.codename+\')\'\n    return dict(parameters = parameters, product_id = product_id)\n\n@auth.requires_login()\ndef quotation_design_parameters_values():\n    product_id=request.vars.product_id\n    product = db(db.product_in_quotation.id == product_id).select()[0]\n    document = db(db.documents.id == product.document_id).select()[0]\n    project = db(db.project.id == document.project_id).select()[0]\n    parameters=request.vars\n    del parameters[\'product_id\']\n    parameter_value=[]\n    for parameter in parameters:\n        db.product_quotation_parameter_values.insert(product_in_quotation_id=product_id,design_parameter_id=parameter,parameter_value=parameters[parameter])\n        parameter_value.append(parameters[parameter])\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' added product \' + product.name + \' in quotation \' + document.name + \' of project \' + project.name, log_time = datetime.datetime.now())\n    redirect(URL(\'calculate_quotation_product\',vars=dict(entry_id = product_id)))\n    return dict()\n\n@auth.requires_login()\ndef calculate_quotation_product():\n    product_id = request.vars.entry_id\n    flag = request.vars.flag\n    product = db(db.product_in_quotation.id == product_id).select()[0]\n    design_id = product.design_id\n    design_table = db(db.design.id == design_id).select()[0]\n    parameter_values_table = db(db.product_quotation_parameter_values.product_in_quotation_id == product_id).select(orderby=db.product_quotation_parameter_values.design_parameter_id)\n    parameter_value = []\n    for i in parameter_values_table:\n        parameter_value.append(str(i.parameter_value))\n    profit_margin_table = db(db.profit_margin_table.id == product.profit_margin_id).select()[0]\n\n    profile_cost = 0.0\n    reinforcement_cost = 0.0\n    hardware_cost = 0.0\n    glass_cost = 0.0\n    material_cost = 0.0\n\n    if flag:\n        rows = db(db.product_quotation_hardware_values.product_in_quotation_id == product_id).delete()\n        rows = db(db.product_quotation_glass_values.product_in_quotation_id == product_id).delete()\n        rows = db(db.product_quotation_extra_information_values.product_in_quotation_id == product_id).delete()\n\n    parameter_table = db(db.product_quotation_parameter_values.product_in_quotation_id == product_id).select(join = db.product_quotation_parameter_values.on(db.design_parameters.id == db.product_quotation_parameter_values.design_parameter_id))\n    for i in parameter_table:\n        if i.design_parameters.name.lower() == \'width\' or i.design_parameters.name.lower() == \'height\':\n            db.choose_design_parameters.insert(product_in_quotation_id = product_id, param_id = i.design_parameters.id)\n\n    profile_table = db(db.profile_used_in_design.design_id == design_id).select()\n    for i in xrange(len(profile_table)):\n        #print profile_table[i].length_calculation,parameter_value\n        length_value = Infix(convert(profile_table[i].length_calculation,parameter_value))\n        profile_table[i].length_calculation=convert(profile_table[i].length_calculation,parameter_value)\n        profile_table[i].length_calculation=Infix(profile_table[i].length_calculation)\n        profile_table[i].cost_calculation=convert(profile_table[i].cost_calculation,parameter_value)\n        profile_table[i].cost_calculation=Infix(profile_table[i].cost_calculation)\n        profile_cost += float(profile_table[i].cost_calculation)\n\n        db.choose_profile.insert(product_in_quotation_id = product_id, pro_id = profile_table[i].profile_id)\n\n    reinforcement_table = db(db.reinforcement_used_in_design.design_id == design_id).select()\n    for i in xrange(len(reinforcement_table)):\n        #print reinforcement_table[i].length_calculation,parameter_value\n        reinforcement_table[i].length_calculation=convert(reinforcement_table[i].length_calculation,parameter_value)\n        reinforcement_table[i].length_calculation=Infix(reinforcement_table[i].length_calculation)\n        reinforcement_table[i].cost_calculation=convert(reinforcement_table[i].cost_calculation,parameter_value)\n        reinforcement_table[i].cost_calculation=Infix(reinforcement_table[i].cost_calculation)\n        reinforcement_cost += float(reinforcement_table[i].cost_calculation)\n\n    material_table = db(db.installation_material_used_in_design.design_id == design_id).select()\n    for i in xrange(len(material_table)):\n        #print material_table[i].cost_calculation,parameter_value\n        material_table[i].cost_calculation=convert(material_table[i].cost_calculation,parameter_value)\n        material_table[i].cost_calculation=Infix(material_table[i].cost_calculation)\n        material_cost += float(material_table[i].cost_calculation)\n\n    HAA_table = db(db.hardware_and_accessories_used_in_design.design_id == design_id).select()\n    for i in xrange(len(HAA_table)):\n        #print HAA_table[i].cost_calculation,parameter_value\n        cost_value = Infix(convert(HAA_table[i].cost_calculation,parameter_value))\n        db.product_quotation_hardware_values.insert(product_in_quotation_id = product_id, hardware_and_accessories_used_in_design_id = HAA_table[i].id, quantity = HAA_table[i].quantity, hardware_and_accessories_cost = cost_value)\n        hardware_cost += float(cost_value)\n\n        db.choose_hardware.insert(product_in_quotation_id = product_id, hardware_id = HAA_table[i].hardware_and_accessories_id)\n\n    glass_table = db(db.glass_used_in_design.design_id == design_id).select()\n    for i in xrange(len(glass_table)):\n        #print glass_table[i].width_calculation,parameter_value\n        width_value = Infix(convert(glass_table[i].width_calculation,parameter_value))\n        height_value = Infix(convert(glass_table[i].height_calculation,parameter_value))\n        cost_value = Infix(convert(glass_table[i].cost_calculation,parameter_value))\n        db.product_quotation_glass_values.insert(product_in_quotation_id = product_id, glass_used_in_design_id = glass_table[i].id, width = width_value, height = height_value, quantity = glass_table[i].quantity, glass_cost = cost_value)\n        glass_cost += float(cost_value)\n\n    extra_information_table = db(db.extra_information_in_design.design_id == design_id).select()\n    for i in xrange(len(extra_information_table)):\n        value = None\n        if extra_information_table[i].calculation:\n            #print extra_information_table[i].calculation,parameter_value\n            value = Infix(convert(extra_information_table[i].calculation,parameter_value))\n        db.product_quotation_extra_information_values.insert(product_in_quotation_id = product_id, extra_information_in_design_id = extra_information_table[i].id, default_value = extra_information_table[i].default_value, extra_information_value = value)\n\n    product.profile_cost = profile_cost\n    product.reinforcement_cost = reinforcement_cost\n    product.hardware_and_accessories_cost = hardware_cost\n    product.glass_cost = glass_cost\n    product.installation_material_cost = material_cost\n    product.total_value = product.profile_cost + product.reinforcement_cost + product.hardware_and_accessories_cost + product.glass_cost + product.installation_material_cost + product.fabrication_cost + product.installation_cost\n    product.total_value = product.total_value*product.quantity\n    product.final_value = product.total_value + product.total_value*(profit_margin_table.percentage/100)\n    product.total_value_per_piece = product.final_value/product.quantity\n    product.update_record()\n\n    redirect(URL(\'view_quotation_product.html\',vars=dict(entry_id = product_id)))\n    return dict()\n\n@auth.requires_login()\ndef view_quotation_product():\n    product_id = request.vars.entry_id\n    product_table = db(db.product_in_quotation.id == product_id).select()\n    product = product_table[0]\n    design_id = product.design_id\n    document_id = product.document_id\n    design_table = db(db.design.id == design_id).select()\n    document = db(db.documents.id == document_id).select()[0]\n    project_id = document.project_id\n    parameter_values_table = db(db.product_quotation_parameter_values.product_in_quotation_id == product_id).select(orderby=db.design_parameters.id)\n\n\n    profit_table = db(db.profit_margin_table.id >= 0).select()\n    profit_name = db(db.profit_margin_table.id == product.profit_margin_id).select()[0]\n    profit_id = profit_name.id\n    profit_percentage = profit_name.percentage\n    profit_name = profit_name.name\n    parameter_table = db(db.product_quotation_parameter_values.product_in_quotation_id == product_id).select(join = db.product_quotation_parameter_values.on(db.design_parameters.id == db.product_quotation_parameter_values.design_parameter_id),orderby=db.design_parameters.id)\n    parameter_value = []\n    for i in parameter_table:\n        parameter_value.append(str(i.product_quotation_parameter_values.parameter_value))\n\n    HAA_values = db((db.product_quotation_hardware_values.product_in_quotation_id == product_id) & (db.product_quotation_hardware_values.hardware_and_accessories_used_in_design_id == db.hardware_and_accessories_used_in_design.id) & (db.hardware_and_accessories_used_in_design.hardware_and_accessories_id == db.hardware_and_accessories.id)).select()\n    glass_values = db((db.product_quotation_glass_values.product_in_quotation_id == product_id) & (db.product_quotation_glass_values.glass_used_in_design_id == db.glass_used_in_design.id) & (db.glass_used_in_design.glass_id == db.glass.id)).select()\n    extra_values = db((db.product_quotation_extra_information_values.product_in_quotation_id == product_id) & (db.product_quotation_extra_information_values.extra_information_in_design_id == db.extra_information_in_design.id)).select()\n\n    # HAA_values = db(db.product_quotation_hardware_values.product_in_quotation_id == product_id).select()\n    # glass_values = db(db.product_quotation_glass_values.product_in_quotation_id == product_id).select()\n    # extra_values = db(db.product_quotation_extra_information_values.product_in_quotation_id == product_id).select()\n\n    #profile_table = db(db.profile_used_in_design.design_id == design_id).select()\n    profile_table = db(db.profile_used_in_design.design_id == design_id).select(join = db.profile_used_in_design.on(db.profile.id == db.profile_used_in_design.profile_id))\n    for i in xrange(len(profile_table)):\n        #print profile_table[i].length_calculation,parameter_value\n        #length_value = Infix(convert(profile_table[i].lprofile_used_in_design.ength_calculation,parameter_value))\n        profile_table[i].profile_used_in_design.length_calculation=convert(profile_table[i].profile_used_in_design.length_calculation,parameter_value)\n        profile_table[i].profile_used_in_design.length_calculation=Infix(profile_table[i].profile_used_in_design.length_calculation)\n        profile_table[i].profile_used_in_design.cost_calculation=convert(profile_table[i].profile_used_in_design.cost_calculation,parameter_value)\n        profile_table[i].profile_used_in_design.cost_calculation=Infix(profile_table[i].profile_used_in_design.cost_calculation)\n\n    #reinforcement_table = db(db.reinforcement_used_in_design.design_id == design_id).select()\n    reinforcement_table = db(db.reinforcement_used_in_design.design_id == design_id).select(join = db.reinforcement_used_in_design.on(db.reinforcement.id == db.reinforcement_used_in_design.reinforcement_id))\n    for i in xrange(len(reinforcement_table)):\n        #print reinforcement_table[i].length_calculation,parameter_value\n        reinforcement_table[i].reinforcement_used_in_design.length_calculation=convert(reinforcement_table[i].reinforcement_used_in_design.length_calculation,parameter_value)\n        reinforcement_table[i].reinforcement_used_in_design.length_calculation=Infix(reinforcement_table[i].reinforcement_used_in_design.length_calculation)\n        reinforcement_table[i].reinforcement_used_in_design.cost_calculation=convert(reinforcement_table[i].reinforcement_used_in_design.cost_calculation,parameter_value)\n        reinforcement_table[i].reinforcement_used_in_design.cost_calculation=Infix(reinforcement_table[i].reinforcement_used_in_design.cost_calculation)\n\n    #material_table = db(db.installation_material_used_in_design.design_id == design_id).select()\n    material_table = db(db.installation_material_used_in_design.design_id == design_id).select(join = db.installation_material_used_in_design.on(db.installation_material.id == db.installation_material_used_in_design.installation_material_id))\n    for i in xrange(len(material_table)):\n        #print material_table[i].cost_calculation,parameter_value\n        material_table[i].installation_material_used_in_design.cost_calculation=convert(material_table[i].installation_material_used_in_design.cost_calculation,parameter_value)\n        material_table[i].installation_material_used_in_design.cost_calculation=Infix(material_table[i].installation_material_used_in_design.cost_calculation)\n\n    profile_names = db(db.profile_used_in_design.design_id == design_id).select(join = db.profile_used_in_design.on(db.profile.id == db.profile_used_in_design.profile_id))\n    reinforcement_names = db(db.reinforcement_used_in_design.design_id == design_id).select(join = db.reinforcement_used_in_design.on(db.reinforcement.id == db.reinforcement_used_in_design.reinforcement_id))\n    HAA_names = db(db.hardware_and_accessories_used_in_design.design_id == design_id).select(join = db.hardware_and_accessories_used_in_design.on(db.hardware_and_accessories.id == db.hardware_and_accessories_used_in_design.hardware_and_accessories_id))\n    glass_names = db(db.glass_used_in_design.design_id == design_id).select(join = db.glass_used_in_design.on(db.glass.id == db.glass_used_in_design.glass_id))\n    material_names = db(db.installation_material_used_in_design.design_id == design_id).select(join = db.installation_material_used_in_design.on(db.installation_material.id == db.installation_material_used_in_design.installation_material_id))\n    extra_information_table = db(db.extra_information_in_design.design_id == design_id).select()\n\n    return dict(product_id = product_id, project_id = project_id, document = document, profit_table = profit_table, profit_percentage = profit_percentage, profit_name = profit_name, profit_id = profit_id, parameter_table = parameter_table, product_table = product_table, design_id = design_id, design_table = design_table, profile_table = profile_table, profile_names = profile_names, reinforcement_table = reinforcement_table, reinforcement_names = reinforcement_names, HAA_table = HAA_values, HAA_names = HAA_names, glass_table = glass_values, glass_names = glass_names, material_table = material_table, material_names = material_names, extra_information_table = extra_information_table, extra_values = extra_values)\n\n@auth.requires_login()\ndef update_product_quotation():\n    variables=request.vars\n    product_id = variables.product_id\n    product_table = db(db.product_in_quotation.id == product_id).select()\n    product = db(db.product_in_quotation.id == product_id).select()[0]\n    design_id = product.design_id\n    document_id = product.document_id\n    document = db(db.documents.id == document_id).select()[0]\n    project_id = document.project_id\n    project = db(db.project.id == project_id).select()[0]\n\n    #profile_values = db(db.profile_values.product_id == product_id).select()\n    #reinforcement_values = db(db.reinforcement_values.product_id == product_id).select()\n    HAA_values = db(db.product_quotation_hardware_values.product_in_quotation_id == product_id).select()\n    glass_values = db(db.product_quotation_glass_values.product_in_quotation_id == product_id).select()\n    #material_values = db(db.installation_material_values.product_id == product_id).select()\n    extra_values = db(db.product_quotation_extra_information_values.product_in_quotation_id == product_id).select(join = db.product_quotation_extra_information_values.on(db.extra_information_in_design.id == db.product_quotation_extra_information_values.extra_information_in_design_id))\n    #extra_information_table = db(db.extra_information_in_design.design_id == design_id).select()\n\n    i=0\n    flag=0\n    for row in product_table:\n        profit_margin_table = db(db.profit_margin_table.id == row.profit_margin_id).select()[0]\n\n        name="name_"+str(i)\n        row.name=variables[name]\n        name="quantity_"+str(i)\n        row.quantity=variables[name]\n\n        name="profile_cost_"+str(i)\n        row.profile_cost=variables[name]\n        name="reinforcement_cost_"+str(i)\n        row.reinforcement_cost=variables[name]\n        name="hardware_and_accessories_cost_"+str(i)\n        row.hardware_and_accessories_cost=variables[name]\n        name="product_glass_cost_"+str(i)\n        row.glass_cost=variables[name]\n        name="installation_material_cost_"+str(i)\n        row.installation_material_cost=variables[name]\n        name="fabrication_cost_"+str(i)\n        row.fabrication_cost=variables[name]\n        name="installation_cost_"+str(i)\n        row.installation_cost=variables[name]\n\n        row.total_value = float(row.profile_cost) + float(row.reinforcement_cost) + float(row.hardware_and_accessories_cost) + float(row.glass_cost) + float(row.installation_material_cost) + float(row.fabrication_cost) + float(row.installation_cost)\n        row.total_value = row.total_value*int(row.quantity)\n        row.final_value = row.total_value + row.total_value*(profit_margin_table.percentage/100)\n        row.total_value_per_piece = row.final_value/float(row.quantity)\n\n        row.update_record()\n        i=i+1\n\n    """i=0\n    for row in profile_values:\n        name="profile_position_"+str(i)\n        row.profile_position=variables[name]\n\n        name="profile_cut_"+str(i)\n        row.cut=variables[name]\n\n        name="profile_quantity_"+str(i)\n        row.length_value=variables[name]\n\n        name="profile_length_"+str(i)\n        row.quantity=variables[name]\n\n        name="profile_cost_"+str(i)\n        row.profile_cost=variables[name]\n\n        row.update_record()\n        i=i+1\n\n    i=0\n    for row in reinforcement_values:\n        name="reinforcement_length_"+str(i)\n        row.length_value=variables[name]\n\n        name="reinforcement_quantity_"+str(i)\n        row.quantity=variables[name]\n\n        name="reinforcement_cost_"+str(i)\n        row.reinforcment_cost=variables[name]\n\n        row.update_record()\n        i=i+1"""\n\n    i=0\n    for row in HAA_values:\n        name="HAA_quantity_"+str(i)\n        row.quantity=variables[name]\n\n        name="HAA_cost_"+str(i)\n        row.hardware_and_accessories_cost=variables[name]\n\n        row.update_record()\n        i=i+1\n\n    i=0\n    for row in glass_values:\n        name="glass_width_"+str(i)\n        row.width=variables[name]\n\n        name="glass_height_"+str(i)\n        row.height=variables[name]\n\n        name="glass_quantity_"+str(i)\n        row.quantity=variables[name]\n\n        name="glass_cost_"+str(i)\n        row.glass_cost=variables[name]\n\n        row.update_record()\n        i=i+1\n\n    """i=0\n    for row in material_values:\n        name="material_quantity_"+str(i)\n        row.quantity=variables[name]\n\n        name="material_cost_"+str(i)\n        row.installation_material_cost=variables[name]\n\n        row.update_record()\n        i=i+1"""\n\n    i=0\n    for row in extra_values:\n        if row.extra_information_in_design.default_value:\n            name="extra_information_calculation_"+str(i)\n            row.product_quotation_extra_information_values.default_value=variables[name]\n        elif row.extra_information_in_design.calculation:\n            name="extra_information_calculation_"+str(i)\n            row.product_quotation_extra_information_values.extra_information_value=variables[name]\n\n        row.product_quotation_extra_information_values.update_record()\n        i=i+1\n\n    db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated product\' + product.name + \' in quotation \' + document.name + \' of project \' + project.name, log_time = datetime.datetime.now())\n    redirect(URL(\'view_quotation_product.html\',vars=dict(entry_id = product_id)))\n\n@auth.requires_login()\ndef update_parameters_quotation():\n    product_id = request.vars.product_id\n    product = db(db.product_in_quotation.id == product_id).select()\n    sel = []\n    for i in product:\n        sel=db(db.design_parameters.design_id == i.design_id).select(orderby=db.design_parameters.id)\n    parameters={}\n    parameters=collections.OrderedDict(sorted(parameters.items()))\n    for row in sel:\n        parameters[row.id]=row.name+\'(\'+row.codename+\')\'\n    return dict(parameters = parameters, product_id = product_id)\n@auth.requires_login()\ndef update_parameters_quotation_helper():\n    product_id=request.vars.product_id\n    product_parameters = db(db.product_quotation_parameter_values.product_in_quotation_id==product_id).select(orderby=db.product_quotation_parameter_values.design_parameter_id)\n    product = db(db.product_in_quotation.id == product_id).select()[0]\n    document = db(db.documents.id == product.document_id).select()[0]\n    project = db(db.project.id == document.project_id).select()[0]\n    parameters=request.vars\n    del parameters[\'product_id\']\n    for param in product_parameters:\n        param.delete_record()\n    for parameter in parameters:\n        db.product_quotation_parameter_values.insert(product_in_quotation_id=product_id,design_parameter_id=parameter,parameter_value=parameters[parameter])\n    db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' Updated product\' + product.name + \' in document \' + document.name + \' of project \' + project.name, log_time = datetime.datetime.now())\n    redirect(URL(\'calculate_quotation_product\',vars=dict(entry_id = product_id, flag = 1)))\n    return dict()\n\n@auth.requires_login()\ndef change_profit():\n    product_id = request.vars.product_id\n    product=db(db.product_in_quotation.id==product_id).select()[0]\n    form=[]\n    old_name = db(db.profit_margin_table.id == product.profit_margin_id).select()[0].name\n    old_name = old_name.name\n    form = SQLFORM(db.product_in_quotation, product_id, fields=[\'profit_margin_id\'],showid = False)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        percentage = db(db.profit_margin_table.id == form.vars.profit_margin_id).select()[0]\n        product.final_value = product.total_value + product.total_value*(percentage.percentage/100)\n        product.total_value_per_piece = product.final_value/float(product.quantity)\n        product.update_record()\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated profit margin entry of product\' + product.name + \' from \' + old_name + \' to \' + percentage.name, log_time = datetime.datetime.now())\n        redirect(URL(\'view_quotation_product.html\',vars = dict(entry_id = product_id)))\n    elif form.errors:\n       response.flash = \'form has errors\'\n    else:\n       response.flash = \'please update\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef delete_quotation_product_helper():\n    document_id = request.vars.document_id\n    document = db(db.documents.id == document_id).select()[0]\n    project = db(db.project.id == document.project_id).select()[0]\n    product_list = []\n    for var in request.vars:\n        try:\n            product_list.append(int(var))\n        except:\n            pass\n    delete_list = db((db.product_in_quotation.id >= 0) & (db.product_in_quotation.id.belongs(product_list))).select()\n    for product in delete_list:\n        #Deleting Products and associated entries\n        design_parameters_values_list = db(db.product_quotation_parameter_values.product_in_quotation_id == product.id).select()\n        for parameter in design_parameters_values_list:\n            parameter.delete_record()\n\n        hardware_and_accessories_values_list = db(db.product_quotation_hardware_values.product_in_quotation_id == product.id).select()\n        for hardware in hardware_and_accessories_values_list:\n            hardware.delete_record()\n\n        glass_values_list = db(db.product_quotation_glass_values.product_in_quotation_id == product.id).select()\n        for glass in glass_values_list:\n            glass.delete_record()\n\n        extra_information_values_list = db(db.product_quotation_extra_information_values.product_in_quotation_id == product.id).select()\n        for info in extra_information_values_list:\n            info.delete_record()\n\n        parameter_table = db(db.choose_design_parameters.product_in_quotation_id == product.id).select()\n        for i in parameter_table:\n            i.delete_record()\n        profile_table = db(db.choose_profile.product_in_quotation_id == product.id).select()\n        for i in profile_table:\n            i.delete_record()\n        reinforcement_table = db(db.choose_reinforcement.product_in_quotation_id == product.id).select()\n        for i in reinforcement_table:\n            i.delete_record()\n        HAA_table = db(db.choose_hardware.product_in_quotation_id == product.id).select()\n        for i in HAA_table:\n            i.delete_record()\n        glass_table = db(db.choose_glass.product_in_quotation_id == product.id).select()\n        for i in glass_table:\n            i.delete_record()\n        material_table = db(db.choose_material.product_in_quotation_id == product.id).select()\n        for i in material_table:\n            i.delete_record()\n        extra_info_table = db(db.choose_extra.product_in_quotation_id == product.id).select()\n        for i in extra_info_table:\n            i.delete_record()\n\n        product.delete_record()\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' removed product entry \' + product.name + \' in quotation \' + document.name + \' of project \' + project.name, log_time = datetime.datetime.now())\n    redirect(URL(\'generate_quotation_details.html\', vars = dict(document_id = document_id)))\n    response.flash = \'Success\'\n    return dict()\n\n@auth.requires_login()\ndef generate_quotation_parameters():\n    product_id = request.vars.product_id\n    product = db(db.product_in_quotation.id == product_id).select()[0]\n    document_id = product.document_id\n    document = db(db.documents.id == document_id).select()[0]\n    project_id = document.project_id\n    design_id = product.design_id\n    parameter_table = db(db.product_quotation_parameter_values.product_in_quotation_id == product_id).select(join = db.product_quotation_parameter_values.on(db.design_parameters.id == db.product_quotation_parameter_values.design_parameter_id))\n    temp = {}\n    for i in parameter_table:\n        try:\n            temp[i.design_parameters.id]\n        except:\n            temp[i.design_parameters.id] = i\n    parameter_table = temp.values()\n    """parameter_values_table = db(db.product_quotation_parameter_values.product_in_quotation_id == product_id).select()\n    parameter_value = []\n    for i in parameter_values_table:\n        parameter_value.append(str(i.parameter_value))"""\n\n    choose_params = db(db.choose_design_parameters.product_in_quotation_id == product_id).select(db.choose_design_parameters.param_id)\n    choose_params = [d[\'param_id\'] for d in choose_params.as_list()]\n    choose_profile = db(db.choose_profile.product_in_quotation_id == product_id).select(db.choose_profile.pro_id)\n    choose_profile = [d[\'pro_id\'] for d in choose_profile.as_list()]\n    choose_reinforcement = db(db.choose_reinforcement.product_in_quotation_id == product_id).select(db.choose_reinforcement.rein_id)\n    choose_reinforcement = [d[\'rein_id\'] for d in choose_reinforcement.as_list()]\n    choose_hardware = db(db.choose_hardware.product_in_quotation_id == product_id).select(db.choose_hardware.hardware_id)\n    choose_hardware = [d[\'hardware_id\'] for d in choose_hardware.as_list()]\n    choose_glass = db(db.choose_glass.product_in_quotation_id == product_id).select(db.choose_glass.glas_id)\n    choose_glass = [d[\'glas_id\'] for d in choose_glass.as_list()]\n    choose_material = db(db.choose_material.product_in_quotation_id == product_id).select(db.choose_material.material_id)\n    choose_material = [d[\'material_id\'] for d in choose_material.as_list()]\n    choose_extra = db(db.choose_extra.product_in_quotation_id == product_id).select(db.choose_extra.extra_info_id)\n    choose_extra = [d[\'extra_info_id\'] for d in choose_extra.as_list()]\n\n    profile_names = db(db.profile_used_in_design.design_id == design_id).select(join = db.profile_used_in_design.on(db.profile.id == db.profile_used_in_design.profile_id))\n    temp = {}\n    for i in profile_names:\n        try:\n            temp[i.profile.id]\n        except:\n            temp[i.profile.id] = i\n    profile_names = temp.values()\n    reinforcement_names = db(db.reinforcement_used_in_design.design_id == design_id).select(join = db.reinforcement_used_in_design.on(db.reinforcement.id == db.reinforcement_used_in_design.reinforcement_id))\n    temp = {}\n    for i in reinforcement_names:\n        try:\n            temp[i.reinforcement.id]\n        except:\n            temp[i.reinforcement.id] = i\n    reinforcement_names = temp.values()\n    HAA_names = db(db.hardware_and_accessories_used_in_design.design_id == design_id).select(join = db.hardware_and_accessories_used_in_design.on(db.hardware_and_accessories.id == db.hardware_and_accessories_used_in_design.hardware_and_accessories_id))\n    temp = {}\n    for i in HAA_names:\n        try:\n            temp[i.hardware_and_accessories.id]\n        except:\n            temp[i.hardware_and_accessories.id] = i\n    HAA_names = temp.values()\n    glass_names = db(db.glass_used_in_design.design_id == design_id).select(join = db.glass_used_in_design.on(db.glass.id == db.glass_used_in_design.glass_id))\n    temp = {}\n    for i in glass_names:\n        try:\n            temp[i.glass.id]\n        except:\n            temp[i.glass.id] = i\n    glass_names = temp.values()\n    material_names = db(db.installation_material_used_in_design.design_id == design_id).select(join = db.installation_material_used_in_design.on(db.installation_material.id == db.installation_material_used_in_design.installation_material_id))\n    temp = {}\n    for i in material_names:\n        try:\n            temp[i.installation_material.id]\n        except:\n            temp[i.installation_material.id] = i\n    material_names = temp.values()\n    extra_table = db(db.product_quotation_extra_information_values.product_in_quotation_id == product_id).select(join = db.product_quotation_extra_information_values.on(db.extra_information_in_design.id == db.product_quotation_extra_information_values.extra_information_in_design_id))\n    temp = {}\n    for i in extra_table:\n        try:\n            temp[i.extra_information_in_design.id]\n        except:\n            temp[i.extra_information_in_design.id] = i\n    extra_table = temp.values()\n    return dict(product=product, document=document, project_id=project_id, parameter_table=parameter_table, profile_names=profile_names, reinforcement_names=reinforcement_names, HAA_names=HAA_names, glass_names=glass_names, material_names=material_names, extra_table=extra_table, choose_params=choose_params, choose_profile=choose_profile, choose_reinforcement=choose_reinforcement, choose_hardware=choose_hardware, choose_glass=choose_glass, choose_material = choose_material, choose_extra=choose_extra)\n\n@auth.requires_login()\ndef update_quotation_parameters():\n    params = request.vars.parameter\n    profiles = request.vars.profile\n    reinforcements = request.vars.reinforcement\n    haas = request.vars.hardware\n    glasses = request.vars.glass\n    materials = request.vars.material\n    extras = request.vars.extra\n    product_id = request.vars.product_id\n\n    #Deleting entries\n    parameter_table = db(db.choose_design_parameters.product_in_quotation_id == product_id).select()\n    for i in parameter_table:\n        i.delete_record()\n    profile_table = db(db.choose_profile.product_in_quotation_id == product_id).select()\n    for i in profile_table:\n        i.delete_record()\n    reinforcement_table = db(db.choose_reinforcement.product_in_quotation_id == product_id).select()\n    for i in reinforcement_table:\n        i.delete_record()\n    HAA_table = db(db.choose_hardware.product_in_quotation_id == product_id).select()\n    for i in HAA_table:\n        i.delete_record()\n    glass_table = db(db.choose_glass.product_in_quotation_id == product_id).select()\n    for i in glass_table:\n        i.delete_record()\n    material_table = db(db.choose_material.product_in_quotation_id == product_id).select()\n    for i in material_table:\n        i.delete_record()\n    extra_info_table = db(db.choose_extra.product_in_quotation_id == product_id).select()\n    for i in extra_info_table:\n        i.delete_record()\n\n    #Adding new entries\n    if params != None:\n        if type(params) is not ListType:\n            temp = params\n            params = []\n            params.append(temp)\n        for i in params:\n            db.choose_design_parameters.insert(product_in_quotation_id = product_id, param_id = i)\n    if profiles != None:\n        if type(profiles) is not ListType:\n            temp = profiles\n            profiles = []\n            profiles.append(temp)\n        for i in profiles:\n            db.choose_profile.insert(product_in_quotation_id = product_id, pro_id = i)\n    if reinforcements != None:\n        if type(reinforcements) is not ListType:\n            temp = reinforcements\n            reinforcements = []\n            reinforcements.append(temp)\n        for i in reinforcements:\n            db.choose_reinforcement.insert(product_in_quotation_id = product_id, rein_id = i)\n    if haas != None:\n        if type(haas) is not ListType:\n            temp = haas\n            haas = []\n            haas.append(temp)\n        for i in haas:\n            db.choose_hardware.insert(product_in_quotation_id = int(product_id), hardware_id = int(i))\n    if glasses != None:\n        if type(glasses) is not ListType:\n            temp = glasses\n            glasses = []\n            glasses.append(temp)\n        for i in glasses:\n            db.choose_glass.insert(product_in_quotation_id = int(product_id), glas_id = int(i))\n    if materials != None:\n        if type(materials) is not ListType:\n            temp = materials\n            materials = []\n            materials.append(temp)\n        for i in materials:\n            db.choose_material.insert(product_in_quotation_id = product_id, material_id = i)\n    if extras != None:\n        if type(extras) is not ListType:\n            temp = extras\n            extras = []\n            extras.append(temp)\n        for i in extras:\n            db.choose_extra.insert(product_in_quotation_id = product_id, extra_info_id = i)\n    redirect(URL(\'view_quotation_product.html\',vars = dict(entry_id = product_id)))\n    return dict()\n\n@auth.requires_login()\ndef tax_discount():\n    document_id = request.vars.document_id\n    return dict(document_id = document_id)\n\n#Glass\n@auth.requires_login()\ndef generate_quotation():\n    LEFT_MARGIN = 2\n    RIGHT_MARGIN = 2\n    FIRST_TOP_MARGIN = 5\n    TOP_MARGIN = 7\n    FONT_SIZE = 14\n    IMAGE_WIDTH = 185\n    IMAGE_HEIGHT = 25\n    HEADER_WIDTH = 185\n    HEADER_HEIGHT = 7\n    HEADER_DETAILS_HEIGHT = 25\n    MAIN_BORDER_SIZE = 0.1\n    SMALL_FONT_SIZE = 11\n    DETAILS_FONT_SIZE = 9.5\n    GENERIC_CONTENT_HEIGHT = 25\n    PRODUCT_HEADER_HEIGHT = 7\n    PRODUCT_TABLE_WIDTH = 185\n    PRODUCT_TABLE_HEIGHT = 110\n    PRODUCT2_TABLE_HEIGHT = 110\n    PRODUCT_TABLE_START_X = 10\n    PRODUCT_TABLE_START_Y = 132\n    PRODUCT2_TABLE_START_Y = TOP_MARGIN\n    DETAILS_X = 50\n    DETAILS_VALUES_X = 75\n    QTY_X = 120\n    RATE_X = 140\n    AMOUNT_X = 165\n    DESIGN_IMAGE_WIDTH = 35\n    DESIGN_IMAGE_HEIGHT = 40\n    LINE_WIDTH = 4\n    FINAL_TABLE_HEIGHT = 20\n    FINAL_TABLE_START_X = 90\n    FINAL_TABLE_WIDTH = PRODUCT_TABLE_WIDTH - FINAL_TABLE_START_X + 10\n    RUPEE_X = 145\n    FINAL_VALUES_X = 175\n    NUM_PRODUCTS_PER_PAGE = 2\n\n    document_id = request.vars.document_id\n    tax = request.vars.tax\n    discount = int(request.vars.discount)\n    cst = request.vars.cst\n    cst_check = request.vars.cst_check\n    total_tax = float(tax)\n    if cst_check != None:\n        total_tax += float(cst)\n    document = db(db.documents.id == document_id).select()[0]\n    project = db(db.project.id == document.project_id).select()[0]\n    org = db(db.organization.id == project.organization_id).select()[0]\n    products = db(db.product_in_quotation.document_id == document_id).select()\n    class PDF(FPDF):\n        def footer(self):\n            self.set_y(-10)\n            self.set_font(\'Times\', \'\', FONT_SIZE)\n            self.cell(0, 10, \'Page %s\' % self.page_no() + \' of  \' + \'{nb}\', 0, 0, \'C\')\n\n    pdf = PDF()\n    pdf.alias_nb_pages()\n    pdf.add_page()\n    pdf.set_margins(LEFT_MARGIN, FIRST_TOP_MARGIN, RIGHT_MARGIN)\n    pdf.set_font(\'Times\', \'\', FONT_SIZE)\n    pdf.image(x = 10, y = FIRST_TOP_MARGIN+2, name = \'./applications/Prime/static/images/letter_head.jpeg\', w = IMAGE_WIDTH, h = IMAGE_HEIGHT)\n    pdf.set_xy(158,32)\n    pdf.write(5,str(datetime.date.today().strftime(\'Date : %d-%m-%Y\')))\n    pdf.set_xy(10,32)\n    pdf.write(5,\'Quote No: \' + str(document.name))\n    pdf.set_xy(85,32)\n    pdf.write(5, \'Email: sales@primeupvc.com\')\n\n    #Header Box\n    pdf.set_fill_color(128,128,128)\n    pdf.set_xy(10,43)\n    pdf.set_line_width(MAIN_BORDER_SIZE)\n    pdf.set_text_color(255,255,255)\n    pdf.set_font(\'Times\', \'B\', FONT_SIZE)\n    pdf.cell(w = HEADER_WIDTH, h = HEADER_HEIGHT,border = 1,fill = 1,txt = \'To\',align = \'L\')\n    pdf.set_xy(100,44)\n    pdf.write(5, \'Deliver to\')\n    pdf.set_xy(10,50)\n    pdf.set_text_color(0,0,0)\n    pdf.cell(w = HEADER_WIDTH/2, h = HEADER_DETAILS_HEIGHT,border = \'BL\')\n    pdf.set_xy(10,50)\n    pdf.set_font_size(SMALL_FONT_SIZE)\n    pdf.multi_cell(w = HEADER_WIDTH/2, h = HEADER_DETAILS_HEIGHT/5,border = 0,fill = 0,txt = \'Name: \' + org.name + \'\\nAddress: \' + org.address,align = \'L\')\n    pdf.set_xy(10+HEADER_WIDTH/2,50)\n    pdf.set_font(\'Times\', \'\', FONT_SIZE)\n    pdf.cell(w = HEADER_WIDTH/2+1, h = HEADER_DETAILS_HEIGHT,border = \'BR\')\n    pdf.set_xy(10+HEADER_WIDTH/2,50)\n    pdf.set_font_size(SMALL_FONT_SIZE)\n    pdf.multi_cell(w = HEADER_WIDTH/2, h = HEADER_DETAILS_HEIGHT/5,border = 0,fill = 0,txt = project.address,align = \'L\')\n    pdf.set_font_size(FONT_SIZE)\n\n    #Generic Content\n    pdf.set_xy(10,78)\n    pdf.write(5,\'To,\\n\')\n    pdf.set_xy(10,83)\n    pdf.write(5,org.name + \',\\n\')\n    pdf.set_xy(10,93)\n    pdf.set_font_size(SMALL_FONT_SIZE)\n    pdf.write(5,\'Sub: Offer for supply of PRIME uPVC Doors & Windows\')\n    pdf.set_xy(10,102)\n    pdf.multi_cell(w = HEADER_WIDTH,h=GENERIC_CONTENT_HEIGHT/4.5,align = \'L\', txt = \'This is in reference to the discussion with your good selves, with regard to your requirement of PRIME uPVC windows for your prestigious project. We take this opportunity to introduce ourselves as manufacturer and supplier of PRIME uPVC doors and windows. It would be our pleasure to serve and associate with your esteemed origination.\')\n    pdf.set_xy(10,120)\n    pdf.write(5,\'We are pleased to submit our best offer for the following items.\')\n\n    #First Product\n    count = 0\n    total = 0\n    total_area = 0\n    if len(products) > 0:\n        design = db(db.design.id == products[0].design_id).select()[0]\n        product_id = products[0].id\n        choose_params = db(db.choose_design_parameters.product_in_quotation_id == product_id).select()\n        params = []\n        product_width = None\n        product_height = None\n        for i in choose_params:\n            temp = db((db.product_quotation_parameter_values.design_parameter_id == i.param_id) & (db.product_quotation_parameter_values.product_in_quotation_id == product_id)).select(join = db.product_quotation_parameter_values.on(db.design_parameters.id == db.product_quotation_parameter_values.design_parameter_id))\n            params.append(temp[0])\n            if temp[0].design_parameters.name.lower() == \'width\':\n                product_width = temp[0].product_quotation_parameter_values.parameter_value\n            elif temp[0].design_parameters.name.lower() == \'height\':\n                product_height = temp[0].product_quotation_parameter_values.parameter_value\n        choose_profile = db(db.choose_profile.product_in_quotation_id == product_id).select(join = db.choose_profile.on(db.profile.id == db.choose_profile.pro_id))\n        choose_reinforcement = db(db.choose_reinforcement.product_in_quotation_id == product_id).select(join = db.choose_reinforcement.on(db.reinforcement.id == db.choose_reinforcement.rein_id))\n        choose_hardware = db(db.choose_hardware.product_in_quotation_id == product_id).select(join = db.choose_hardware.on(db.hardware_and_accessories.id == db.choose_hardware.hardware_id))\n        choose_glass = db(db.choose_glass.product_in_quotation_id == product_id).select(join = db.choose_glass.on(db.glass.id == db.choose_glass.glas_id))\n        choose_material = db(db.choose_material.product_in_quotation_id == product_id).select(join = db.choose_material.on(db.installation_material.id == db.choose_material.material_id))\n        choose_extra = db(db.choose_extra.product_in_quotation_id == product_id).select()\n        extra = []\n        for i in choose_extra:\n            temp = db(db.product_quotation_extra_information_values.extra_information_in_design_id == i.extra_info_id).select(join = db.product_quotation_extra_information_values.on(db.extra_information_in_design.id == db.product_quotation_extra_information_values.extra_information_in_design_id))\n            extra.append(temp[0])\n\n        #Header\n        pdf.set_xy(PRODUCT_TABLE_START_X,PRODUCT_TABLE_START_Y)\n        pdf.set_fill_color(128,128,128)\n        pdf.set_text_color(255,255,255)\n        pdf.set_font(\'Times\', \'B\', FONT_SIZE)\n        pdf.cell(w = PRODUCT_TABLE_WIDTH, h = PRODUCT_HEADER_HEIGHT,border = 1,fill = 1,txt = \'Sales Line\',align = \'L\')\n        pdf.set_xy(DETAILS_X,PRODUCT_TABLE_START_Y+1)\n        pdf.write(5, \'Details\')\n        pdf.set_xy(QTY_X,PRODUCT_TABLE_START_Y+1)\n        pdf.write(5, \'Qty\')\n        pdf.set_xy(RATE_X,PRODUCT_TABLE_START_Y+1)\n        pdf.write(5, \'Rate(Rs.)\')\n        pdf.set_xy(AMOUNT_X,PRODUCT_TABLE_START_Y+1)\n        pdf.write(5, \'Amount(Rs.)\')\n        pdf.set_text_color(0,0,0)\n        pdf.set_font(\'Times\', \'\', SMALL_FONT_SIZE)\n        pdf.set_xy(PRODUCT_TABLE_START_X,PRODUCT_TABLE_START_Y+PRODUCT_HEADER_HEIGHT)\n        pdf.cell(w = PRODUCT_TABLE_WIDTH, h = PRODUCT_HEADER_HEIGHT,border = \'BLR\',fill = 0,txt = str(1),align = \'L\')\n\n        #Header Details and Image\n        pdf.set_xy(DETAILS_X,PRODUCT_TABLE_START_Y+PRODUCT_HEADER_HEIGHT+1)\n        pdf.write(5, products[0].name)\n        pdf.set_xy(10,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT)\n        pdf.cell(w = PRODUCT_TABLE_WIDTH, h = PRODUCT_TABLE_HEIGHT, border=\'BLR\')\n        pdf.set_xy(12,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+5)\n        pdf.image(\'./applications/Prime/uploads/\' + design.design_image,w = DESIGN_IMAGE_WIDTH,h = DESIGN_IMAGE_HEIGHT)\n\n        #Product Details\n        pdf.set_xy(DETAILS_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+5)\n        pdf.set_font_size(DETAILS_FONT_SIZE)\n        pdf.multi_cell(w=QTY_X-DETAILS_X-5, h=3.25, txt=design.description, border=0, align=\'L\')\n        pdf.set_x(DETAILS_X)\n        pdf.write(LINE_WIDTH,\'\\n\')\n        pdf.set_x(DETAILS_X)\n        pdf.write(LINE_WIDTH,str(product_width) + \'w x \' + str(product_height) + \'h (\' + str(product_width*product_height) + \' sqft)\\n\')\n        pdf.set_x(DETAILS_X)\n        pdf.write(LINE_WIDTH,\'Glass\')\n        pdf.set_x(DETAILS_VALUES_X)\n        pdf.write(LINE_WIDTH,\'<Glass>\\n\')\n        for i in params:\n            if i.design_parameters.name.lower() != \'width\' and i.design_parameters.name.lower() != \'height\':\n                pdf.set_x(DETAILS_X)\n                pdf.write(LINE_WIDTH,i.design_parameters.name)\n                pdf.set_x(DETAILS_VALUES_X)\n                pdf.write(LINE_WIDTH,str(i.product_quotation_parameter_values.parameter_value) + \'\\n\')\n        for i in extra:\n            pdf.set_x(DETAILS_X)\n            pdf.write(LINE_WIDTH,i.extra_information_in_design.name)\n            pdf.set_x(DETAILS_VALUES_X)\n            if i.product_quotation_extra_information_values.default_value:\n                pdf.write(LINE_WIDTH,str(i.product_quotation_extra_information_values.default_value) + \'\\n\')\n            else:\n                pdf.write(LINE_WIDTH,str(i.product_quotation_extra_information_values.extra_information_value) + \'\\n\')\n        for i in choose_profile:\n            pdf.set_x(DETAILS_X)\n            pdf.write(LINE_WIDTH,i.profile.name)\n            pdf.set_x(DETAILS_VALUES_X)\n            pdf.write(LINE_WIDTH,i.profile.profile_code + \'\\n\')\n        for i in choose_hardware:\n            pdf.set_x(DETAILS_X)\n            pdf.write(LINE_WIDTH,i.hardware_and_accessories.name)\n            pdf.set_x(DETAILS_VALUES_X)\n            pdf.write(LINE_WIDTH,i.hardware_and_accessories.description + \'\\n\')\n        for i in choose_reinforcement:\n            pdf.set_x(DETAILS_X)\n            pdf.write(LINE_WIDTH,i.reinforcement.name)\n            pdf.set_x(DETAILS_VALUES_X)\n            pdf.write(LINE_WIDTH,i.reinforcement.description + \'\\n\')\n        for i in choose_material:\n            pdf.set_x(DETAILS_X)\n            pdf.write(LINE_WIDTH,i.installation_material.name)\n            pdf.set_x(DETAILS_VALUES_X)\n            pdf.write(LINE_WIDTH,i.installation_material.description + \'\\n\')\n\n        #Qty,Rate and Amount\n        pdf.line(QTY_X-5,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT,QTY_X-5,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT)\n        pdf.line(RATE_X-5,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT,RATE_X-5,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT)\n        pdf.line(AMOUNT_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT,AMOUNT_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT)\n        pdf.set_xy(QTY_X+2,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+5)\n        pdf.write(10,str(products[0].quantity))\n        pdf.set_xy(RATE_X+2,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+5)\n        pdf.write(10,str(round(products[0].total_value_per_piece,2)))\n        pdf.set_xy(AMOUNT_X+5,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+7.5)\n        pdf.write(5,str(round(products[0].final_value,2)) + \'\\n\')\n        pdf.set_x(AMOUNT_X+5)\n        pdf.write(5, \'(\' + str(round(products[0].final_value/product_width/product_height/products[0].quantity,2)) + \'/sqft)\\n\')\n\n        total += products[0].final_value\n        count += products[0].quantity\n        total_area += (product_width*product_height)*products[0].quantity\n\n        if len(products) == 1:\n            temp = total*(1-float(discount)/100)\n            val = temp*(1+total_tax/100)\n\n            #Final Table\n            pdf.set_xy(FINAL_TABLE_START_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT)\n            pdf.cell(FINAL_TABLE_WIDTH,FINAL_TABLE_HEIGHT,border=\'BLR\')\n            pdf.set_xy(FINAL_TABLE_START_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+1)\n            pdf.set_font(\'Times\',\'B\',SMALL_FONT_SIZE)\n            pdf.write(3,\'Total\\n\')\n            pdf.set_xy(FINAL_TABLE_START_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+17)\n            pdf.write(3,\'Grand Total\')\n            pdf.set_xy(RUPEE_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+1)\n            pdf.write(3,\'Rs.\\n\')\n            pdf.set_xy(RUPEE_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+17)\n            pdf.write(3,\'Rs.\')\n            pdf.set_xy(FINAL_VALUES_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+1)\n            pdf.write(3,str(round(total,2)) + \'\\n\')\n            pdf.set_xy(FINAL_VALUES_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+17)\n            pdf.write(3,str(round(val,2)))\n            pdf.set_font(\'Times\',\'\',SMALL_FONT_SIZE)\n            pdf.set_xy(FINAL_TABLE_START_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+6)\n            pdf.write(3,\'Discount (\' + str(discount) + \'%)\\n\')\n            pdf.set_xy(FINAL_TABLE_START_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+11.5)\n            pdf.write(3,\'Excise (\' + str(total_tax) + \'%)\\n\')\n            pdf.set_xy(RUPEE_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+6)\n            pdf.write(3,\'Rs.\\n\')\n            pdf.set_xy(RUPEE_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+11.5)\n            pdf.write(3,\'Rs.\\n\')\n            pdf.set_xy(FINAL_VALUES_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+6)\n            pdf.write(3,\'-\' + str(round(total*discount/100,2)) + \'\\n\')\n            pdf.set_xy(FINAL_VALUES_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+11.5)\n            pdf.write(3,\'+\' + str(round(temp*total_tax/100,2)) + \'\\n\')\n            pdf.line(RUPEE_X-1,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT,RUPEE_X-1,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+FINAL_TABLE_HEIGHT)\n            pdf.line(FINAL_TABLE_START_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+16,PRODUCT_TABLE_START_X+PRODUCT_TABLE_WIDTH,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+16)\n            pdf.set_line_width(0.5)\n            pdf.line(FINAL_TABLE_START_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+26,PRODUCT_TABLE_START_X+PRODUCT_TABLE_WIDTH,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+26)\n            pdf.set_xy(PRODUCT_TABLE_START_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+1)\n            pdf.write(2,\'Total Area* : \' + str(round(total_area,2)) + \'\\n\')\n            pdf.set_xy(DETAILS_X+5,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+1)\n            pdf.write(2,\'Total Units : \' + str(round(count,2)) + \'\\n\')\n            pdf.set_xy(PRODUCT_TABLE_START_X+5,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+7)\n            pdf.write(2,\'Average Price : \' + str(round(val/total_area,2)) + \'/sqft\\n\')\n            pdf.set_xy(PRODUCT_TABLE_START_X,PRODUCT_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+PRODUCT_TABLE_HEIGHT+18.5)\n            pdf.set_font_size(DETAILS_FONT_SIZE-3)\n            pdf.write(2,\'*The area calculation will be accurate only for simple rectangular frames\')\n\n    else:\n        pdf.set_xy(60,140)\n        pdf.set_font(\'Times\', \'B\', FONT_SIZE+4)\n        pdf.write(10, \'No Products added to quotation\')\n        pdf.set_xy(60,140)\n\n    rem = 2\n    for j in range(1,len(products)):\n        if j%NUM_PRODUCTS_PER_PAGE == 1:\n            pdf.add_page()\n            pdf.set_font(\'Times\', \'\', FONT_SIZE)\n            pdf.set_margins(LEFT_MARGIN, TOP_MARGIN, RIGHT_MARGIN)\n            pdf.set_xy(158,TOP_MARGIN+2)\n            pdf.write(5,str(datetime.date.today().strftime(\'Date : %d-%m-%Y\')))\n            pdf.set_xy(10,TOP_MARGIN+2)\n            pdf.write(5,\'Quote No: \' + str(document.name))\n            pdf.set_xy(85,TOP_MARGIN+2)\n            pdf.write(5, \'Email: sales@primeupvc.com\')\n            PRODUCT2_TABLE_START_Y = TOP_MARGIN+12\n            rem = 2\n\n            #Header\n            pdf.set_xy(PRODUCT_TABLE_START_X,PRODUCT2_TABLE_START_Y)\n            pdf.set_fill_color(128,128,128)\n            pdf.set_text_color(255,255,255)\n            pdf.set_font(\'Times\', \'B\', FONT_SIZE)\n            pdf.cell(w = PRODUCT_TABLE_WIDTH, h = PRODUCT_HEADER_HEIGHT,border = 1,fill = 1,txt = \'Sales Line\',align = \'L\')\n            pdf.set_xy(DETAILS_X,PRODUCT2_TABLE_START_Y+1)\n            pdf.write(5, \'Details\')\n            pdf.set_xy(QTY_X,PRODUCT2_TABLE_START_Y+1)\n            pdf.write(5, \'Qty\')\n            pdf.set_xy(RATE_X,PRODUCT2_TABLE_START_Y+1)\n            pdf.write(5, \'Rate(Rs.)\')\n            pdf.set_xy(AMOUNT_X,PRODUCT2_TABLE_START_Y+1)\n            pdf.write(5, \'Amount(Rs.)\')\n            pdf.set_text_color(0,0,0)\n            pdf.set_font(\'Times\', \'\', SMALL_FONT_SIZE)\n            pdf.set_xy(PRODUCT_TABLE_START_X,PRODUCT2_TABLE_START_Y+PRODUCT_HEADER_HEIGHT)\n            pdf.cell(w = PRODUCT_TABLE_WIDTH, h = PRODUCT_HEADER_HEIGHT,border = 1,fill = 0,txt = str(j+1),align = \'L\')\n        else:\n            rem = 1\n            PRODUCT2_TABLE_START_Y += PRODUCT2_TABLE_HEIGHT\n            pdf.set_font(\'Times\', \'\', SMALL_FONT_SIZE)\n            pdf.set_xy(PRODUCT_TABLE_START_X,PRODUCT2_TABLE_START_Y+PRODUCT_HEADER_HEIGHT)\n            pdf.cell(w = PRODUCT_TABLE_WIDTH, h = PRODUCT_HEADER_HEIGHT,border = 1,fill = 0,txt = str(j+1),align = \'L\')\n\n        design = db(db.design.id == products[j].design_id).select()[0]\n        product_id = products[j].id\n        choose_params = db(db.choose_design_parameters.product_in_quotation_id == product_id).select()\n        params = []\n        product_width = None\n        product_height = None\n        for i in choose_params:\n            temp = db((db.product_quotation_parameter_values.design_parameter_id == i.param_id) & (db.product_quotation_parameter_values.product_in_quotation_id == product_id)).select(join = db.product_quotation_parameter_values.on(db.design_parameters.id == db.product_quotation_parameter_values.design_parameter_id))\n            params.append(temp[0])\n            if temp[0].design_parameters.name.lower() == \'width\':\n                product_width = temp[0].product_quotation_parameter_values.parameter_value\n            elif temp[0].design_parameters.name.lower() == \'height\':\n                product_height = temp[0].product_quotation_parameter_values.parameter_value\n        choose_profile = db(db.choose_profile.product_in_quotation_id == product_id).select(join = db.choose_profile.on(db.profile.id == db.choose_profile.pro_id))\n        choose_reinforcement = db(db.choose_reinforcement.product_in_quotation_id == product_id).select(join = db.choose_reinforcement.on(db.reinforcement.id == db.choose_reinforcement.rein_id))\n        choose_hardware = db(db.choose_hardware.product_in_quotation_id == product_id).select(join = db.choose_hardware.on(db.hardware_and_accessories.id == db.choose_hardware.hardware_id))\n        choose_glass = db(db.choose_glass.product_in_quotation_id == product_id).select(join = db.choose_glass.on(db.glass.id == db.choose_glass.glas_id))\n        choose_material = db(db.choose_material.product_in_quotation_id == product_id).select(join = db.choose_material.on(db.installation_material.id == db.choose_material.material_id))\n        choose_extra = db(db.choose_extra.product_in_quotation_id == product_id).select()\n        extra = []\n        for i in choose_extra:\n            temp = db((db.product_quotation_extra_information_values.extra_information_in_design_id == i.extra_info_id) & (db.product_quotation_extra_information_values.product_in_quotation_id == product_id)).select(join = db.product_quotation_extra_information_values.on(db.extra_information_in_design.id == db.product_quotation_extra_information_values.extra_information_in_design_id))\n            extra.append(temp[0])\n\n        #Header Details and Image\n        pdf.set_xy(DETAILS_X,PRODUCT2_TABLE_START_Y+PRODUCT_HEADER_HEIGHT+1)\n        pdf.write(5, products[j].name)\n        pdf.set_xy(10,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT)\n        pdf.cell(w = PRODUCT_TABLE_WIDTH, h = PRODUCT2_TABLE_HEIGHT, border=\'BLR\')\n        pdf.set_xy(12,PRODUCT2_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+5)\n        pdf.image(\'./applications/Prime/uploads/\' + design.design_image,w = DESIGN_IMAGE_WIDTH,h = DESIGN_IMAGE_HEIGHT)\n\n        #Product Details\n        pdf.set_xy(DETAILS_X,PRODUCT2_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+5)\n        pdf.set_font_size(DETAILS_FONT_SIZE)\n        pdf.multi_cell(w=QTY_X-DETAILS_X-5, h=3.25, txt=design.description, border=0, align=\'L\')\n        pdf.set_x(DETAILS_X)\n        pdf.write(LINE_WIDTH,\'\\n\')\n        pdf.set_x(DETAILS_X)\n        pdf.write(LINE_WIDTH,str(product_width) + \'w x \' + str(product_height) + \'h (\' + str(product_width*product_height) + \' sqft)\\n\')\n        pdf.set_x(DETAILS_X)\n        pdf.write(LINE_WIDTH,\'Glass\')\n        pdf.set_x(DETAILS_VALUES_X)\n        pdf.write(LINE_WIDTH,\'<Glass>\\n\')\n        for i in params:\n            if i.design_parameters.name.lower() != \'width\' and i.design_parameters.name.lower() != \'height\':\n                pdf.set_x(DETAILS_X)\n                pdf.write(LINE_WIDTH,i.design_parameters.name)\n                pdf.set_x(DETAILS_VALUES_X)\n                pdf.write(LINE_WIDTH,str(i.product_quotation_parameter_values.parameter_value) + \'\\n\')\n        for i in extra:\n            pdf.set_x(DETAILS_X)\n            pdf.write(LINE_WIDTH,i.extra_information_in_design.name)\n            pdf.set_x(DETAILS_VALUES_X)\n            if i.product_quotation_extra_information_values.default_value:\n                pdf.write(LINE_WIDTH,str(i.product_quotation_extra_information_values.default_value) + \'\\n\')\n            else:\n                pdf.write(LINE_WIDTH,str(i.product_quotation_extra_information_values.extra_information_value) + \'\\n\')\n        for i in choose_profile:\n            pdf.set_x(DETAILS_X)\n            pdf.write(LINE_WIDTH,i.profile.name)\n            pdf.set_x(DETAILS_VALUES_X)\n            pdf.write(LINE_WIDTH,i.profile.profile_code + \'\\n\')\n        for i in choose_hardware:\n            pdf.set_x(DETAILS_X)\n            pdf.write(LINE_WIDTH,i.hardware_and_accessories.name)\n            pdf.set_x(DETAILS_VALUES_X)\n            pdf.write(LINE_WIDTH,i.hardware_and_accessories.description + \'\\n\')\n        for i in choose_reinforcement:\n            pdf.set_x(DETAILS_X)\n            pdf.write(LINE_WIDTH,i.reinforcement.name)\n            pdf.set_x(DETAILS_VALUES_X)\n            pdf.write(LINE_WIDTH,i.reinforcement.description + \'\\n\')\n        for i in choose_material:\n            pdf.set_x(DETAILS_X)\n            pdf.write(LINE_WIDTH,i.installation_material.name)\n            pdf.set_x(DETAILS_VALUES_X)\n            pdf.write(LINE_WIDTH,i.installation_material.description + \'\\n\')\n\n        #Qty,Rate and Amount\n        pdf.line(QTY_X-5,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT,QTY_X-5,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT)\n        pdf.line(RATE_X-5,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT,RATE_X-5,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT)\n        pdf.line(AMOUNT_X,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT,AMOUNT_X,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT)\n        pdf.set_xy(QTY_X+2,PRODUCT2_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+5)\n        pdf.write(10,str(products[j].quantity))\n        pdf.set_xy(RATE_X+2,PRODUCT2_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+5)\n        pdf.write(10,str(round(products[j].total_value_per_piece,2)))\n        pdf.set_xy(AMOUNT_X+5,PRODUCT2_TABLE_START_Y+2*PRODUCT_HEADER_HEIGHT+7.5)\n        pdf.write(5,str(round(products[j].final_value,2)) + \'\\n\')\n        pdf.set_x(AMOUNT_X+5)\n        pdf.write(5, \'(\' + str(round(products[j].final_value/product_width/product_height/products[j].quantity,2)) + \'/sqft)\\n\')\n\n        total += products[j].final_value\n        count += products[j].quantity\n        total_area += (product_width*product_height)*products[j].quantity\n\n        if j == len(products) - 1:\n            temp = total*(1-float(discount)/100)\n            val = temp*(1+total_tax/100)\n            FINAL_TABLE_HEIGHT = 25\n\n            #Final Table\n            pdf.set_xy(FINAL_TABLE_START_X,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT)\n            pdf.cell(FINAL_TABLE_WIDTH,FINAL_TABLE_HEIGHT,border=\'BLR\')\n            pdf.set_xy(FINAL_TABLE_START_X,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+2)\n            pdf.set_font(\'Times\',\'B\',SMALL_FONT_SIZE)\n            pdf.write(3,\'Total\\n\')\n            pdf.set_xy(FINAL_TABLE_START_X,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+21.5)\n            pdf.write(3,\'Grand Total\')\n            pdf.set_xy(RUPEE_X,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+2)\n            pdf.write(3,\'Rs.\\n\')\n            pdf.set_xy(RUPEE_X,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+21.5)\n            pdf.write(3,\'Rs.\')\n            pdf.set_xy(FINAL_VALUES_X,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+2)\n            pdf.write(3,str(round(total,2)) + \'\\n\')\n            pdf.set_xy(FINAL_VALUES_X,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+21.5)\n            pdf.write(3,str(round(val,2)))\n            pdf.set_font(\'Times\',\'\',SMALL_FONT_SIZE)\n            pdf.set_xy(FINAL_TABLE_START_X,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+8)\n            pdf.write(3,\'Discount (\' + str(discount) + \'%)\\n\')\n            pdf.set_xy(FINAL_TABLE_START_X,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+15)\n            pdf.write(3,\'Excise (\' + str(total_tax) + \'%)\\n\')\n            pdf.set_xy(RUPEE_X,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+8)\n            pdf.write(3,\'Rs.\\n\')\n            pdf.set_xy(RUPEE_X,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+15)\n            pdf.write(3,\'Rs.\\n\')\n            pdf.set_xy(FINAL_VALUES_X,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+8)\n            pdf.write(3,\'-\' + str(round(total*discount/100,2)) + \'\\n\')\n            pdf.set_xy(FINAL_VALUES_X,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+15)\n            pdf.write(3,\'+\' + str(round(temp*total_tax/100,2)) + \'\\n\')\n            pdf.line(RUPEE_X-1,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT,RUPEE_X-1,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+FINAL_TABLE_HEIGHT)\n            pdf.line(FINAL_TABLE_START_X,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+20,PRODUCT_TABLE_START_X+PRODUCT_TABLE_WIDTH,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+20)\n            pdf.set_line_width(0.5)\n            pdf.line(FINAL_TABLE_START_X,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+27,PRODUCT_TABLE_START_X+PRODUCT_TABLE_WIDTH,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+27)\n            pdf.set_xy(PRODUCT_TABLE_START_X,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+4)\n            pdf.write(2,\'Total Area* : \' + str(round(total_area,2)) + \'\\n\')\n            pdf.set_xy(DETAILS_X+5,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+4)\n            pdf.write(2,\'Total Units : \' + str(round(count,2)) + \'\\n\')\n            pdf.set_xy(PRODUCT_TABLE_START_X+5,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+10)\n            pdf.write(2,\'Average Price : \' + str(round(val/total_area,2)) + \'/sqft\\n\')\n            pdf.set_xy(PRODUCT_TABLE_START_X,PRODUCT2_TABLE_START_Y+rem*PRODUCT_HEADER_HEIGHT+PRODUCT2_TABLE_HEIGHT+25)\n            pdf.set_font_size(DETAILS_FONT_SIZE-3)\n            pdf.write(2,\'*The area calculation will be accurate only for simple rectangular frames\')\n\n    #Last Page\n    pdf.add_page()\n    pdf.set_margins(LEFT_MARGIN, TOP_MARGIN, RIGHT_MARGIN)\n    pdf.set_xy(10,5+TOP_MARGIN)\n    pdf.set_font(\'Times\', \'BU\', FONT_SIZE)\n    pdf.write(10,\'Excise duty and Charges\')\n    pdf.set_font(\'Times\', \'\', SMALL_FONT_SIZE)\n    pdf.set_xy(10,15+TOP_MARGIN)\n    pdf.multi_cell(w = HEADER_WIDTH,h=GENERIC_CONTENT_HEIGHT/4.5,align = \'L\', txt = \'The above prices are inclusive of excise duty, and freight charges at the prevailing conditions. The present rate of Excise duty is \' + str(tax) + \'%. If applicable, additional CST @ \' + str(cst) + \'% against form \\\'C\\\' or VAT @ \' + str(float(tax) + float(cst)) + \'% is applicable. Non-submission of \\\'C\\\' Form, \' + str(tax) + \'% extra, being the difference amount of CST on the quoted price will be charged. The above prices also includes installation charges.\')\n    pdf.set_xy(10,40+TOP_MARGIN)\n    pdf.multi_cell(w = HEADER_WIDTH,h=GENERIC_CONTENT_HEIGHT/4.5,align = \'L\', txt = \'ANY changes in the above rates or imposition of any new taxes, duties, octroi, etc (central or state), would be payable by you extra at actuals based on rates prevailing at the time of supply.\')\n    pdf.set_xy(10, 60+TOP_MARGIN)\n    pdf.set_font(\'Times\', \'BU\', FONT_SIZE)\n    pdf.write(10,\'Terms and Conditions\')\n    pdf.set_font(\'Times\', \'\', SMALL_FONT_SIZE)\n    pdf.set_xy(10, 70+TOP_MARGIN)\n    pdf.multi_cell(w = HEADER_WIDTH,h=GENERIC_CONTENT_HEIGHT/4.5,align = \'L\', txt = \'1.\\tThe charges are according to the dimensions mentioned above. Price will change if there is any change in dimensions.\')\n    pdf.set_xy(10, 82+TOP_MARGIN)\n    pdf.multi_cell(w = HEADER_WIDTH,h=GENERIC_CONTENT_HEIGHT/4.5,align = \'L\', txt = \'2.\\tSite should be ready with plastering, electrical, flooring and plumbing works done for installation.\')\n    pdf.set_xy(10, 100+TOP_MARGIN)\n    pdf.set_font(\'Times\', \'\', FONT_SIZE)\n    pdf.write(10,\'Yours Faithfully,\')\n    pdf.set_font(\'Times\', \'B\', FONT_SIZE)\n    pdf.set_xy(10, 105+TOP_MARGIN)\n    pdf.write(10,\'ECOCARE Building Innovations Pvt Ltd\')\n    pdf.set_xy(10, 115+TOP_MARGIN)\n    pdf.write(10,\'Ramesh\')\n    pdf.set_xy(10, 120+TOP_MARGIN)\n    pdf.write(10,\'Ph # +91 800 829 4345\')\n    pdf.set_xy(10, 125+TOP_MARGIN)\n    pdf.set_text_color(71,106,52)\n    pdf.set_font(\'Times\', \'BI\', FONT_SIZE)\n    pdf.write(10,\'Go Keen ... Go Green ...\')\n    pdf.set_font(\'Times\', \'B\', FONT_SIZE)\n    pdf.set_text_color(0,0,0)\n    pdf.set_xy(10, 130+TOP_MARGIN)\n    pdf.write(10,\'Office Address: Plot No. 539, Vivekananda Nagar Colony, Kukatpally, Hyderabad - 500762\')\n    pdf.set_xy(10, 135+TOP_MARGIN)\n    pdf.write(10, \'Office Phone Number: 040 2306 6396\')\n\n    response.headers[\'Content-Type\'] = \'application/pdf\'\n    filename = document.name\n    pdf.output(\'./\' + filename + \'.pdf\',\'F\')\n    stream = open(\'./\' + filename + \'.pdf\', \'rb\')\n    filevalue = db.documents.document_file.store(stream, \'./\' + filename + \'.pdf\')\n    #db.documents.insert(project_id = project_id, name = filename, document_type = \'Production Document\', document_file = filevalue,upload_time = datetime.datetime.now())\n    document.document_file = filevalue\n    document.upload_time = datetime.datetime.now()\n    document.update_record()\n    stream.close()\n    os.remove(\'./\' + filename + \'.pdf\')\n    redirect(URL(\'view_docs.html\', vars = dict(project_id = project.id)))\n#endregion\n\n#Glass\n#region Generate Production Documents\n@auth.requires_login()\ndef generate_production_document():\n    LEFT_MARGIN = 2\n    RIGHT_MARGIN = 2\n    TOP_MARGIN = 5\n    FONT_SIZE = 11\n    SMALL_FONT_SIZE = 10\n    TITLE_FONT_SIZE = 15\n    TEXTBOX_BORDER_SIZE = 0.5\n    CELL_WIDTH = 190\n    CELL_HEIGHT = 12\n    TABLE1_WIDTH = 190\n    TABLE1_HEIGHT = 80\n    TABLE1_START_X = 10\n    TABLE1_START_Y = 40\n    IMAGE_WIDTH = TABLE1_WIDTH/2 - 2*TEXTBOX_BORDER_SIZE\n    IMAGE_HEIGHT = TABLE1_HEIGHT - 2*TEXTBOX_BORDER_SIZE\n    TABLE1_BLOCK_WIDTH = IMAGE_WIDTH/2\n    TABLE1_BLOCK_HEIGHT = TABLE1_HEIGHT/16\n    TABLE1_NAMES_START_X = TABLE1_START_X\n    TABLE1_NAMES_START_Y = TABLE1_START_Y\n    TABLE_VALS_START_X = TABLE1_START_X + TABLE1_BLOCK_WIDTH*0.8\n    TABLE_VALS_START_Y = TABLE1_START_Y\n    IMAGE_START_X = TABLE_VALS_START_X + TABLE1_BLOCK_WIDTH*1.2\n    IMAGE_START_Y = TABLE1_START_Y\n    TABLE_MIDDLE_Y = 10\n    TABLE2_START_X = TABLE1_START_X\n    TABLE2_START_Y = TABLE1_START_Y + TABLE1_HEIGHT + TABLE_MIDDLE_Y\n    SNO_WIDTH = 10\n    SNO_HEIGHT = 5\n    ITEM_CODE_WIDTH = 30\n    ITEM_DESC_WIDTH = 90\n    QUANTITY_WIDTH =  20\n    SIZE_WIDTH = 20\n    CUT_WIDTH = 15\n    ITEM_DESC_X = TABLE2_START_X + SNO_WIDTH\n    ITEM_CODE_X = ITEM_DESC_X + ITEM_DESC_WIDTH\n    QUANTITY_X = ITEM_CODE_X + ITEM_CODE_WIDTH\n    SIZE_X = QUANTITY_X + QUANTITY_WIDTH\n    CUT_X = SIZE_X + SIZE_WIDTH\n\n    project_id = request.vars.project_id\n    class PDF(FPDF):\n        def header(self):\n            self.set_font(\'Times\', \'B\', TITLE_FONT_SIZE)\n            self.cell(w = 0, txt = \'PRIME uPVC DOORS AND WINDOWS\', align = \'C\')\n            self.ln(7)\n            self.set_font(\'Times\', \'\', FONT_SIZE)\n            self.cell(w = 0, txt = \'Production Document\', ln = 0, align = \'L\')\n            self.cell(w = 0, txt = str(datetime.date.today().strftime(\'Date : %d-%m-%Y\')), align = \'R\')\n            self.ln(5)\n\n        def footer(self):\n            self.set_y(-10)\n            self.set_font(\'Times\', \'\', FONT_SIZE)\n            self.cell(0, 10, \'Page %s\' % self.page_no() + \' of  \' + \'{nb}\', 0, 0, \'C\')\n\n    pdf = PDF()\n    pdf.alias_nb_pages()\n\n    products = db(db.product.project_id == project_id).select()\n    project = db(db.project.id == project_id).select()[0]\n    docs = db((db.documents.project_id == project_id) & (db.documents.document_type == \'Production Document\')).select()\n    filename = \'Production_\' + str(len(docs)+1)\n\n    for i in range(len(products)):\n        design = db(db.design.id == products[i].design_id).select()[0]\n        block_number = products[i].block_number\n        flat_number = products[i].flat_number\n        window_number = products[i].window_number\n        extra_comment = products[i].extra_comment\n        if extra_comment == None:\n            extra_comment = \'None\'\n        profile = db(db.profile_used_in_design.design_id == design.id).select(join = db.profile_used_in_design.on(db.profile.id == db.profile_used_in_design.profile_id))\n\n        parameters = db(db.design_parameters.design_id == design.id).select(join = db.design_parameters.on((db.design_parameters_values.design_parameter_id == db.design_parameters.id) & (db.design_parameters_values.product_id == products[i].id)))\n        width = None\n        height = None\n        for entry in parameters:\n            if entry.design_parameters.name.lower() == \'width\':\n                width = entry.design_parameters_values.parameter_value\n            elif entry.design_parameters.name.lower() == \'height\':\n                height = entry.design_parameters_values.parameter_value\n\n        extra_info = db(db.extra_information_in_design.design_id == design.id).select(join = db.extra_information_in_design.on((db.extra_information_values.extra_information_in_design_id == db.extra_information_in_design.id) & (db.extra_information_values.product_id == products[i].id)))\n\n        fly = None\n        alm = None\n        handle_inner = None\n        handle_outer = None\n        for entry in extra_info:\n            name = entry.extra_information_in_design.name.lower()\n            name = name.replace(\' \', \'\')\n            name = name.replace(\'_\', \'\')\n            name = name.replace(\'-\', \'\')\n            if name == \'flyscreen\':\n                fly = entry.extra_information_values.default_value\n            elif name == \'aluminiumtrack\':\n                alm = entry.extra_information_values.default_value\n            elif name == \'handleinner\':\n                handle_inner = entry.extra_information_values.default_value\n            elif name == \'handleouter\':\n                handle_outer = entry.extra_information_values.default_value\n        if fly == None:\n            fly = \'Does not apply\'\n        if alm == None:\n            alm = \'Does not apply\'\n        if handle_inner == None:\n            handle_inner = \'Does not apply\'\n        if handle_outer == None:\n            handle_outer = \'Does not apply\'\n\n        pdf.add_page()\n        pdf.set_font(\'Times\', \'\', FONT_SIZE)\n\n        #Heading box\n        pdf.cell(CELL_WIDTH, CELL_HEIGHT, txt=\'\', border=1)\n        pdf.set_xy(10, 25)\n        pdf.cell(w=0, txt=\'Production Doc No :    \' + str(len(docs) + 1), ln=0, align=\'L\')\n        pdf.set_xy(120, 25)\n        pdf.cell(w=0, txt=\'Project Name :    \' + project.name, ln=1, align=\'L\')\n        pdf.set_xy(120, 30)\n        pdf.cell(w=0, txt=\'Document Type:    Production\', ln=1, align=\'L\')\n        pdf.ln(10)\n\n        #Product Description Table\n        pdf.set_xy(TABLE1_START_X, TABLE1_START_Y)\n        pdf.set_line_width(TEXTBOX_BORDER_SIZE)\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*0.8, h=TABLE1_BLOCK_HEIGHT, txt=\'Location\', border=1, align=\'L\')\n        num = 1\n        pdf.set_xy(TABLE1_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT))\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*0.8, h=TABLE1_BLOCK_HEIGHT, txt=\'Design\', border=1, align=\'L\')\n        num += 1\n        pdf.set_xy(TABLE1_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT))\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*0.8, h=4 * TABLE1_BLOCK_HEIGHT, txt=\'Design Description\', border=1, align=\'L\')\n        num += 4\n        pdf.set_xy(TABLE1_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT))\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*0.8, h=TABLE1_BLOCK_HEIGHT, txt=\'Size\', border=1, align=\'L\')\n        num += 1\n        pdf.set_xy(TABLE1_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT))\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*0.8, h=TABLE1_BLOCK_HEIGHT, txt=\'Glass\', border=1, align=\'L\')\n        num += 1\n        pdf.set_xy(TABLE1_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT))\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*0.8, h=TABLE1_BLOCK_HEIGHT, txt=\'Fly screen\', border=1, align=\'L\')\n        num += 1\n        pdf.set_xy(TABLE1_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT))\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*0.8, h=TABLE1_BLOCK_HEIGHT, txt=\'Aluminium track\', border=1, align=\'L\')\n        num += 1\n        pdf.set_xy(TABLE1_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT))\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*0.8, h=TABLE1_BLOCK_HEIGHT, txt=\'Handle Inner\', border=1, align=\'L\')\n        num += 1\n        pdf.set_xy(TABLE1_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT))\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*0.8, h=TABLE1_BLOCK_HEIGHT, txt=\'Handle Outer\', border=1, align=\'L\')\n        num += 1\n        pdf.set_xy(TABLE1_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT))\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*0.8, h= 4 * TABLE1_BLOCK_HEIGHT, txt=\'Comments\', border=1, align=\'L\')\n\n        num = 0\n        pdf.set_xy(TABLE_VALS_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT))\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*1.2, h=TABLE1_BLOCK_HEIGHT, txt=str(block_number)+\'/\'+str(flat_number)+\'/\'+str(window_number), border=1, align=\'C\')\n        num += 1\n        pdf.set_xy(TABLE_VALS_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT))\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*1.2, h=TABLE1_BLOCK_HEIGHT, txt=design.name, border=1, align=\'C\')\n        num += 1\n        pdf.set_xy(TABLE_VALS_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT))\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*1.2, h= 4*TABLE1_BLOCK_HEIGHT, border=1, align=\'C\')\n        pdf.set_xy(TABLE_VALS_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT) + 1)\n        pdf.set_font(\'Times\', \'\', SMALL_FONT_SIZE)\n        pdf.multi_cell(w=TABLE1_BLOCK_WIDTH*1.2, h= 0.8*TABLE1_BLOCK_HEIGHT, txt=design.description, border=0, align=\'C\')\n        pdf.set_font(\'Times\', \'\', FONT_SIZE)\n        num += 4\n        pdf.set_xy(TABLE_VALS_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT))\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*1.2, h=TABLE1_BLOCK_HEIGHT, txt=str(width) + \' x \'+ str(height), border=1, align=\'C\')\n        num += 1\n        pdf.set_xy(TABLE_VALS_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT))\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*1.2, h=TABLE1_BLOCK_HEIGHT, txt=\'<Glass Type>\', border=1, align=\'C\')\n        num += 1\n        pdf.set_xy(TABLE_VALS_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT))\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*1.2, h=TABLE1_BLOCK_HEIGHT, txt=fly, border=1, align=\'C\')\n        num += 1\n        pdf.set_xy(TABLE_VALS_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT))\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*1.2, h=TABLE1_BLOCK_HEIGHT, txt=alm, border=1, align=\'C\')\n        num += 1\n        pdf.set_xy(TABLE_VALS_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT))\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*1.2, h=TABLE1_BLOCK_HEIGHT, txt=handle_inner, border=1, align=\'C\')\n        num += 1\n        pdf.set_xy(TABLE_VALS_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT))\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*1.2, h=TABLE1_BLOCK_HEIGHT, txt=handle_outer, border=1, align=\'C\')\n        num += 1\n        pdf.set_xy(TABLE_VALS_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT))\n        pdf.cell(w=TABLE1_BLOCK_WIDTH*1.2, h= 4*TABLE1_BLOCK_HEIGHT, border=1, align=\'C\')\n        pdf.set_xy(TABLE_VALS_START_X, TABLE1_START_Y + num*(TABLE1_BLOCK_HEIGHT) + 1)\n        pdf.set_font(\'Times\', \'\', SMALL_FONT_SIZE)\n        pdf.multi_cell(w=TABLE1_BLOCK_WIDTH*1.2, h= 0.8*TABLE1_BLOCK_HEIGHT, txt=extra_comment, border=0, align=\'C\')\n        pdf.set_font(\'Times\', \'\', FONT_SIZE)\n        num += 4\n\n        #Image\n        pdf.set_xy(IMAGE_START_X, IMAGE_START_Y)\n        pdf.cell(w=TABLE1_WIDTH/2,h=TABLE1_HEIGHT,border=1,align=\'C\')\n        pdf.set_xy(IMAGE_START_X + TEXTBOX_BORDER_SIZE, IMAGE_START_Y + TEXTBOX_BORDER_SIZE)\n        pdf.image(\'./applications/Prime/uploads/\' + design.design_image, w = IMAGE_WIDTH, h = IMAGE_HEIGHT)\n\n        #Profile Table Header\n        pdf.set_font(\'Times\', \'B\', FONT_SIZE)\n        pdf.set_xy(TABLE2_START_X, TABLE2_START_Y)\n        pdf.cell(w=SNO_WIDTH, h=SNO_HEIGHT, txt=\'S.No\', border=1, align=\'C\')\n        pdf.set_xy(ITEM_CODE_X, TABLE2_START_Y)\n        pdf.cell(w=ITEM_CODE_WIDTH, h=SNO_HEIGHT, txt=\'Item Code\', border=\'RTB\', align=\'C\')\n        pdf.set_xy(ITEM_DESC_X, TABLE2_START_Y)\n        pdf.cell(w=ITEM_DESC_WIDTH, h=SNO_HEIGHT, txt=\'Item Description\', border=\'RTB\', align=\'C\')\n        pdf.set_xy(QUANTITY_X, TABLE2_START_Y)\n        pdf.cell(w=QUANTITY_WIDTH, h=SNO_HEIGHT, txt=\'Quantity\', border=\'RTB\', align=\'C\')\n        pdf.set_xy(SIZE_X, TABLE2_START_Y)\n        pdf.cell(w=SIZE_WIDTH, h=SNO_HEIGHT, txt=\'Size\', border=\'RTB\', align=\'C\')\n        pdf.set_xy(CUT_X, TABLE2_START_Y)\n        pdf.cell(w=CUT_WIDTH, h=SNO_HEIGHT, txt=\'Cut\', border=\'RTB\', align=\'C\')\n\n        for j in range(len(profile)):\n            profile_values = db((db.profile_values.product_id == products[i].id) & (db.profile_values.profile_used_in_design_id == profile[j].profile_used_in_design.id)).select()\n            if len(profile_values) > 0:\n                #Table\n                POS_Y = (j+1)*SNO_HEIGHT\n                pdf.set_font(\'Times\', \'\', FONT_SIZE)\n                pdf.set_xy(TABLE2_START_X, TABLE2_START_Y + POS_Y)\n                pdf.cell(w=SNO_WIDTH, h=SNO_HEIGHT, txt=str(j+1), border=1, align=\'C\')\n                pdf.set_xy(ITEM_CODE_X, TABLE2_START_Y + POS_Y)\n                pdf.cell(w=ITEM_CODE_WIDTH, h=SNO_HEIGHT, txt=profile[j].profile.profile_code, border=\'RTB\', align=\'C\')\n                pdf.set_xy(ITEM_DESC_X, TABLE2_START_Y + POS_Y)\n                pdf.cell(w=ITEM_DESC_WIDTH, h=SNO_HEIGHT, txt=profile[j].profile.description, border=\'RTB\', align=\'C\')\n                pdf.set_xy(QUANTITY_X, TABLE2_START_Y + POS_Y)\n                pdf.cell(w=QUANTITY_WIDTH, h=SNO_HEIGHT, txt=str(profile_values[0].quantity), border=\'RTB\', align=\'C\')\n                pdf.set_xy(SIZE_X, TABLE2_START_Y + POS_Y)\n                pdf.cell(w=SIZE_WIDTH, h=SNO_HEIGHT, txt=str(profile_values[0].length_value), border=\'RTB\', align=\'C\')\n                pdf.set_xy(CUT_X, TABLE2_START_Y + POS_Y)\n                pdf.cell(w=CUT_WIDTH, h=SNO_HEIGHT, txt=profile_values[0].cut, border=\'RTB\', align=\'C\')\n\n    response.headers[\'Content-Type\'] = \'application/pdf\'\n    pdf.output(\'./\' + filename + \'.pdf\',\'F\')\n    stream = open(\'./\' + filename + \'.pdf\', \'rb\')\n    filevalue = db.documents.document_file.store(stream, \'./\' + filename + \'.pdf\')\n    db.documents.insert(project_id = project_id, name = filename, document_type = \'Production Document\', document_file = filevalue,upload_time = datetime.datetime.now())\n    stream.close()\n    os.remove(\'./\' + filename + \'.pdf\')\n    redirect(URL(\'view_docs.html\', vars = dict(project_id = project_id)))\n\n#endregion\n\n#endregion\n\n#region Search\n#################################################################################################################\n#------------------------------------------- SEARCH FUNCTION ---------------------------------------------------#\n#################################################################################################################\n\n@auth.requires_login()\ndef search():\n    var1=request.vars.option\n    var2=request.vars.search\n    if(var1=="project"):\n        redirect(URL(\'s1\',vars=dict(var2=var2)))\n    elif(var1=="organisation"):\n        redirect(URL(\'s2\',vars=dict(var2=var2)))\n    elif(var1=="point_of_contact"):\n        redirect(URL(\'s3\',vars=dict(var2=var2)))\n\n@auth.requires_login()\ndef s1():\n    k=request.vars.var2\n    k1=db(db.project.id>=0).select()\n    l={}\n    if k != "":\n        for i in k1:\n            if (re.search(k,str(i.name),re.IGNORECASE) or re.search(k,str(i.address),re.IGNORECASE) or re.search(k,str(i.description),re.IGNORECASE)\n                or re.search(k,str(i.phase),re.IGNORECASE)):\n                if i.name not in l.keys():\n                    l[i.name]=i.id\n    else:\n        for i in k1:\n                if i.name not in l.keys():\n                    l[i.name]=i.id\n    return dict(l=l)\n\n@auth.requires_login()\ndef s2():\n    k=request.vars.var2\n    k1=db(db.organization.id>=0).select()\n    l={}\n    if k!="":\n        for i in k1:\n            if (re.search(k,str(i.name),re.IGNORECASE) or re.search(k,str(i.address),re.IGNORECASE)):\n                sel=db(db.project.organization_id==i.id).select()\n                for j in sel:\n                    if j.name not in l.keys():\n                        l[j.name]=j.id\n    else:\n        k1=db(db.project.id>=0).select()\n        for i in k1:\n                if i.name not in l.keys():\n                    l[i.name]=i.id\n    return dict(l=l)\n\n@auth.requires_login()\ndef s3():\n    k=request.vars.var2\n    k1=db(db.point_of_contact.id>=0).select()\n    l={}\n    if k!="":\n        for i in k1:\n            if (re.search(k,str(i.name),re.IGNORECASE) or re.search(k,str(i.email),re.IGNORECASE) or re.search(k,str(i.phone_number),re.IGNORECASE)\n                or re.search(k,str(i.designation),re.IGNORECASE)):\n                sel=db(db.project_to_poc.poc_id==i.id).select()\n                for j in sel:\n                    query=db(db.project.id==j.project_id).select()\n                    for row in query:\n                        if row.name not in l.keys():\n                            l[row.name]=row.id\n    else:\n        k1=db(db.project.id>=0).select()\n        for i in k1:\n                if i.name not in l.keys():\n                    l[i.name]=i.id\n    return dict(l=l)\n\n#endregion\n\n#region Product\n#################################################################################################################\n#------------------------------------------------ Product ------------------------------------------------------#\n#################################################################################################################\n#region Add Product\n#------------------------------------------- Add New Product ---------------------------------------------------#\n@auth.requires_login()\ndef add_new_product():\n    project_id=request.vars.project_id\n    rows=db(db.product.project_id==project_id).select(db.product.name)\n    max=0\n    for i in rows:\n        try:\n            number=int(re.search(r\'\\d+\', i.name).group())\n            if(number>max):\n                max=number\n        except:\n            pass\n    db.product.project_id.default = project_id\n    db.product.name.default = \'product_\' + str(max+1)\n    form=SQLFORM(db.product,fields=[\'design_id\', \'phase\', \'block_number\', \'flat_number\', \'window_number\'])\n    if form.process().accepted:\n        session.flash = \'accepted\'\n        id=form.vars.id\n        redirect(URL(\'design_parameters\', vars=dict(product_id=id)))\n    elif form.errors:\n           response.flash = \'form has errors\'\n    else:\n       response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef design_parameters():\n    product_id = request.vars.product_id\n    product = db(db.product.id == product_id).select()\n    sel = []\n    for i in product:\n        sel=db(db.design_parameters.design_id == i.design_id).select()\n    parameters={}\n    parameters=collections.OrderedDict(sorted(parameters.items()))\n    for row in sel:\n        parameters[row.id]=row.name+\'(\'+row.codename+\')\'\n    return dict(parameters = parameters, product_id = product_id)\n\n@auth.requires_login()\ndef design_parameters_values():\n    product_id=request.vars.product_id\n    product = db(db.product.id == product_id).select()[0]\n    project = db(db.project.id == product.project_id).select()[0]\n    parameters=request.vars\n    del parameters[\'product_id\']\n    parameter_value=[]\n    for parameter in parameters:\n        db.design_parameters_values.insert(product_id=product_id,design_parameter_id=parameter,parameter_value=parameters[parameter])\n        parameter_value.append(parameters[parameter])\n    db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' added product \' + product.name + \' in project \' + project.name, log_time = datetime.datetime.now())\n    redirect(URL(\'calculate_product\',vars=dict(entry_id = product_id)))\n    return dict()\n\n@auth.requires_login()\ndef calculate_product():\n    product_id = request.vars.entry_id\n    flag = request.vars.flag\n    product = db(db.product.id == product_id).select()[0]\n    design_id = product.design_id\n    project_id = product.project_id\n    design_table = db(db.design.id == design_id).select()[0]\n    parameter_values_table = db(db.design_parameters_values.product_id == product_id).select(orderby=db.design_parameters_values.design_parameter_id)\n    parameter_value = []\n    for i in parameter_values_table:\n        parameter_value.append(str(i.parameter_value))\n\n    profile_table = db(db.profile_used_in_design.design_id == design_id).select()\n    if flag:\n        rows = db(db.profile_values.product_id == product_id).delete()\n\n    for i in xrange(len(profile_table)):\n        #print profile_table[i].length_calculation,parameter_value\n        length_value = Infix(convert(profile_table[i].length_calculation,parameter_value))\n        cost_value = Infix(convert(profile_table[i].cost_calculation,parameter_value))\n        db.profile_values.insert(product_id = product_id, profile_used_in_design_id = profile_table[i].id, profile_position = profile_table[i].profile_position, cut = profile_table[i].cut, length_value = length_value, quantity = profile_table[i].quantity, profile_cost = cost_value)\n\n    reinforcement_table = db(db.reinforcement_used_in_design.design_id == design_id).select()\n    if flag:\n        rows = db(db.reinforcement_values.product_id == product_id).delete()\n\n    for i in xrange(len(reinforcement_table)):\n        #print reinforcement_table[i].length_calculation,parameter_value\n        length_value = Infix(convert(reinforcement_table[i].length_calculation,parameter_value))\n        cost_value = Infix(convert(reinforcement_table[i].cost_calculation,parameter_value))\n        db.reinforcement_values.insert(product_id = product_id, reinforcement_used_in_design_id = reinforcement_table[i].id, length_value = length_value, quantity = reinforcement_table[i].quantity, reinforcement_cost = cost_value)\n\n    HAA_table = db(db.hardware_and_accessories_used_in_design.design_id == design_id).select()\n    if flag:\n        rows = db(db.hardware_and_accessories_values.product_id == product_id).delete()\n\n    for i in xrange(len(HAA_table)):\n        #print HAA_table[i].cost_calculation,parameter_value\n        cost_value = Infix(convert(HAA_table[i].cost_calculation,parameter_value))\n        db.hardware_and_accessories_values.insert(product_id = product_id, hardware_and_accessories_used_in_design_id = HAA_table[i].id, quantity = HAA_table[i].quantity, hardware_and_accessories_cost = cost_value)\n\n    glass_table = db(db.glass_used_in_design.design_id == design_id).select()\n    if flag:\n        rows = db(db.glass_values.product_id == product_id).delete()\n\n    for i in xrange(len(glass_table)):\n        #print glass_table[i].width_calculation,parameter_value\n        width_value = Infix(convert(glass_table[i].width_calculation,parameter_value))\n        height_value = Infix(convert(glass_table[i].height_calculation,parameter_value))\n        cost_value = Infix(convert(glass_table[i].cost_calculation,parameter_value))\n        db.glass_values.insert(product_id = product_id, glass_used_in_design_id = glass_table[i].id, width = width_value, height = height_value, quantity = glass_table[i].quantity, glass_cost = cost_value)\n\n    material_table = db(db.installation_material_used_in_design.design_id == design_id).select()\n    if flag:\n        rows = db(db.installation_material_values.product_id == product_id).delete()\n\n    for i in xrange(len(material_table)):\n        #print material_table[i].cost_calculation,parameter_value\n        cost_value = Infix(convert(material_table[i].cost_calculation,parameter_value))\n        db.installation_material_values.insert(product_id = product_id, installation_material_used_in_design_id = material_table[i].id, quantity = material_table[i].quantity, installation_material_cost = cost_value)\n\n    extra_information_table = db(db.extra_information_in_design.design_id == design_id).select()\n    if flag:\n        rows = db(db.extra_information_values.product_id == product_id).delete()\n\n    for i in xrange(len(extra_information_table)):\n        value = None\n        if extra_information_table[i].calculation:\n            #print extra_information_table[i].calculation,parameter_value\n            value = Infix(convert(extra_information_table[i].calculation,parameter_value))\n        db.extra_information_values.insert(product_id = product_id, extra_information_in_design_id = extra_information_table[i].id, default_value = extra_information_table[i].default_value, extra_information_value = value)\n\n    redirect(URL(\'view_product.html\',vars=dict(entry_id = product_id)))\n    return dict()\n\ndef convert(str1,parameter_value):\n    str=""\n    finalstr=[0]*10\n    finalstr[0]=str1\n    j=0\n    i=0\n    while(i<(len(str1))):\n        #print i\n        if(str1[i]==\'P\'):\n            str=""\n            i=i+1\n            while(i<len(str1) and str1[i]!=\'+\' and str1[i]!=\'-\' and str1[i]!=\'*\' and str1[i]!=\'/\' and str1[i]!=\'(\' and str1[i]!=\')\'):\n                str=str+str1[i]\n                i=i+1\n            #print str\n            finalstr[j+1]=finalstr[j].replace(\'P\'+str,parameter_value[int(str)-1])\n            j=j+1\n            #print finalstr\n        i=i+1\n    return finalstr[j]\n\n#endregion\n\n#region View/Edit/Copy Product\n#----------------------------------------- View/Edit/Copy Product -----------------------------------------------#\n"""@auth.requires_login()\ndef view_product():\n    product_id = None\n    if request.vars.entry_id:\n        product_id = request.vars.entry_id\n    else:\n        product_id = request.args(0, cast=int)\n    product = db(db.product.id == product_id).select()[0]\n    design_id = product.design_id\n    project_id = product.project_id\n    parameter_value = request.vars.parameter_value\n    if request.vars.flag:\n        parameter_value = parameter_value.split(\',\')\n    design_table = db(db.design.id == design_id).select()\n    product_table = db(db.product.id == product_id).select()\n    design_parameters_table = db(db.design_parameters.design_id == design_id).select()\n    profile_table = db(db.profile_used_in_design.design_id == design_id).select()\n    for i in xrange(len(profile_table)):\n        #print profile_table[i].length_calculation,parameter_value\n        length_value = Infix(convert(profile_table[i].length_calculation,parameter_value))\n        profile_table[i].length_calculation=convert(profile_table[i].length_calculation,parameter_value)\n        profile_table[i].length_calculation=Infix(profile_table[i].length_calculation)\n        profile_table[i].cost_calculation=convert(profile_table[i].cost_calculation,parameter_value)\n        profile_table[i].cost_calculation=Infix(profile_table[i].cost_calculation)\n    profile_names = db(db.profile_used_in_design.design_id == design_id).select(join = db.profile_used_in_design.on(db.profile.id == db.profile_used_in_design.profile_id))\n    reinforcement_table = db(db.reinforcement_used_in_design.design_id == design_id).select()\n    for i in xrange(len(reinforcement_table)):\n        #print reinforcement_table[i].length_calculation,parameter_value\n        reinforcement_table[i].length_calculation=convert(reinforcement_table[i].length_calculation,parameter_value)\n        reinforcement_table[i].length_calculation=Infix(reinforcement_table[i].length_calculation)\n        reinforcement_table[i].cost_calculation=convert(reinforcement_table[i].cost_calculation,parameter_value)\n        reinforcement_table[i].cost_calculation=Infix(reinforcement_table[i].cost_calculation)\n    reinforcement_names = db(db.reinforcement_used_in_design.design_id == design_id).select(join = db.reinforcement_used_in_design.on(db.reinforcement.id == db.reinforcement_used_in_design.reinforcement_id))\n    HAA_table = db(db.hardware_and_accessories_used_in_design.design_id == design_id).select()\n    for i in xrange(len(HAA_table)):\n        #print HAA_table[i].cost_calculation,parameter_value\n        HAA_table[i].cost_calculation=convert(HAA_table[i].cost_calculation,parameter_value)\n        HAA_table[i].cost_calculation=Infix(HAA_table[i].cost_calculation)\n    HAA_names = db(db.hardware_and_accessories_used_in_design.design_id == design_id).select(join = db.hardware_and_accessories_used_in_design.on(db.hardware_and_accessories.id == db.hardware_and_accessories_used_in_design.hardware_and_accessories_id))\n    glass_table = db(db.glass_used_in_design.design_id == design_id).select()\n    for i in xrange(len(glass_table)):\n        #print glass_table[i].width_calculation,parameter_value\n        glass_table[i].width_calculation=convert(glass_table[i].width_calculation,parameter_value)\n        glass_table[i].width_calculation=Infix(glass_table[i].width_calculation)\n        glass_table[i].height_calculation=convert(glass_table[i].height_calculation,parameter_value)\n        glass_table[i].height_calculation=Infix(glass_table[i].height_calculation)\n        glass_table[i].cost_calculation=convert(glass_table[i].cost_calculation,parameter_value)\n        glass_table[i].cost_calculation=Infix(glass_table[i].cost_calculation)\n    glass_names = db(db.glass_used_in_design.design_id == design_id).select(join = db.glass_used_in_design.on(db.glass.id == db.glass_used_in_design.glass_id))\n    material_table = db(db.installation_material_used_in_design.design_id == design_id).select()\n    for i in xrange(len(material_table)):\n        #print material_table[i].cost_calculation,parameter_value\n        material_table[i].cost_calculation=convert(material_table[i].cost_calculation,parameter_value)\n        material_table[i].cost_calculation=Infix(material_table[i].cost_calculation)\n    material_names = db(db.installation_material_used_in_design.design_id == design_id).select(join = db.installation_material_used_in_design.on(db.installation_material.id == db.installation_material_used_in_design.installation_material_id))\n    extra_information_table = db(db.extra_information_in_design.design_id == design_id).select()\n    for i in xrange(len(extra_information_table)):\n        if extra_information_table[i].calculation:\n            #print extra_information_table[i].calculation,parameter_value\n            extra_information_table[i].calculation=convert(extra_information_table[i].calculation,parameter_value)\n            extra_information_table[i].calculation=Infix(extra_information_table[i].calculation)\n    return dict(project_id=project_id, parameter_value=parameter_value, product_table=product_table, design_id = design_id, design_table = design_table, design_parameters_table = design_parameters_table, profile_table = profile_table, profile_names = profile_names, reinforcement_table = reinforcement_table, reinforcement_names = reinforcement_names, HAA_table = HAA_table, HAA_names = HAA_names, glass_table = glass_table, glass_names = glass_names, material_table = material_table, material_names = material_names, extra_information_table = extra_information_table)\n"""\n\n@auth.requires_login()\ndef view_product():\n    product_id = request.vars.entry_id\n    product_table = db(db.product.id == product_id).select()\n    product = product_table[0]\n    design_id = product.design_id\n    project_id = product.project_id\n    design_table = db(db.design.id == design_id).select()\n\n    parameter_table = db(db.design_parameters_values.product_id == product_id).select(join = db.design_parameters_values.on(db.design_parameters.id == db.design_parameters_values.design_parameter_id),orderby=db.design_parameters.id)\n\n    profile_values = db((db.profile_values.product_id == product_id) & (db.profile_values.profile_used_in_design_id == db.profile_used_in_design.id) & (db.profile_used_in_design.profile_id == db.profile.id)).select()\n    reinforcement_values = db((db.reinforcement_values.product_id == product_id) & (db.reinforcement_values.reinforcement_used_in_design_id == db.reinforcement_used_in_design.id) & (db.reinforcement_used_in_design.reinforcement_id == db.reinforcement.id)).select()\n    HAA_values = db((db.hardware_and_accessories_values.product_id == product_id) & (db.hardware_and_accessories_values.hardware_and_accessories_used_in_design_id == db.hardware_and_accessories_used_in_design.id) & (db.hardware_and_accessories_used_in_design.hardware_and_accessories_id == db.hardware_and_accessories.id)).select()\n    glass_values = db((db.glass_values.product_id == product_id) & (db.glass_values.glass_used_in_design_id == db.glass_used_in_design.id) & (db.glass_used_in_design.glass_id == db.glass.id)).select()\n    material_values = db((db.installation_material_values.product_id == product_id) & (db.installation_material_values.installation_material_used_in_design_id == db.installation_material_used_in_design.id) & (db.installation_material_used_in_design.installation_material_id == db.installation_material.id)).select()\n    extra_values = db((db.extra_information_values.product_id == product_id) & (db.extra_information_values.extra_information_in_design_id == db.extra_information_in_design.id)).select()\n\n    # reinforcement_values = db(db.reinforcement_values.product_id == product_id).select()\n    # HAA_values = db(db.hardware_and_accessories_values.product_id == product_id).select()\n    # glass_values = db(db.glass_values.product_id == product_id).select()\n    # material_values = db(db.installation_material_values.product_id == product_id).select()\n    # extra_values = db(db.extra_information_values.product_id == product_id).select()\n\n    profile_names = db(db.profile_used_in_design.design_id == design_id).select(join = db.profile_used_in_design.on(db.profile.id == db.profile_used_in_design.profile_id))\n    reinforcement_names = db(db.reinforcement_used_in_design.design_id == design_id).select(join = db.reinforcement_used_in_design.on(db.reinforcement.id == db.reinforcement_used_in_design.reinforcement_id))\n    HAA_names = db(db.hardware_and_accessories_used_in_design.design_id == design_id).select(join = db.hardware_and_accessories_used_in_design.on(db.hardware_and_accessories.id == db.hardware_and_accessories_used_in_design.hardware_and_accessories_id))\n    glass_names = db(db.glass_used_in_design.design_id == design_id).select(join = db.glass_used_in_design.on(db.glass.id == db.glass_used_in_design.glass_id))\n    material_names = db(db.installation_material_used_in_design.design_id == design_id).select(join = db.installation_material_used_in_design.on(db.installation_material.id == db.installation_material_used_in_design.installation_material_id))\n    extra_information_table = db(db.extra_information_in_design.design_id == design_id).select()\n\n    return dict(product_id = product_id, project_id = project_id, parameter_table = parameter_table, product_table = product_table, design_id = design_id, design_table = design_table, profile_table = profile_values, profile_names = profile_names, reinforcement_table = reinforcement_values, reinforcement_names = reinforcement_names, HAA_table = HAA_values, HAA_names = HAA_names, glass_table = glass_values, glass_names = glass_names, material_table = material_values, material_names = material_names, extra_information_table = extra_information_table, extra_values = extra_values)\n\n@auth.requires_login()\ndef update_product():\n    product_phases=[\'Started\',\'Production\',\'Delivery\',\'Installation\',\'Completed\',\'Cancelled\']\n    variables=request.vars\n    product_id = variables.product_id\n    product_table = db(db.product.id == product_id).select()\n    product = product_table[0]\n    design_id = product.design_id\n    project_id = product.project_id\n    project = db(db.project.id == project_id).select()[0]\n\n    profile_values = db(db.profile_values.product_id == product_id).select()\n    reinforcement_values = db(db.reinforcement_values.product_id == product_id).select()\n    HAA_values = db(db.hardware_and_accessories_values.product_id == product_id).select()\n    glass_values = db(db.glass_values.product_id == product_id).select()\n    material_values = db(db.installation_material_values.product_id == product_id).select()\n    extra_values = db(db.extra_information_values.product_id == product_id).select()\n    extra_information_table = db(db.extra_information_in_design.design_id == design_id).select()\n\n    i=0\n    flag=0\n    for row in product_table:\n        name="product_name_"+str(i)\n        row.name=variables[name]\n\n        name="product_phase_"+str(i)\n        old_phase=row.phase\n        row.phase=variables[name]\n        new_phase=row.phase\n\n        old_phase_index = product_phases.index(old_phase)\n        new_phase_index = product_phases.index(new_phase)\n        #print "old_phase_index=",old_phase_index\n        #print "new_phase_index=",new_phase_index\n\n        if old_phase_index in [0,1,2] and new_phase_index in [3,4]:\n            flag=1\n        elif old_phase_index in [3,4] and new_phase_index in [0,1,2]:\n            row.installed_by = None\n            row.update_record()\n            flag=0\n\n        name="product_block_number_"+str(i)\n        row.block_number=variables[name]\n\n        name="product_flat_number_"+str(i)\n        row.flat_number=variables[name]\n\n        name="product_window_number_"+str(i)\n        row.window_number=variables[name]\n\n        name="product_extra_comment_"+str(i)\n        row.extra_comment=variables[name]\n\n        row.update_record()\n        i=i+1\n\n    i=0\n    for row in profile_values:\n        name="profile_position_"+str(i)\n        row.profile_position=variables[name]\n\n        name="profile_cut_"+str(i)\n        row.cut=variables[name]\n\n        name="profile_quantity_"+str(i)\n        row.length_value=variables[name]\n\n        name="profile_length_"+str(i)\n        row.quantity=variables[name]\n\n        name="profile_cost_"+str(i)\n        row.profile_cost=variables[name]\n\n        row.update_record()\n        i=i+1\n\n    i=0\n    for row in reinforcement_values:\n        name="reinforcement_length_"+str(i)\n        row.length_value=variables[name]\n\n        name="reinforcement_quantity_"+str(i)\n        row.quantity=variables[name]\n\n        name="reinforcement_cost_"+str(i)\n        row.reinforcment_cost=variables[name]\n\n        row.update_record()\n        i=i+1\n\n    i=0\n    for row in HAA_values:\n        name="HAA_quantity_"+str(i)\n        row.quantity=variables[name]\n\n        name="HAA_cost_"+str(i)\n        row.hardware_and_accessories_cost=variables[name]\n\n        row.update_record()\n        i=i+1\n\n    i=0\n    for row in glass_values:\n        name="glass_width_"+str(i)\n        row.width=variables[name]\n\n        name="glass_height_"+str(i)\n        row.height=variables[name]\n\n        name="glass_quantity_"+str(i)\n        row.quantity=variables[name]\n\n        name="glass_cost_"+str(i)\n        row.glass_cost=variables[name]\n\n        row.update_record()\n        i=i+1\n\n    i=0\n    for row in material_values:\n        name="material_quantity_"+str(i)\n        row.quantity=variables[name]\n\n        name="material_cost_"+str(i)\n        row.installation_material_cost=variables[name]\n\n        row.update_record()\n        i=i+1\n\n    i=0\n    for row in extra_values:\n        if extra_information_table[i].default_value:\n            name="extra_information_calculation_"+str(i)\n            row.default_value=variables[name]\n        if extra_information_table[i].calculation:\n            name="extra_information_calculation_"+str(i)\n            row.extra_information_value=variables[name]\n\n        row.update_record()\n        i=i+1\n\n    db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' Updated product\' + product.name + \' in project \' + project.name, log_time = datetime.datetime.now())\n    if(flag==1):\n        redirect(URL(\'enter_installation.html\', vars = dict(product_id = product_id)))\n    else:\n        redirect(URL(\'view_product.html\',vars=dict(entry_id = product_id)))\n\n@auth.requires_login()\ndef update_parameters():\n    product_id = request.vars.product_id\n    product = db(db.product.id == product_id).select()\n    sel = []\n    for i in product:\n        sel=db(db.design_parameters.design_id == i.design_id).select(orderby=db.design_parameters.id)\n    parameters={}\n    parameters=collections.OrderedDict(sorted(parameters.items()))\n    for row in sel:\n        parameters[row.id]=row.name+\'(\'+row.codename+\')\'\n    return dict(parameters = parameters, product_id = product_id)\n@auth.requires_login()\ndef update_parameters_helper():\n    product_id=request.vars.product_id\n    product_parameters = db(db.design_parameters_values.product_id==product_id).select(orderby=db.design_parameters_values.design_parameter_id)\n    product = db(db.product.id == product_id).select()[0]\n    project = db(db.project.id == product.project_id).select()[0]\n    parameters=request.vars\n    del parameters[\'product_id\']\n    for param in product_parameters:\n        param.delete_record()\n    for parameter in parameters:\n        db.design_parameters_values.insert(product_id=product_id,design_parameter_id=parameter,parameter_value=parameters[parameter])\n    db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' Updated product\' + product.name + \' in project \' + project.name, log_time = datetime.datetime.now())\n    redirect(URL(\'calculate_product\',vars=dict(entry_id = product_id, flag = 1)))\n    return dict()\n\n@auth.requires_login()\ndef change_phase():\n    phase = request.vars.phase\n    product_id = request.vars.product_id\n    project_id = request.vars.project_id\n    product = db(db.product.id == product_id).select()\n    for i in product:\n        project = db(db.project.id == i.project_id).select()[0]\n        i.phase = phase\n        i.update_record()\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated phase of \' + i.name + \' of project \' + project.name + \' to \' + phase + \' phase\', log_time = datetime.datetime.now())\n    if phase == \'Installation\':\n        redirect(URL(\'enter_installation.html\', vars = dict(product_id = product_id)))\n    else:\n        redirect(URL(\'view_project.html\', vars = dict(project_id = project_id)))\n    return dict()\n\n@auth.requires_login()\ndef enter_installation():\n    product_id = request.vars.product_id\n    product = db(db.product.id == product_id).select()[0]\n    inst_list = db(db.installation_details.id >= 0).select()\n    form = SQLFORM(db.installation_details)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted installation details \' + form.vars.name, log_time = datetime.datetime.now())\n        redirect(URL(\'add_installation_logs.html\', vars=dict(product_id = product_id, install_id = form.vars.id)))\n    elif form.errors:\n       response.flash = \'form has errors\'\n    else:\n       response.flash = \'please fill out the form\'\n    return dict(inst_list = inst_list, form=form, product = product)\n@auth.requires_login()\ndef add_installation_logs():\n    product_id = request.vars.product_id\n    install_id = request.vars.install_id\n    product = db(db.product.id == product_id).select()\n    project_id = product[0].project_id\n    install = db(db.installation_details.id == install_id).select()[0]\n    for pro in product:\n        pro.installed_by = install_id\n        pro.update_record()\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' entered installation details for product \' + pro.name + \' as Name: \' + install.name + \' Phone Number: \' + install.phone_number, log_time = datetime.datetime.now())\n    redirect(URL(\'view_project.html\', vars = dict(project_id = project_id)))\n    return dict()\n\n@auth.requires_login()\ndef copy_details():\n    product_id = request.vars.product_id\n    return dict(product_id = product_id)\n\n@auth.requires_login()\ndef copy_product():\n    product_id = request.vars.product_id\n    quantity = int(request.vars.quantity)\n    product = db(db.product.id == product_id).select()[0]\n    project_id = product.project_id\n\n    parameter_values = db(db.design_parameters_values.product_id == product_id).select()\n    profile_value = db(db.profile_values.product_id == product_id).select()\n    reinforcement_value = db(db.reinforcement_values.product_id == product_id).select()\n    HAA_value = db(db.hardware_and_accessories_values.product_id == product_id).select()\n    glass_value = db(db.glass_values.product_id == product_id).select()\n    material_value = db(db.installation_material_values.product_id == product_id).select()\n    extra_info_value = db(db.extra_information_values.product_id == product_id).select()\n\n    for num in range(quantity):\n\n        #Naming Products\n        rows=db(db.product.project_id==project_id).select(db.product.name)\n        max=0\n        for i in rows:\n            try:\n                number=int(re.search(r\'\\d+\', i.name).group())\n                if(number>max):\n                    max=number\n            except:\n                pass\n        name = \'product_\' + str(max+1)\n\n        #Copying Values\n        new_id = db.product.insert(name = name, design_id = product.design_id, project_id = project_id, phase = product.phase, installed_by = product.installed_by,\n                          block_number = product.block_number, flat_number = product.flat_number, window_number = product.window_number, extra_comment = product.extra_comment)\n\n        for entry in parameter_values:\n            db.design_parameters_values.insert(product_id = new_id, design_parameter_id = entry.design_parameter_id, parameter_value = entry.parameter_value)\n        for entry in profile_value:\n            db.profile_values.insert(product_id = new_id, profile_used_in_design_id = entry.profile_used_in_design_id, profile_position = entry.profile_position,\n                                     cut = entry.cut, length_value = entry.length_value, quantity = entry.quantity, profile_cost = entry.profile_cost)\n        for entry in reinforcement_value:\n            db.reinforcement_values.insert(product_id = new_id, reinforcement_used_in_design_id = entry.reinforcement_used_in_design_id, length_value = entry.length_value, quantity = entry.quantity, reinforcement_cost = entry.reinforcement_cost)\n        for entry in HAA_value:\n            db.hardware_and_accessories_values.insert(product_id = new_id, hardware_and_accessories_used_in_design_id = entry.hardware_and_accessories_used_in_design_id, quantity = entry.quantity, hardware_and_accessories_cost = entry.hardware_and_accessories_cost)\n        for entry in glass_value:\n            db.glass_values.insert(product_id = new_id, glass_used_in_design_id = entry.glass_used_in_design_id, width = entry.width, height = entry.height, quantity = entry.quantity, glass_cost = entry.glass_cost)\n        for entry in material_value:\n            db.installation_material_values.insert(product_id = new_id, installation_material_used_in_design_id = entry.installation_material_used_in_design_id, quantity = entry.quantity, installation_material_cost = entry.installation_material_cost)\n        for entry in extra_info_value:\n            db.extra_information_values.insert(product_id = new_id, extra_information_in_design_id = entry.extra_information_in_design_id, default_value = entry.default_value, extra_information_value = entry.extra_information_value)\n\n    redirect(URL(\'view_project.html\', vars = dict(project_id = project_id)))\n    return dict()\n\n#endregion\n\n#region Delete Product\n#--------------------------------------------- Delete Product ---------------------------------------------------#\n@auth.requires_login()\ndef delete_product():\n    project_id = request.vars.project_id\n    product_list = db((db.product.id >= 0) & (db.product.project_id == project_id)).select()\n    return dict(product_list = product_list, project_id = project_id)\n@auth.requires_login()\ndef delete_product_helper():\n    project_id = request.vars.project_id\n    product_list = []\n    for var in request.vars:\n        try:\n            product_list.append(int(var))\n        except:\n            pass\n    delete_list = db((db.product.id >= 0) & (db.product.id.belongs(product_list))).select()\n    for product in delete_list:\n        #Deleting Products and associated entries\n        design_parameters_values_list = db(db.design_parameters_values.product_id == product.id).select()\n        for parameter in design_parameters_values_list:\n            parameter.delete_record()\n\n        profile_values_list = db(db.profile_values.product_id == product.id).select()\n        for profile in profile_values_list:\n            profile.delete_record()\n\n        reinforcement_values_list = db(db.reinforcement_values.product_id == product.id).select()\n        for reinforcement in reinforcement_values_list:\n            reinforcement.delete_record()\n\n        hardware_and_accessories_values_list = db(db.hardware_and_accessories_values.product_id == product.id).select()\n        for hardware in hardware_and_accessories_values_list:\n            hardware.delete_record()\n\n        glass_values_list = db(db.glass_values.product_id == product.id).select()\n        for glass in glass_values_list:\n            glass.delete_record()\n\n        installation_material_values_list = db(db.installation_material_values.product_id == product.id).select()\n        for material in installation_material_values_list:\n            material.delete_record()\n\n        extra_information_values_list = db(db.extra_information_values.product_id == product.id).select()\n        for info in extra_information_values_list:\n            info.delete_record()\n\n        product_cost_list = db(db.product_cost.product_id == product.id).select()\n        for cost in product_cost_list:\n            cost.delete_record()\n        product.delete_record()\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' removed product entry Name: \' + product.name + \' Block Number: \' + product.block_number + \' Flat Number: \' + product.flat_number + \' Window Number: \' + product.window_number + \' Phase: \' + product.phase, log_time = datetime.datetime.now())\n    redirect(URL(\'view_project.html\', vars = dict(project_id = project_id)))\n    response.flash = \'Success\'\n    return dict()\n\n#endregion\n\n#region Installation\n@auth.requires_login()\ndef add_installation_details():\n    form = SQLFORM(db.installation_details)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' inserted Installation Details \' + form.vars.name, log_time = datetime.datetime.now())\n        redirect(URL(\'index.html\'))\n    elif form.errors:\n       response.flash = \'form has errors\'\n    else:\n       response.flash = \'please fill out the form\'\n    return dict(form = form)\n\n@auth.requires_login()\ndef update_installation_details():\n    Ins_id = request.vars.entry_id\n    l = db(db.installation_details.id == Ins_id).select()\n    form = []\n    for i in l:\n        old_name = i.name\n        old_number = i.phone_number\n        form = SQLFORM(db.installation_details, i, showid=False, deletable=False)\n        if form.process().accepted:\n            response.flash = \'form accepted\'\n            db.logs.insert(log_message=\'User \' + auth.user.first_name + \' \' + auth.user.last_name + \' updated Installation Details: \'\n                                       + old_name + \' Phone Number: \' + old_number +\n                                       \' to Name: \' + form.vars.name + \' Phone Number: \' + form.vars.phone_number,\n                           log_time = datetime.datetime.now())\n            redirect(URL(\'index.html\'))\n        elif form.errors:\n           response.flash = \'form has errors\'\n        else:\n           response.flash = \'please update\'\n    return dict(form=form)\n\n#endregion\n\n#endregion\n\n#region Calculation\n#################################################################################################################\n#------------------------------------------- Calculation -------------------------------------------------------#\n#################################################################################################################\n\ndef isOp(c):\n    if c != "": return (c in "+-*/")\n    else: return False\n\ndef pri(c): # operator priority\n    if c in "+-": return 0\n    if c in "*/": return 1\n\ndef isNum(c):\n    if c != "": return (c in "0123456789.")\n    else: return False\n\ndef calc(op, num1, num2):\n    if op == "+": return str(float(num1) + float(num2))\n    if op == "-": return str(float(num1) - float(num2))\n    if op == "*": return str(float(num1) * float(num2))\n    if op == "/": return str(float(num1) / float(num2))\n\ndef Infix(expr):\n    expr = list(expr)\n    stackChr = list() # character stack\n    stackNum = list() # number stack\n    num = ""\n    while len(expr) > 0:\n        c = expr.pop(0)\n        if len(expr) > 0: d = expr[0]\n        else: d = ""\n        if isNum(c):\n            num += c\n            if not isNum(d):\n                stackNum.append(num)\n                num = ""\n        elif isOp(c):\n            while True:\n                if len(stackChr) > 0: top = stackChr[-1]\n                else: top = ""\n                if isOp(top):\n                    if not pri(c) > pri(top):\n                        num2 = stackNum.pop()\n                        op = stackChr.pop()\n                        num1 = stackNum.pop()\n                        stackNum.append(calc(op, num1, num2))\n                    else:\n                        stackChr.append(c)\n                        break\n                else:\n                    stackChr.append(c)\n                    break\n        elif c == "(":\n            stackChr.append(c)\n        elif c == ")":\n            while len(stackChr) > 0:\n                c = stackChr.pop()\n                if c == "(":\n                    break\n                elif isOp(c):\n                    num2 = stackNum.pop()\n                    num1 = stackNum.pop()\n                    stackNum.append(calc(c, num1, num2))\n\n    while len(stackChr) > 0:\n        c = stackChr.pop()\n        if c == "(":\n            break\n        elif isOp(c):\n            num2 = stackNum.pop()\n            num1 = stackNum.pop()\n            stackNum.append(calc(c, num1, num2))\n\n    return str(round(float(stackNum.pop()),3))\n\n#endregion\n\ndef under_construction():\n    return dict()\n\nresponse._vars=response._caller(change_profit)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.AttributeError object>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.AttributeError object>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.AttributeError object>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.AttributeError object>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.AttributeError object>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.AttributeError object>'
p23
sS'__reduce__'
p24
S'<built-in method __reduce__ of exceptions.AttributeError object>'
p25
sS'__str__'
p26
S"<method-wrapper '__str__' of exceptions.AttributeError object>"
p27
sS'__format__'
p28
S'<built-in method __format__ of exceptions.AttributeError object>'
p29
sS'__getattribute__'
p30
S"<method-wrapper '__getattribute__' of exceptions.AttributeError object>"
p31
sS'__class__'
p32
S"<type 'exceptions.AttributeError'>"
p33
sS'__unicode__'
p34
S'<built-in method __unicode__ of exceptions.AttributeError object>'
p35
sS'__delattr__'
p36
S"<method-wrapper '__delattr__' of exceptions.AttributeError object>"
p37
sS'__subclasshook__'
p38
S'<built-in method __subclasshook__ of type object>'
p39
sS'__repr__'
p40
S"<method-wrapper '__repr__' of exceptions.AttributeError object>"
p41
sS'args'
p42
S'("\'str\' object has no attribute \'name\'",)'
p43
sS'__dict__'
p44
S'{}'
p45
sS'__sizeof__'
p46
S'<built-in method __sizeof__ of exceptions.AttributeError object>'
p47
sS'__doc__'
p48
S"'Attribute not found.'"
p49
sS'__init__'
p50
S"<method-wrapper '__init__' of exceptions.AttributeError object>"
p51
sS'__new__'
p52
S'<built-in method __new__ of type object>'
p53
ssS'evalue'
p54
S"'str' object has no attribute 'name'"
p55
sS'request'
p56
cgluon.html
XML_unpickle
p57
(S's\x97^\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">ajax</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">application</td><td style="vertical-align:top;">:</td><td><div>Prime</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cid</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">controller</td><td style="vertical-align:top;">:</td><td><div>default</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_admin</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-534568de-0760-4aa0-b443-92fc03ddc776<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_prime</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-bccb9c2c-1db5-44be-9b5a-f48e7d45341d<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_welcome</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-91f701e3-e8ba-495e-8e3a-889a5b43441b<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">env</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_ENCODING</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate, sdch</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_LANGUAGE</td><td style="vertical-align:top;">:</td><td><div>en-US,en;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONNECTION</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_COOKIE</td><td style="vertical-align:top;">:</td><td><div>session_id_welcome=127.0.0.1-91f701e3-e8ba-495e-8e3a-889a5b43441b; session_id_admin=127.0.0.1-534568de-0760-4aa0-b443-92fc03ddc776; session_id_prime=127.0.0.1-bccb9c2c-1db5-44be-9b5a-f48e7d45341d</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_HOST</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_REFERER</td><td style="vertical-align:top;">:</td><td><div>http://127.0.0.1:8000/Prime/default/view_quotation_product.html?entry_id=4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_UPGRADE_INSECURE_REQUESTS</td><td style="vertical-align:top;">:</td><td><div>1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_USER_AGENT</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">PATH_INFO</td><td style="vertical-align:top;">:</td><td><div>/Prime/default/change_profit.html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">QUERY_STRING</td><td style="vertical-align:top;">:</td><td><div>product_id=4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_ADDR</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_PORT</td><td style="vertical-align:top;">:</td><td><div>56798</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_METHOD</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SCRIPT_NAME</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_NAME</td><td style="vertical-align:top;">:</td><td><div>Maneesh-PC</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PORT</td><td style="vertical-align:top;">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PROTOCOL</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_SOFTWARE</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;C:\\\\Users\\\\Maneesh\\\\PycharmProjects\\\\Prime\\\\web2py\\\\applications\\\\Prime\\\\&#x27;, &#x27;C:\\\\Users\\\\Maneesh\\\\PycharmProjects\\\\Prime\\\\web2py\\\\applications\\\\welcome\\\\&#x27;, &#x27;C:\\\\Users\\\\Maneesh\\\\PycharmProjects\\\\Prime\\\\web2py\\\\applications\\\\admin\\\\&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Maneesh\\PycharmProjects\\Prime\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0x2f52760: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;ips&#x27;: [&#x27;169.254.123.187&#x27;, &#x27;fe80::10f3:1a90:cbd6:c54d%32&#x27;], &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;scheduler_groups&#x27;: None, &#x27;port&#x27;: 8000, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;Maneesh-PC&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;print_errors&#x27;: False, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;C:\\\\Users\\\\Maneesh\\\\PycharmProjects\\\\Prime\\\\web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;gae&#x27;: None, &#x27;password&#x27;: &#x27;&lt;ask&gt;&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Maneesh\\PycharmProjects\\Prime\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_encoding</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate, sdch</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_language</td><td style="vertical-align:top;">:</td><td><div>en-US,en;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_connection</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_cookie</td><td style="vertical-align:top;">:</td><td><div>session_id_welcome=127.0.0.1-91f701e3-e8ba-495e-8e3a-889a5b43441b; session_id_admin=127.0.0.1-534568de-0760-4aa0-b443-92fc03ddc776; session_id_prime=127.0.0.1-bccb9c2c-1db5-44be-9b5a-f48e7d45341d</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_host</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_referer</td><td style="vertical-align:top;">:</td><td><div>http://127.0.0.1:8000/Prime/default/view_quotation_product.html?entry_id=4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_upgrade_insecure_requests</td><td style="vertical-align:top;">:</td><td><div>1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_user_agent</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>Maneesh-PC</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>169.254.123.187</div></td></tr><tr><td><div>fe80::10f3:1a90:cbd6:c54d%32</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path_info</td><td style="vertical-align:top;">:</td><td><div>/Prime/default/change_profit.html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">query_string</td><td style="vertical-align:top;">:</td><td><div>product_id=4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_addr</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_port</td><td style="vertical-align:top;">:</td><td><div>56798</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_method</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_uri</td><td style="vertical-align:top;">:</td><td><div>/Prime/default/change_profit.html?product_id=4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">script_name</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_name</td><td style="vertical-align:top;">:</td><td><div>Maneesh-PC</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_port</td><td style="vertical-align:top;">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_protocol</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_software</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_path</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Maneesh\\PycharmProjects\\Prime\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.13.4-stable+timestamp.2015.12.26.04.59.39</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x01D0D0D0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x02F14A78&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0x09A342B0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x01D0D0D0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x02F14A78&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0x09A342B0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">extension</td><td style="vertical-align:top;">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">folder</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Maneesh\\PycharmProjects\\Prime\\web2py\\applications\\Prime\\</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">function</td><td style="vertical-align:top;">:</td><td><div>change_profit</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">global_settings</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;C:\\\\Users\\\\Maneesh\\\\PycharmProjects\\\\Prime\\\\web2py\\\\applications\\\\Prime\\\\&#x27;, &#x27;C:\\\\Users\\\\Maneesh\\\\PycharmProjects\\\\Prime\\\\web2py\\\\applications\\\\welcome\\\\&#x27;, &#x27;C:\\\\Users\\\\Maneesh\\\\PycharmProjects\\\\Prime\\\\web2py\\\\applications\\\\admin\\\\&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Maneesh\\PycharmProjects\\Prime\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0x2f52760: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;ips&#x27;: [&#x27;169.254.123.187&#x27;, &#x27;fe80::10f3:1a90:cbd6:c54d%32&#x27;], &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;scheduler_groups&#x27;: None, &#x27;port&#x27;: 8000, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;Maneesh-PC&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;print_errors&#x27;: False, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;C:\\\\Users\\\\Maneesh\\\\PycharmProjects\\\\Prime\\\\web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;gae&#x27;: None, &#x27;password&#x27;: &#x27;&lt;ask&gt;&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Maneesh\\PycharmProjects\\Prime\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>Maneesh-PC</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>169.254.123.187</div></td></tr><tr><td><div>fe80::10f3:1a90:cbd6:c54d%32</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.13.4-stable+timestamp.2015.12.26.04.59.39</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_https</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_local</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_restful</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_scheduler</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_shell</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">now</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 8, 18, 13, 22, 40, 875000)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_args</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_extension</td><td style="vertical-align:top;">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">url</td><td style="vertical-align:top;">:</td><td><div>/Prime/default/change_profit.html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">utcnow</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 8, 18, 7, 52, 40, 875000)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi</td><td style="vertical-align:top;">:</td><td><div>&lt;gluon.main.LazyWSGI object at 0x08E73950&gt;</div></td></tr></table></div>'
tRp58
sS'frames'
p59
(lp60
(dp61
S'file'
p62
S'C:\\Users\\Maneesh\\PycharmProjects\\Prime\\web2py\\gluon\\restricted.py'
p63
sS'dump'
p64
(dp65
S'environment'
p66
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, ...}"
p67
sS'ccode'
p68
S'<code object <module> at 096A34A0, file "C:\\User...lications\\Prime\\controllers/default.py", line 10>'
p69
ssS'lnum'
p70
I227
sS'lines'
p71
(dp72
I224
S'            ccode = code'
p73
sI225
S'        else:'
p74
sI226
S'            ccode = compile2(code, layer)'
p75
sI227
S'        exec ccode in environment'
p76
sI228
S'    except HTTP:'
p77
sI229
S'        raise'
p78
sI230
S'    except RestrictedError:'
p79
sI231
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p80
sI222
S'    try:'
p81
sI223
S'        if isinstance(code, types.CodeType):'
p82
ssS'call'
p83
S"(code='# -*- coding: utf-8 -*-\\n# this file is released ...\\n\\nresponse._vars=response._caller(change_profit)\\n', environment={'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, ...}, layer=r'C:\\Users\\Maneesh\\PycharmProjects\\Prime\\web2py\\applications\\Prime\\controllers/default.py')"
p84
sS'func'
p85
S'restricted'
p86
sa(dp87
g62
S'C:\\Users\\Maneesh\\PycharmProjects\\Prime\\web2py\\applications\\Prime\\controllers\\default.py'
p88
sg64
(dp89
sg70
I5201
sg71
(dp90
I5190
S'            num2 = stackNum.pop()'
p91
sI5191
S'            num1 = stackNum.pop()'
p92
sI5192
S'            stackNum.append(calc(c, num1, num2))'
p93
sI5193
S''
sI5194
S'    return str(round(float(stackNum.pop()),3))'
p94
sI5195
S''
sI5196
S'#endregion'
p95
sI5197
S''
sI5198
S'def under_construction():'
p96
sI5199
S'    return dict()'
p97
ssg83
S'()'
p98
sg85
S'<module>'
p99
sa(dp100
g62
S'C:\\Users\\Maneesh\\PycharmProjects\\Prime\\web2py\\applications\\Prime\\modules\\plugin_sqleditable\\editable.py'
p101
sg64
(dp102
S'r'
S'undefined'
p103
sS'func'
p104
S'<function change_profit>'
p105
ssg70
I415
sg71
(dp106
I416
S'            if request.ajax:'
p107
sI417
S'                if isinstance(r, dict):'
p108
sI418
S'                    for v in r.values():'
p109
sI419
S'                        if isinstance(v, EDITABLE):'
p110
sI410
S'        self.next = None'
p111
sI411
S''
sI412
S'    @staticmethod'
p112
sI413
S'    def init():'
p113
sI414
S'        def extract(func):'
p114
sI415
S'            r=func()'
p115
ssg83
S'(func=<function change_profit>)'
p116
sg85
S'extract'
p117
sa(dp118
g62
S'C:\\Users\\Maneesh\\PycharmProjects\\Prime\\web2py\\gluon\\tools.py'
p119
sg64
(dp120
S'action'
p121
S'<function change_profit>'
p122
sS'a'
S'()'
p123
sS'b'
g45
ssg70
I4236
sg71
(dp124
I4231
S'                    flag = condition'
p125
sI4232
S'                if not flag:'
p126
sI4233
S'                    current.session.flash = self.messages.access_denied'
p127
sI4234
S'                    return call_or_redirect('
p128
sI4235
S'                        self.settings.on_failed_authorization)'
p129
sI4236
S'                return action(*a, **b)'
p130
sI4237
S'            f.__doc__ = action.__doc__'
p131
sI4238
S'            f.__name__ = action.__name__'
p132
sI4239
S'            f.__dict__.update(action.__dict__)'
p133
sI4240
S'            return f'
p134
ssg83
S'(*a=(), **b={})'
p135
sg85
S'f'
sa(dp136
g62
S'C:\\Users\\Maneesh\\PycharmProjects\\Prime\\web2py\\applications\\Prime\\controllers\\default.py'
p137
sg64
(dp138
S'builtinstr'
p139
S"<type 'str'>"
p140
sS'i'
g103
sS'parameter_value'
p141
g103
sS'global auth'
p142
S'<gluon.tools.Auth object>'
p143
sS'auth.requires_login'
p144
S'<bound method Auth.requires_login of <gluon.tools.Auth object>>'
p145
ssg70
I3387
sg71
(dp146
I3382
S'def change_profit():'
p147
sI3383
S'    product_id = request.vars.product_id'
p148
sI3384
S'    product=db(db.product_in_quotation.id==product_id).select()[0]'
p149
sI3385
S'    form=[]'
p150
sI3386
S'    old_name = db(db.profit_margin_table.id == product.profit_margin_id).select()[0].name'
p151
sI3387
S'    old_name = old_name.name'
p152
sI3388
S"    form = SQLFORM(db.product_in_quotation, product_id, fields=['profit_margin_id'],showid = False)"
p153
sI3389
S'    if form.process().accepted:'
p154
sI3390
S"        response.flash = 'form accepted'"
p155
sI3391
S'        percentage = db(db.profit_margin_table.id == form.vars.profit_margin_id).select()[0]'
p156
ssg83
S'()'
p157
sg85
S'change_profit'
p158
sasS'pyver'
p159
S'Python 2.7.8: C:\\Python27\\python.exe (prefix: C:\\Python27)'
p160
sS'session'
p161
g57
(S's\xc3\x0b\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">auth</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">expiration</td><td style="vertical-align:top;">:</td><td><div>3600</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">hmac_key</td><td style="vertical-align:top;">:</td><td><div>a2b686fd-0826-4c08-b633-25d70d707138</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">last_visit</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 8, 18, 13, 22, 40, 875000)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remember_me</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">user</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">IS_ADMIN</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">designation</td><td style="vertical-align:top;">:</td><td><div>admin</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">email</td><td style="vertical-align:top;">:</td><td><div>test_admin@test_mail.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">first_name</td><td style="vertical-align:top;">:</td><td><div>test</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">id</td><td style="vertical-align:top;">:</td><td><div>2L</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">last_name</td><td style="vertical-align:top;">:</td><td><div>admin</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">phone_number</td><td style="vertical-align:top;">:</td><td><div>9100000000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">registration_id</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">registration_key</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">reset_password_key</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">user_groups</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">2</td><td style="vertical-align:top;">:</td><td><div>user_2</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">last_orderby</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">last_query</td><td style="vertical-align:top;">:</td><td><div>db.product_quotation_hardware_values.id&gt;0</div></td></tr></table></div>'
tRp162
sS'etype'
p163
S"<type 'exceptions.AttributeError'>"
p164
sS'date'
p165
S'Thu Aug 18 13:22:41 2016'
p166
sS'response'
p167
g57
(S's] \x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">body</td><td style="vertical-align:top;">:</td><td><div>&lt;cStringIO.StringO object at 0x094B6F00&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_prime</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-bccb9c2c-1db5-44be-9b5a-f48e7d45341d<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">delimiters</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">files</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>/Prime/static/plugin_sqleditable/js/mindmup-editabletable.js</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">form_label_separator</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">formstyle</td><td style="vertical-align:top;">:</td><td><div>bootstrap3_inline</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generic_patterns</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>*</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">google_analytics_id</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">headers</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">X-Powered-By</td><td style="vertical-align:top;">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">logo</td><td style="vertical-align:top;">:</td><td><div><a class="navbar-brand" href="http://www.web2py.com/" id="web2py-logo"><b>web<span>2</span>py</b>&trade;&nbsp;</a></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">menu</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div><table><tr><td><div>Homepage</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/Prime/default/index</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>My Sites</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/site</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Admin Functions</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/Prime/default/admin_functions.html</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Inventory Management</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/Prime/default/inventory_management.html</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">meta</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">author</td><td style="vertical-align:top;">:</td><td><div>Your Name &lt;you@example.com&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">description</td><td style="vertical-align:top;">:</td><td><div>a cool new app</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generator</td><td style="vertical-align:top;">:</td><td><div>Web2py Web Framework</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">keywords</td><td style="vertical-align:top;">:</td><td><div>web2py, python, framework</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">models_to_run</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^default/\\w+\\.py$</div></td></tr><tr><td><div>^default/change_profit/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">postprocessing</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_compression_level</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_expires</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_key</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_data_name</td><td style="vertical-align:top;">:</td><td><div>session_data_prime</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_file</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;C:\\\\Users\\\\Maneesh\\\\PycharmProjects\\\\Prime\\\\web2py\\\\applications\\\\Prime\\\\sessions\\\\1a7\\\\0ea\\\\127.0.0.1-bccb9c2c-1db5-44be-9b5a-f48e7d45341d&#x27;, mode &#x27;rb+&#x27; at 0x0A7EE128&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_filename</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Maneesh\\PycharmProjects\\Prime\\web2py\\applications\\Prime\\sessions\\127.0.0.1-bccb9c2c-1db5-44be-9b5a-f48e7d45341d</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_hash</td><td style="vertical-align:top;">:</td><td><div>93fafa5c03381099f6446ed0f5426ce7</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-bccb9c2c-1db5-44be-9b5a-f48e7d45341d</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_name</td><td style="vertical-align:top;">:</td><td><div>session_id_prime</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_locked</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_masterapp</td><td style="vertical-align:top;">:</td><td><div>Prime</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_new</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_storage_type</td><td style="vertical-align:top;">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">status</td><td style="vertical-align:top;">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">subtitle</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">title</td><td style="vertical-align:top;">:</td><td><div>Prime</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">view</td><td style="vertical-align:top;">:</td><td><div>default/change_profit.html</div></td></tr></table></div>'
tRp168
sS'locals'
p169
(dp170
S'product'
p171
S"<Row {'reinforcement_cost': 755.0, 'profile_cost....product_in_quotation_id = 4)>, 'quantity': 25L}>"
p172
sS'product_id'
p173
S"'4'"
p174
sS'form'
p175
S'[]'
p176
sS'old_name'
p177
S"'premium'"
p178
sssS'traceback'
p179
S'Traceback (most recent call last):\n  File "C:\\Users\\Maneesh\\PycharmProjects\\Prime\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\Maneesh\\PycharmProjects\\Prime\\web2py\\applications\\Prime\\controllers/default.py", line 5201, in <module>\n  File "applications\\Prime\\modules\\plugin_sqleditable\\editable.py", line 415, in extract\n    r=func()\n  File "C:\\Users\\Maneesh\\PycharmProjects\\Prime\\web2py\\gluon\\tools.py", line 4236, in f\n    return action(*a, **b)\n  File "C:\\Users\\Maneesh\\PycharmProjects\\Prime\\web2py\\applications\\Prime\\controllers/default.py", line 3387, in change_profit\n    old_name = old_name.name\nAttributeError: \'str\' object has no attribute \'name\'\n'
p180
s.